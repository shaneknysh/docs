{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Network-wide ad blocking via your own Linux hardware The Pi-hole \u00ae is a DNS sinkhole that protects your devices from unwanted content, without installing any client-side software. Easy-to-install : our versatile installer walks you through the process, and takes less than ten minutes Resolute : content is blocked in non-browser locations , such as ad-laden mobile apps and smart TVs Responsive : seamlessly speeds up the feel of everyday browsing by caching DNS queries Lightweight : runs smoothly with minimal hardware and software requirements Robust : a command-line interface that is quality assured for interoperability Insightful : a beautiful responsive Web Interface dashboard to view and control your Pi-hole Versatile : can optionally function as a DHCP server , ensuring all your devices are protected automatically Scalable : capable of handling hundreds of millions of queries when installed on server-grade hardware Modern : blocks ads over both IPv4 and IPv6 Free : open-source software which helps ensure you are the sole person in control of your privacy Pi-hole is free, but powered by your support \u00b6 There are many reoccurring costs involved with maintaining free, open-source, and privacy respecting software; expenses which our volunteer developers pitch in to cover out-of-pocket. This is just one example of how strongly we feel about our software, as well as the importance of keeping it maintained. Make no mistake: your support is absolutely vital to help keep us innovating! Donations \u00b6 Sending a donation using our links below is extremely helpful in offsetting a portion of our monthly expenses: Donate via PayPal or Stripe Bitcoin, Bitcoin Cash, Ethereum, Litecoin Alternative support \u00b6 If you'd rather not donate ( which is okay! ), there are other ways you can help support us: Digital Ocean new account credits with our affiliate link Amazon affiliate link Spreading the word about our software, and how you have benefited from it Contributing via GitHub \u00b6 We welcome everyone to contribute to issue reports, suggest new features, and create pull requests. If you have something to add - anything from a typo through to a whole new feature, we're happy to check it out! Just make sure to fill out our template when submitting your request; the questions that it asks will help the volunteers quickly understand what you're aiming to achieve. You'll find that the install script and the debug script have an abundance of comments, which will help you better understand how Pi-hole works. They're also a valuable resource to those who want to learn how to write scripts or code a program! We encourage anyone who likes to tinker to read through it, and submit a pull request for us to review.","title":"Overview"},{"location":"#pi-hole-is-free-but-powered-by-your-support","text":"There are many reoccurring costs involved with maintaining free, open-source, and privacy respecting software; expenses which our volunteer developers pitch in to cover out-of-pocket. This is just one example of how strongly we feel about our software, as well as the importance of keeping it maintained. Make no mistake: your support is absolutely vital to help keep us innovating!","title":"Pi-hole is free, but powered by your support"},{"location":"#donations","text":"Sending a donation using our links below is extremely helpful in offsetting a portion of our monthly expenses: Donate via PayPal or Stripe Bitcoin, Bitcoin Cash, Ethereum, Litecoin","title":"Donations"},{"location":"#alternative-support","text":"If you'd rather not donate ( which is okay! ), there are other ways you can help support us: Digital Ocean new account credits with our affiliate link Amazon affiliate link Spreading the word about our software, and how you have benefited from it","title":"Alternative support"},{"location":"#contributing-via-github","text":"We welcome everyone to contribute to issue reports, suggest new features, and create pull requests. If you have something to add - anything from a typo through to a whole new feature, we're happy to check it out! Just make sure to fill out our template when submitting your request; the questions that it asks will help the volunteers quickly understand what you're aiming to achieve. You'll find that the install script and the debug script have an abundance of comments, which will help you better understand how Pi-hole works. They're also a valuable resource to those who want to learn how to write scripts or code a program! We encourage anyone who likes to tinker to read through it, and submit a pull request for us to review.","title":"Contributing via GitHub"},{"location":"abbreviations/","text":"","title":"Abbreviations"},{"location":"core/pihole-command/","text":"Pi-hole makes use of many commands, and here we will break down those required to administer the program via the command-line Interface. Index Invocation Core Script pihole Web Script pihole -a Pi-hole Core \u00b6 Feature Invocation Core pihole Whitelisting, Blacklisting and Regex pihole -w , pihole -b , pihole -regex , pihole -wild Debugger pihole debug Log Flush pihole flush Reconfigure pihole reconfigure Tail pihole tail Admin pihole -a Chronometer pihole chronometer Gravity pihole updateGravity Logging pihole logging Query pihole query Update pihole updatePihole Version pihole version Uninstall pihole uninstall Status pihole status Enable & Disable pihole enable Restart DNS pihole restartdns Checkout pihole checkout Core Script \u00b6 Help Command pihole --help Script Location /usr/local/bin/pihole Example Usage pihole -b advertiser.example.com The core script of Pi-hole provides the ability to tie many DNS related functions into a simple and user-friendly management system, so that one may easily block unwanted content such as advertisements. For both the Command-line Interface (CLI) and Web Interface, we achieve this through the pihole command (this helps minimize code duplication, and allows users to read exactly what's happening using bash scripting). This \"wrapper\" elevates the current user (whether it be your own user account, or www-data ) using sudo , but restricts the elevation to solely what can be called through the wrapper. Whitelisting, Blacklisting and Regex \u00b6 Help Command pihole -w --help , pihole -b --help , pihole -regex --help , pihole -wild --help Script Location /opt/pihole/list.sh Example Usage pihole -regex '^example.com$' '.*\\.example2.net' Administrators need to be able to manually add and remove domains for various purposes, and these commands serve that purpose. See Regex Blocking for more information about using Regex. Basic Script Process : Each domain is validated using regex (except when using -regex ), to ensure invalid domains and IDNs are not added A domain gets added to or removed from the domainlist table in /etc/pihole/gravity.db The DNS server is then reloaded Debugger \u00b6 Help Command N/A Script Location /opt/pihole/piholeDebug.sh Example Usage pihole debug The Pi-hole debugger will attempt to diagnose any issues, and link to an FAQ with instructions as to how an admin can rectify the issue. Once the debugger has finished, the admin has the option to upload the generated log to the Pi-hole developers, who can help with diagnosing and rectifying persistent issues. Log Flush \u00b6 Help Command N/A Script Location /opt/pihole/piholeLogFlush.sh Example Usage pihole flush When invoked manually, this command will allow you to empty Pi-hole's log, which is located at /var/log/pihole.log . The command also serves to rotate the log daily, if the logrotate application is installed. Reconfigure \u00b6 Help Command N/A Script Location /etc/.pihole/automated install/basic-install.sh Example Usage pihole reconfigure There are times where the administrator will need to repair or reconfigure the Pi-hole installation, which is performed via this command. Basic Script Process : basic-install.sh will be run Reconfigure will run through the first-time installation prompts, asking for upstream DNS provider, IP protocols, etc Repair will retain your existing settings and will attempt to repair any scripts or dependencies as necessary The rest of basic-install.sh will then run as appropriate Tail \u00b6 Help Command N/A Script Location /usr/local/bin/pihole Example Usage pihole tail Since Pi-hole will log DNS queries by default, using this command to watch the log in real-time can be useful for debugging a problematic site, or even just for sheer curiosities sake. Admin \u00b6 Help Command pihole -a --help Script Location /opt/pihole/webpage.sh Example Usage pihole -a -p secretpassword Detailed information on this is found here . Chronometer \u00b6 Help Command pihole -c --help Script Location /opt/pihole/chronometer.sh Example Usage pihole -c -e Chronometer is a console dashboard of real-time stats, which can be displayed via ssh or on an LCD screen attached directly to your hardware. The script is capable of detecting the size of your screen and adjusting output to try and best suit it. Image courtesy of /u/super_nicktendo22 Gravity \u00b6 Help Command N/A Script Location /opt/pihole/gravity.sh Example Usage pihole -g Gravity is one of the most important scripts of Pi-hole. Its main purpose is to retrieve blocklists, and then consolidate them into one unique list for the built-in DNS server to use, but it also serves to complete the process of manual whitelisting, blacklisting and wildcard update. It is run automatically each week, but it can be invoked manually at any time. Basic Script Process : It will determine Internet connectivity, and give time for pihole-FTL to be resolvable on low-end systems if has just been restarted It extracts all URLs and domains from the adlists table in /etc/pihole/gravity.db It runs through each URL, downloading it if necessary curl checks the servers Last-Modified header to ensure it is getting a newer version It will attempt to parse the file into a domains-only format if necessary Lists are merged, comments removed, sorted uniquely and stored in the gravity table of /etc/pihole/gravity.db Gravity cleans up temporary content and reloads the DNS server Logging \u00b6 Help Command pihole logging --help Script Location /usr/local/bin/pihole Example Usage pihole logging off This command specifies whether the Pi-hole log should be used, by commenting out log-queries within /etc/dnsmasq.d/01-pihole.conf and flushing the log. Query \u00b6 Help Command pihole query --help Script Location /usr/local/bin/pihole Example Usage pihole -q -exact -adlist example.domain.com This command will query your whitelist, blacklist, wildcards and adlists for a specified domain. Basic Script Process : User-specified options are handled Using idn , it will convert Internationalized domain names into punycode Database at /etc/pihole/gravity.db is queried to return a list of adlists in which the queried domain exists. Update \u00b6 Help Command pihole update Script Location /opt/pihole/update.sh Example Usage pihole -up Check Pi-hole Core, Web Interface and FTL repositories to determine what upgrades (if any) are required. It will then automatically update and reinstall if necessary. Basic Script Process : Script determines if updates are available by querying GitHub Updated files are downloaded to the local filesystem using git basic-install.sh is run Version \u00b6 Help Command pihole version Script Location /opt/pihole/version.sh Example Usage pihole -v -c Shows installed versions of Pi-hole, Web Interface & FTL. It also provides options to configure which details will be printed, such as the current version, latest version, hash and subsystem. Uninstall \u00b6 Help Command N/A Script Location /etc/.pihole/automated install/uninstall.sh Example Usage pihole uninstall Uninstall Pi-hole from your system, giving the option to remove each dependency individually. Status \u00b6 Help Command N/A Script Location /usr/local/bin/pihole Example Usage pihole status Display the running status of Pi-hole's DNS and blocking services. Enable & Disable \u00b6 Help Command pihole disable --help Script Location /usr/local/bin/pihole Example Usage pihole disable 5m Toggle Pi-hole's ability to block unwanted domains. The disable option has the option to set a specified time before blocking is automatically re-enabled. Restart DNS \u00b6 Help Command N/A Script Location /usr/local/bin/pihole Example Usage pihole restartdns Restart Pi-hole's DNS service. Checkout \u00b6 Help Command pihole checkout --help Script Location /opt/pihole/piholeCheckout.sh Example Usage pihole checkout dev Switch Pi-hole subsystems to a different GitHub branch. An admin can specify repositories as well as branches. Pi-hole Web \u00b6 Feature Invocation Web Script pihole -a Password pihole -a password Temperature Unit pihole -a celsius , pihole -a fahrenheit , pihole -a kelvin Host Record pihole -a hostrecord Email Address pihole -a email Interface pihole -a interface Web Script \u00b6 Help Command pihole -a --help Script Location /opt/pihole/webpage.sh Example Usage pihole -a -p secretpassword Set options for the Web Interface. This script is used to tie in all Web Interface features which are not already covered by the Core Script . Password \u00b6 Help Command N/A Script Location /opt/pihole/webpage.sh Example Usage pihole -a -p secretpassword Set the Web Interface password. Password can be entered as an option (e.g: pihole -a -p secretpassword ), or separately as to not display on the screen (e.g: pihole -a -p ). Temperature Unit \u00b6 Help Command N/A Script Location /opt/pihole/webpage.sh Example Usage pihole -a -c Set the specified temperature unit as the preferred type. This preference will affect the Web Interface, as well as Chronometer. Email Address \u00b6 Help Command N/A Script Location /opt/pihole/webpage.sh Example Usage pihole -a email admin@domain.com Set an administrative contact address for the Block Page. This will create a hyperlink on the Block Page to the specified email address. Interface \u00b6 Help Command pihole -a interface --help Script Location /opt/pihole/webpage.sh Example Usage pihole -a interface local Specify interface listening behavior for pihole-FTL . When using pihole -a interface all , please ensure you use a firewall to prevent your Pi-hole from becoming an unwitting host to DNS amplification attackers . You may want to consider running OpenVPN to grant your mobile devices access to the Pi-hole.","title":"The <samp>pihole</samp> command"},{"location":"core/pihole-command/#pi-hole-core","text":"Feature Invocation Core pihole Whitelisting, Blacklisting and Regex pihole -w , pihole -b , pihole -regex , pihole -wild Debugger pihole debug Log Flush pihole flush Reconfigure pihole reconfigure Tail pihole tail Admin pihole -a Chronometer pihole chronometer Gravity pihole updateGravity Logging pihole logging Query pihole query Update pihole updatePihole Version pihole version Uninstall pihole uninstall Status pihole status Enable & Disable pihole enable Restart DNS pihole restartdns Checkout pihole checkout","title":"Pi-hole Core"},{"location":"core/pihole-command/#core-script","text":"Help Command pihole --help Script Location /usr/local/bin/pihole Example Usage pihole -b advertiser.example.com The core script of Pi-hole provides the ability to tie many DNS related functions into a simple and user-friendly management system, so that one may easily block unwanted content such as advertisements. For both the Command-line Interface (CLI) and Web Interface, we achieve this through the pihole command (this helps minimize code duplication, and allows users to read exactly what's happening using bash scripting). This \"wrapper\" elevates the current user (whether it be your own user account, or www-data ) using sudo , but restricts the elevation to solely what can be called through the wrapper.","title":"Core Script"},{"location":"core/pihole-command/#whitelisting-blacklisting-and-regex","text":"Help Command pihole -w --help , pihole -b --help , pihole -regex --help , pihole -wild --help Script Location /opt/pihole/list.sh Example Usage pihole -regex '^example.com$' '.*\\.example2.net' Administrators need to be able to manually add and remove domains for various purposes, and these commands serve that purpose. See Regex Blocking for more information about using Regex. Basic Script Process : Each domain is validated using regex (except when using -regex ), to ensure invalid domains and IDNs are not added A domain gets added to or removed from the domainlist table in /etc/pihole/gravity.db The DNS server is then reloaded","title":"Whitelisting, Blacklisting and Regex"},{"location":"core/pihole-command/#debugger","text":"Help Command N/A Script Location /opt/pihole/piholeDebug.sh Example Usage pihole debug The Pi-hole debugger will attempt to diagnose any issues, and link to an FAQ with instructions as to how an admin can rectify the issue. Once the debugger has finished, the admin has the option to upload the generated log to the Pi-hole developers, who can help with diagnosing and rectifying persistent issues.","title":"Debugger"},{"location":"core/pihole-command/#log-flush","text":"Help Command N/A Script Location /opt/pihole/piholeLogFlush.sh Example Usage pihole flush When invoked manually, this command will allow you to empty Pi-hole's log, which is located at /var/log/pihole.log . The command also serves to rotate the log daily, if the logrotate application is installed.","title":"Log Flush"},{"location":"core/pihole-command/#reconfigure","text":"Help Command N/A Script Location /etc/.pihole/automated install/basic-install.sh Example Usage pihole reconfigure There are times where the administrator will need to repair or reconfigure the Pi-hole installation, which is performed via this command. Basic Script Process : basic-install.sh will be run Reconfigure will run through the first-time installation prompts, asking for upstream DNS provider, IP protocols, etc Repair will retain your existing settings and will attempt to repair any scripts or dependencies as necessary The rest of basic-install.sh will then run as appropriate","title":"Reconfigure"},{"location":"core/pihole-command/#tail","text":"Help Command N/A Script Location /usr/local/bin/pihole Example Usage pihole tail Since Pi-hole will log DNS queries by default, using this command to watch the log in real-time can be useful for debugging a problematic site, or even just for sheer curiosities sake.","title":"Tail"},{"location":"core/pihole-command/#admin","text":"Help Command pihole -a --help Script Location /opt/pihole/webpage.sh Example Usage pihole -a -p secretpassword Detailed information on this is found here .","title":"Admin"},{"location":"core/pihole-command/#chronometer","text":"Help Command pihole -c --help Script Location /opt/pihole/chronometer.sh Example Usage pihole -c -e Chronometer is a console dashboard of real-time stats, which can be displayed via ssh or on an LCD screen attached directly to your hardware. The script is capable of detecting the size of your screen and adjusting output to try and best suit it. Image courtesy of /u/super_nicktendo22","title":"Chronometer"},{"location":"core/pihole-command/#gravity","text":"Help Command N/A Script Location /opt/pihole/gravity.sh Example Usage pihole -g Gravity is one of the most important scripts of Pi-hole. Its main purpose is to retrieve blocklists, and then consolidate them into one unique list for the built-in DNS server to use, but it also serves to complete the process of manual whitelisting, blacklisting and wildcard update. It is run automatically each week, but it can be invoked manually at any time. Basic Script Process : It will determine Internet connectivity, and give time for pihole-FTL to be resolvable on low-end systems if has just been restarted It extracts all URLs and domains from the adlists table in /etc/pihole/gravity.db It runs through each URL, downloading it if necessary curl checks the servers Last-Modified header to ensure it is getting a newer version It will attempt to parse the file into a domains-only format if necessary Lists are merged, comments removed, sorted uniquely and stored in the gravity table of /etc/pihole/gravity.db Gravity cleans up temporary content and reloads the DNS server","title":"Gravity"},{"location":"core/pihole-command/#logging","text":"Help Command pihole logging --help Script Location /usr/local/bin/pihole Example Usage pihole logging off This command specifies whether the Pi-hole log should be used, by commenting out log-queries within /etc/dnsmasq.d/01-pihole.conf and flushing the log.","title":"Logging"},{"location":"core/pihole-command/#query","text":"Help Command pihole query --help Script Location /usr/local/bin/pihole Example Usage pihole -q -exact -adlist example.domain.com This command will query your whitelist, blacklist, wildcards and adlists for a specified domain. Basic Script Process : User-specified options are handled Using idn , it will convert Internationalized domain names into punycode Database at /etc/pihole/gravity.db is queried to return a list of adlists in which the queried domain exists.","title":"Query"},{"location":"core/pihole-command/#update","text":"Help Command pihole update Script Location /opt/pihole/update.sh Example Usage pihole -up Check Pi-hole Core, Web Interface and FTL repositories to determine what upgrades (if any) are required. It will then automatically update and reinstall if necessary. Basic Script Process : Script determines if updates are available by querying GitHub Updated files are downloaded to the local filesystem using git basic-install.sh is run","title":"Update"},{"location":"core/pihole-command/#version","text":"Help Command pihole version Script Location /opt/pihole/version.sh Example Usage pihole -v -c Shows installed versions of Pi-hole, Web Interface & FTL. It also provides options to configure which details will be printed, such as the current version, latest version, hash and subsystem.","title":"Version"},{"location":"core/pihole-command/#uninstall","text":"Help Command N/A Script Location /etc/.pihole/automated install/uninstall.sh Example Usage pihole uninstall Uninstall Pi-hole from your system, giving the option to remove each dependency individually.","title":"Uninstall"},{"location":"core/pihole-command/#status","text":"Help Command N/A Script Location /usr/local/bin/pihole Example Usage pihole status Display the running status of Pi-hole's DNS and blocking services.","title":"Status"},{"location":"core/pihole-command/#enable-disable","text":"Help Command pihole disable --help Script Location /usr/local/bin/pihole Example Usage pihole disable 5m Toggle Pi-hole's ability to block unwanted domains. The disable option has the option to set a specified time before blocking is automatically re-enabled.","title":"Enable &amp; Disable"},{"location":"core/pihole-command/#restart-dns","text":"Help Command N/A Script Location /usr/local/bin/pihole Example Usage pihole restartdns Restart Pi-hole's DNS service.","title":"Restart DNS"},{"location":"core/pihole-command/#checkout","text":"Help Command pihole checkout --help Script Location /opt/pihole/piholeCheckout.sh Example Usage pihole checkout dev Switch Pi-hole subsystems to a different GitHub branch. An admin can specify repositories as well as branches.","title":"Checkout"},{"location":"core/pihole-command/#pi-hole-web","text":"Feature Invocation Web Script pihole -a Password pihole -a password Temperature Unit pihole -a celsius , pihole -a fahrenheit , pihole -a kelvin Host Record pihole -a hostrecord Email Address pihole -a email Interface pihole -a interface","title":"Pi-hole Web"},{"location":"core/pihole-command/#web-script","text":"Help Command pihole -a --help Script Location /opt/pihole/webpage.sh Example Usage pihole -a -p secretpassword Set options for the Web Interface. This script is used to tie in all Web Interface features which are not already covered by the Core Script .","title":"Web Script"},{"location":"core/pihole-command/#password","text":"Help Command N/A Script Location /opt/pihole/webpage.sh Example Usage pihole -a -p secretpassword Set the Web Interface password. Password can be entered as an option (e.g: pihole -a -p secretpassword ), or separately as to not display on the screen (e.g: pihole -a -p ).","title":"Password"},{"location":"core/pihole-command/#temperature-unit","text":"Help Command N/A Script Location /opt/pihole/webpage.sh Example Usage pihole -a -c Set the specified temperature unit as the preferred type. This preference will affect the Web Interface, as well as Chronometer.","title":"Temperature Unit"},{"location":"core/pihole-command/#email-address","text":"Help Command N/A Script Location /opt/pihole/webpage.sh Example Usage pihole -a email admin@domain.com Set an administrative contact address for the Block Page. This will create a hyperlink on the Block Page to the specified email address.","title":"Email Address"},{"location":"core/pihole-command/#interface","text":"Help Command pihole -a interface --help Script Location /opt/pihole/webpage.sh Example Usage pihole -a interface local Specify interface listening behavior for pihole-FTL . When using pihole -a interface all , please ensure you use a firewall to prevent your Pi-hole from becoming an unwitting host to DNS amplification attackers . You may want to consider running OpenVPN to grant your mobile devices access to the Pi-hole.","title":"Interface"},{"location":"database/","text":"Pi-hole uses the well-known relational database management system SQLite3 both for its long-term storage of query data and for its domain management. In contrast to many other database management solutions, Pi-hole does not need a server database engine as the database engine is directly embedded in FTL DNS . It seems an obvious choice as it is probably the most widely deployed database engine - it is used today by several widespread web browsers, operating systems, and embedded systems (such as mobile phones), among others. Hence, it is rich in supported platforms and offered features. SQLite implements most of the SQL-92 standard for SQL and can be used for high-level queries. Details concerning the databases, their contained tables and exemplary SQL commands allowing even complex requests to Pi-hole's databases are described on the subpages of this category. Query database /etc/pihole/pihole-FTL.db Domain database /etc/pihole/gravity.db","title":"Overview"},{"location":"database/ftl/","text":"Pi-hole FTL DNS uses the well-known relational database management system SQLite3 as its long-term storage of query data. In contrast to many other database management solutions, FTL DNS does not need a server database engine as the database engine is directly embedded in FTL DNS . It seems an obvious choice as it is probably the most widely deployed database engine - it is used today by several widespread web browsers, operating systems, and embedded systems (such as mobile phones), among others. Hence, it is rich in supported platforms and offered features. SQLite implements most of the SQL-92 standard for SQL and can be used for high-level queries. The long-term query database was the first database that was added to the Pi-hole project. We update this database periodically and on the exit of FTL DNS (triggered e.g. by a service pihole-FTL restart ). The updating frequency can be controlled by the parameter DBINTERVAL and defaults to once per minute. We think this interval is sufficient to protect against data losses due to power failure events. FTL DNS needs the database to populate its internal history of the most recent 24 hours. If the database is disabled, FTL DNS will show an empty query history after a restart. The location of the database can be configured by the config parameter DBFILE . It defaults to /etc/pihole/pihole-FTL.db . If the given file does not exist, FTL DNS will create a new (empty) database file. Another way of controlling the size of the long-term database is by setting a maximum age for log queries to keep using the config parameter MAXDBDAYS . It defaults to 365 days, i.e. queries that are older than one year get periodically removed to limit the growth of the long-term database file. The config parameter DBIMPORT controls whether FTL loads information from the database on startup. It needs to do this to populate the internal data structure with the most recent history. However, as importing from the database on disk can delay FTL on very large deploys, it can be disabled using this option. Split database \u00b6 You can split your long-term database by periodically rotating the database file (do this only when pihole-FTL is not running). The individual database contents can easily be merged when required. This could be implemented by running a monthly cron job such as: sudo service pihole-FTL stop sudo mv /etc/pihole/pihole-FTL.db /media/backup/pihole-FTL_ $( date + \"%m-%y\" ) .db sudo service pihole-FTL start Note that DNS resolution will not be available as long as pihole-FTL is stopped. Backup database \u00b6 The database can be backed up while FTL is running when using the SQLite3 Online backup method, e.g., sqlite3 /etc/pihole/pihole-FTL.db \".backup /home/pi/pihole-FTL.db.backup\" will create /home/pi/pihole-FTL.db.backup which is a copy of your long-term database. The long-term database contains three tables: Query Table \u00b6 Label Type Allowed to by empty Content id integer No autoincrement ID for the table, only used by SQLite3 , not by FTL DNS timestamp integer No Unix timestamp when this query arrived at FTL DNS (used as index) type integer No Type of this query (see Supported query types ) status integer No How was this query handled by FTL DNS ? (see Supported status types ) domain text No Requested domain client text No Requesting client ( IP address) forward text Yes Forward destination used for this query (only set if status == 2 ) Counters table \u00b6 This table contains counter values integrated over the entire lifetime of the table Label Type Allowed to by empty Content id integer No ID for the table used to select a counter (see below) value integer No Value of a given counter ID Interpretation 0 Total number of queries 1 Total number of blocked queries FTL table \u00b6 The FTL table contains some data used by FTL DNS for determining which queries to save to the database. This table does not contain any entries of general interest. SQLite3 syntax used to create this table: Supported query types \u00b6 ID Query Type 1 A 2 AAAA 3 ANY 4 SRV 5 SOA 6 PTR 7 TXT Supported status types \u00b6 ID Status Details 0 Unknown \u2754 was not answered by forward destination 1 Blocked \u274c Domain contained in gravity database 2 Allowed \u2705 Forwarded 3 Allowed \u2705 Known, replied to from cache 4 Blocked \u274c Domain matched by a regex blacklist filter 5 Blocked \u274c Domain contained in exact blacklist 6 Blocked \u274c By upstream server (known blocking page IP address) 7 Blocked \u274c By upstream server ( 0.0.0.0 or :: ) 8 Blocked \u274c By upstream server ( NXDOMAIN with RA bit unset) 9 Blocked \u274c Domain contained in gravity database Blocked during deep CNAME inspection 10 Blocked \u274c Domain matched by a regex blacklist filter Blocked during deep CNAME inspection 11 Blocked \u274c Domain contained in exact blacklist Blocked during deep CNAME inspection Example for interaction with the long-term query database \u00b6 In addition to the interactions the Pi-hole database API offers, you can also run your own SQL commands against the database. If you want to obtain the three most queries domains for all time, you could use sqlite3 \"/etc/pihole/pihole-FTL.db\" \"SELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP BY domain ORDER BY count(domain) DESC LIMIT 3\" which would return something like discourse.pi-hole.net|421095 www.pi-hole.net|132483 posteo.de|130243 showing the domain and the number of times it was found in the long-term database. Note that such a request might take a very long time for computation as the entire history of queries has to be processed for this.","title":"Query database"},{"location":"database/ftl/#split-database","text":"You can split your long-term database by periodically rotating the database file (do this only when pihole-FTL is not running). The individual database contents can easily be merged when required. This could be implemented by running a monthly cron job such as: sudo service pihole-FTL stop sudo mv /etc/pihole/pihole-FTL.db /media/backup/pihole-FTL_ $( date + \"%m-%y\" ) .db sudo service pihole-FTL start Note that DNS resolution will not be available as long as pihole-FTL is stopped.","title":"Split database"},{"location":"database/ftl/#backup-database","text":"The database can be backed up while FTL is running when using the SQLite3 Online backup method, e.g., sqlite3 /etc/pihole/pihole-FTL.db \".backup /home/pi/pihole-FTL.db.backup\" will create /home/pi/pihole-FTL.db.backup which is a copy of your long-term database. The long-term database contains three tables:","title":"Backup database"},{"location":"database/ftl/#query-table","text":"Label Type Allowed to by empty Content id integer No autoincrement ID for the table, only used by SQLite3 , not by FTL DNS timestamp integer No Unix timestamp when this query arrived at FTL DNS (used as index) type integer No Type of this query (see Supported query types ) status integer No How was this query handled by FTL DNS ? (see Supported status types ) domain text No Requested domain client text No Requesting client ( IP address) forward text Yes Forward destination used for this query (only set if status == 2 )","title":"Query Table"},{"location":"database/ftl/#counters-table","text":"This table contains counter values integrated over the entire lifetime of the table Label Type Allowed to by empty Content id integer No ID for the table used to select a counter (see below) value integer No Value of a given counter ID Interpretation 0 Total number of queries 1 Total number of blocked queries","title":"Counters table"},{"location":"database/ftl/#ftl-table","text":"The FTL table contains some data used by FTL DNS for determining which queries to save to the database. This table does not contain any entries of general interest. SQLite3 syntax used to create this table:","title":"FTL table"},{"location":"database/ftl/#supported-query-types","text":"ID Query Type 1 A 2 AAAA 3 ANY 4 SRV 5 SOA 6 PTR 7 TXT","title":"Supported query types"},{"location":"database/ftl/#supported-status-types","text":"ID Status Details 0 Unknown \u2754 was not answered by forward destination 1 Blocked \u274c Domain contained in gravity database 2 Allowed \u2705 Forwarded 3 Allowed \u2705 Known, replied to from cache 4 Blocked \u274c Domain matched by a regex blacklist filter 5 Blocked \u274c Domain contained in exact blacklist 6 Blocked \u274c By upstream server (known blocking page IP address) 7 Blocked \u274c By upstream server ( 0.0.0.0 or :: ) 8 Blocked \u274c By upstream server ( NXDOMAIN with RA bit unset) 9 Blocked \u274c Domain contained in gravity database Blocked during deep CNAME inspection 10 Blocked \u274c Domain matched by a regex blacklist filter Blocked during deep CNAME inspection 11 Blocked \u274c Domain contained in exact blacklist Blocked during deep CNAME inspection","title":"Supported status types"},{"location":"database/ftl/#example-for-interaction-with-the-long-term-query-database","text":"In addition to the interactions the Pi-hole database API offers, you can also run your own SQL commands against the database. If you want to obtain the three most queries domains for all time, you could use sqlite3 \"/etc/pihole/pihole-FTL.db\" \"SELECT domain,count(domain) FROM queries WHERE (STATUS == 2 OR STATUS == 3) GROUP BY domain ORDER BY count(domain) DESC LIMIT 3\" which would return something like discourse.pi-hole.net|421095 www.pi-hole.net|132483 posteo.de|130243 showing the domain and the number of times it was found in the long-term database. Note that such a request might take a very long time for computation as the entire history of queries has to be processed for this.","title":"Example for interaction with the long-term query database"},{"location":"database/gravity/","text":"Pi-hole uses the well-known relational database management system SQLite3 for managing the various domains that are used to control the DNS filtering system. The database-based domain management has been added with Pi-hole v5.0. Domain tables ( domainlist ) \u00b6 The database stores white-, and blacklists which are directly relevant for Pi-hole's domain blocking behavior. The domainlist table contains all domains on the white- and blacklists. It has a few extra fields to store data related to a given domain such as the enabled state, the dates when the domain was added and when it was last modified, and an optional comment. The date fields are defined as INTEGER fields as they expect numerical timestamps also known as UNIX time . The date_added and date_modified fields are initialized with the current timestamp converted to UNIX time. The comment field is optional and can be empty. Pi-hole's FTL DNS reads the tables through the various view, omitting any disabled domains. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations type integer No 0 = exact whitelist, 1 = exact blacklist, 2 = regex whitelist, 3 = regex blacklist domain text Yes Domain enabled boolean No Flag whether domain should be used by pihole-FTL ( 0 = disabled, 1 = enabled) date_added integer No Timestamp when domain was added date_modified integer No Timestamp when domain was last modified, automatically updated when a record is changed comment text No Optional field for arbitrary user comments, only field that is allowed to be NULL Adlist Table ( adlist ) \u00b6 The adlist table contains all sources for domains to be collected by pihole -g . Just like the other tables, it has a few extra fields to store metadata related to a given source. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations address text Yes The URL of the list enabled boolean No Flag whether domain should be used by pihole-FTL ( 0 = disabled, 1 = enabled) date_added integer No Timestamp when domain was added date_modified integer No Timestamp when domain was last modified, automatically updated when a record is changed comment text No Optional field for arbitrary user comments Gravity Table ( gravity ) \u00b6 The gravity table consists of the domains that have been processed by Pi-hole's gravity ( pihole -g ) command. The domains in this list are the collection of domains sourced from the configured sources (see the adlist table . During each run of pihole -g , this table is flushed and completely rebuilt from the newly obtained set of domains to be blocked. Label Type Content domain text Blocked domain compiled from adlist referenced by adlist_id adlist_id integer ID associated to adlists in table adlist Uniqueness is enforced on pairs of ( domain , adlist_id ). In other words: domains can be added multiple times, however, only when they are referencing different adlists as their origins. Client table ( client ) \u00b6 Clients are identified by their IP addresses. Each client automatically gets a unique identifier ( id ). Label Type Content id integer Client ID (autoincrementing) ip text IP address of the client ( IPv4 or IPv6 ), Uniqueness is enforced date_added integer Timestamp when a client was added date_modified integer Timestamp when a client was last modified, automatically updated when a record is changed comment text Optional field for arbitrary user comments, the only field that is allowed to be NULL Clients can be identified by subnets. Arbitrary subnet configurations can be specified using the widely known Classless Inter-Domain Routing (CIDR) notation . This allows to specify \"broad clients\" such as 192.168.1.0/24 which will match al clients in the range 192.168.1.1 to 192.168.1.255 (256 devices), 10.8.0.0/16 will match all clients in the range 10.8.0.1 to 10.8.255.255 (65,536 devices), and 192.168.100.0/22 representing the 1024 IPv4 addresses from 192.168.100.0 to 192.168.103.255 . CIDR notation can be used for IPv6 subnets as well. The IPv6 block 2001:db8::/48 represents all IPv6 addresses from 2001:db8:0:0:0:0:0:0 to 2001:db8:0:ffff:ffff:ffff:ffff:ffff (1,208,925,819,614,629,174,706,176 = roughly one heptillion devices). Note that Pi-hole's implementation is more generic than what is written on the linked Wikipedia article as you can use any CIDR block (not only multiples of 4). Audit Table ( domain_audit ) \u00b6 The domain_audit table contains domains that have been audited by the user on the web interface. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations domain text Yes Domain date_added integer No Unix timestamp when domain was added","title":"Overview"},{"location":"database/gravity/#domain-tables-domainlist","text":"The database stores white-, and blacklists which are directly relevant for Pi-hole's domain blocking behavior. The domainlist table contains all domains on the white- and blacklists. It has a few extra fields to store data related to a given domain such as the enabled state, the dates when the domain was added and when it was last modified, and an optional comment. The date fields are defined as INTEGER fields as they expect numerical timestamps also known as UNIX time . The date_added and date_modified fields are initialized with the current timestamp converted to UNIX time. The comment field is optional and can be empty. Pi-hole's FTL DNS reads the tables through the various view, omitting any disabled domains. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations type integer No 0 = exact whitelist, 1 = exact blacklist, 2 = regex whitelist, 3 = regex blacklist domain text Yes Domain enabled boolean No Flag whether domain should be used by pihole-FTL ( 0 = disabled, 1 = enabled) date_added integer No Timestamp when domain was added date_modified integer No Timestamp when domain was last modified, automatically updated when a record is changed comment text No Optional field for arbitrary user comments, only field that is allowed to be NULL","title":"Domain tables (domainlist)"},{"location":"database/gravity/#adlist-table-adlist","text":"The adlist table contains all sources for domains to be collected by pihole -g . Just like the other tables, it has a few extra fields to store metadata related to a given source. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations address text Yes The URL of the list enabled boolean No Flag whether domain should be used by pihole-FTL ( 0 = disabled, 1 = enabled) date_added integer No Timestamp when domain was added date_modified integer No Timestamp when domain was last modified, automatically updated when a record is changed comment text No Optional field for arbitrary user comments","title":"Adlist Table (adlist)"},{"location":"database/gravity/#gravity-table-gravity","text":"The gravity table consists of the domains that have been processed by Pi-hole's gravity ( pihole -g ) command. The domains in this list are the collection of domains sourced from the configured sources (see the adlist table . During each run of pihole -g , this table is flushed and completely rebuilt from the newly obtained set of domains to be blocked. Label Type Content domain text Blocked domain compiled from adlist referenced by adlist_id adlist_id integer ID associated to adlists in table adlist Uniqueness is enforced on pairs of ( domain , adlist_id ). In other words: domains can be added multiple times, however, only when they are referencing different adlists as their origins.","title":"Gravity Table (gravity)"},{"location":"database/gravity/#client-table-client","text":"Clients are identified by their IP addresses. Each client automatically gets a unique identifier ( id ). Label Type Content id integer Client ID (autoincrementing) ip text IP address of the client ( IPv4 or IPv6 ), Uniqueness is enforced date_added integer Timestamp when a client was added date_modified integer Timestamp when a client was last modified, automatically updated when a record is changed comment text Optional field for arbitrary user comments, the only field that is allowed to be NULL Clients can be identified by subnets. Arbitrary subnet configurations can be specified using the widely known Classless Inter-Domain Routing (CIDR) notation . This allows to specify \"broad clients\" such as 192.168.1.0/24 which will match al clients in the range 192.168.1.1 to 192.168.1.255 (256 devices), 10.8.0.0/16 will match all clients in the range 10.8.0.1 to 10.8.255.255 (65,536 devices), and 192.168.100.0/22 representing the 1024 IPv4 addresses from 192.168.100.0 to 192.168.103.255 . CIDR notation can be used for IPv6 subnets as well. The IPv6 block 2001:db8::/48 represents all IPv6 addresses from 2001:db8:0:0:0:0:0:0 to 2001:db8:0:ffff:ffff:ffff:ffff:ffff (1,208,925,819,614,629,174,706,176 = roughly one heptillion devices). Note that Pi-hole's implementation is more generic than what is written on the linked Wikipedia article as you can use any CIDR block (not only multiples of 4).","title":"Client table (client)"},{"location":"database/gravity/#audit-table-domain_audit","text":"The domain_audit table contains domains that have been audited by the user on the web interface. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations domain text Yes Domain date_added integer No Unix timestamp when domain was added","title":"Audit Table (domain_audit)"},{"location":"database/gravity/example/","text":"Per-client blocking example \u00b6 In this example, we describe how to set up a blocking rule for three specific clients. All remaining (and newly added) clients in the network are \"unmanaged\", i.e., they use Pi-hole as usual. The examples shown here are built upon each other, i.e., example 5 might make no sense without the context of example 3. Don't forget to run pihole restartdns reload-lists after your database modifications to have FTL flush its internal domain-blocking cache (separate from the DNS cache). Prerequisites \u00b6 Add three groups. The Default group has a special meaning and cannot be deleted. All domains, clients, and adlists without a specific group assignment are automatically managed through this group. Disabling this group will disable Pi-hole blocking for all unmanaged devices. Raw database instructions INSERT INTO \"group\" ( id , name ) VALUES ( 1 , 'Group 1' ); INSERT INTO \"group\" ( id , name ) VALUES ( 2 , 'Group 2' ); INSERT INTO \"group\" ( id , name ) VALUES ( 3 , 'Group 3' ); Add three clients. Add three clients at your will, their IP addresses might differ from the ones in this example. Raw database instructions INSERT INTO client ( id , ip ) VALUES ( 1 , '192.168.0.101' ); INSERT INTO client ( id , ip ) VALUES ( 2 , '192.168.0.102' ); INSERT INTO client ( id , ip ) VALUES ( 3 , '192.168.0.103' ); Link the clients to the created groups. Raw database instructions INSERT INTO client_by_group ( client_id , group_id ) VALUES ( 1 , 1 ); INSERT INTO client_by_group ( client_id , group_id ) VALUES ( 2 , 2 ); INSERT INTO client_by_group ( client_id , group_id ) VALUES ( 3 , 3 ); Example 1: Exclude from blocking \u00b6 Task: Exclude client 1 from Pi-hole's blocking by removing client 1 from the Default group. Raw database instructions DELETE FROM client_by_group WHERE client_id = 1 AND group_id = 0 ; Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net No 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes All three clients got automatically assigned to the default ( Default ) group when they were added. The default group includes all adlists and list domains (if not already changed by the user). When we remove the default group for client 192.168.0.101 , we effectively remove all associations to any adlists and domains. This leaves this client completely unblocked. Example 2: Blocklist management \u00b6 Task: Assign adlist with ID 1 to group 1 (in addition to the default assignment to group 0). This results in client 192.168.0.101 using only this adlist (we removed the default association in the last step). Raw database instructions INSERT INTO adlist_by_group ( adlist_id , group_id ) VALUES ( 1 , 1 ); Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net Yes 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes 192.168.0.101 gets doubleclick.net blocked as it uses an adlist including this domain. All other clients stay unchanged. Example 3: Blacklisting \u00b6 Task: Add a single domain that should be blacklisted only for group 1 (client 192.168.0.101 ). Step 1 \u00b6 Add the domain to be blocked Raw database instructions INSERT INTO domainlist ( type , domain , comment ) VALUES ( 1 , 'blacklisted.com' , 'Blacklisted for members of group 1' ); Result Client Group membership Domain Blocked all other Default blacklisted.com Yes 192.168.0.101 Group 1 blacklisted.com No 192.168.0.102 Group 2 + Default blacklisted.com Yes 192.168.0.103 Group 3 + Default blacklisted.com Yes Note that Pi-hole is not blocking this domain for client 192.168.0.101 as we removed the default assignment through group 0 above. All remaining clients are linked through the Default group to this domain and see it as being blocked. Step 2 \u00b6 Assign this domain to group 1 Raw database instructions INSERT INTO domainlist_by_group ( domainlist_id , group_id ) VALUES ( 1 , 1 ); (the domainlist_id might be different for you, check with SELECT last_insert_rowid(); after step 1) Result Client Group membership Domain Blocked all other Default blacklisted.com Yes 192.168.0.101 Group 1 blacklisted.com Yes 192.168.0.102 Group 2 + Default blacklisted.com Yes 192.168.0.103 Group 3 + Default blacklisted.com Yes All clients see this domain as being blocked: Client 1 due to a direct assignment through group 1, all remaining clients through the default group 0 (unchanged). Step 3 \u00b6 Remove default assignment to all clients not belonging to a group Raw database instructions DELETE FROM domainlist_by_group WHERE domainlist_id = 1 AND group_id = 0 ; (the domainlist_id might be different for you, see above) Result Client Group membership Domain Blocked all other Default blacklisted.com No 192.168.0.101 Group 1 blacklisted.com Yes 192.168.0.102 Group 2 + Default blacklisted.com No 192.168.0.103 Group 3 + Default blacklisted.com No While client 1 keeps its explicit assignment through group 1, the remaining clients lost their unassignments when we removed group 0 from the assignment. Example 4: Whitelisting \u00b6 Task: Add a single domain that should be whitelisted only for group 2 (client 192.168.0.102 ). Step 1 \u00b6 Add the domain to be whitelisted Raw database instructions INSERT INTO domainlist ( type , domain , comment ) VALUES ( 0 , 'doubleclick.net' , 'Whitelisted for members of group 2' ); Result Client Group membership Domain Blocked all other Default doubleclick.net No 192.168.0.101 Group 1 doubleclick.net Yes 192.168.0.102 Group 2 + Default doubleclick.net No 192.168.0.103 Group 3 + Default doubleclick.net No Client 192.168.0.101 is not whitelisting this domain as we removed the default assignment through group 0 above. All remaining clients are linked through the default group to this domain and see it as being whitelisted. Note that this is completely analog to step 1 of example 3 . Step 2 \u00b6 Remove default group assignment Raw database instructions DELETE FROM domainlist_by_group WHERE domainlist_id = 2 AND group_id = 0 ; Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net Yes 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes Requests from all clients are blocked as the new whitelist entry is not associated with any group and, hence, is not used by any client. Step 3 \u00b6 Assign this domain to group 2 Raw database instructions INSERT INTO domainlist_by_group ( domainlist_id , group_id ) VALUES ( 2 , 2 ); (the domainlist_id might be different for you, check with SELECT last_insert_rowid(); after step 1) Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net No 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes Client 2 got the whitelist entry explicitly assigned to. Accordingly, client 2 does not get the domain blocked whereas all remaining clients still see this domain as blocked.","title":"Examples"},{"location":"database/gravity/example/#per-client-blocking-example","text":"In this example, we describe how to set up a blocking rule for three specific clients. All remaining (and newly added) clients in the network are \"unmanaged\", i.e., they use Pi-hole as usual. The examples shown here are built upon each other, i.e., example 5 might make no sense without the context of example 3. Don't forget to run pihole restartdns reload-lists after your database modifications to have FTL flush its internal domain-blocking cache (separate from the DNS cache).","title":"Per-client blocking example"},{"location":"database/gravity/example/#prerequisites","text":"Add three groups. The Default group has a special meaning and cannot be deleted. All domains, clients, and adlists without a specific group assignment are automatically managed through this group. Disabling this group will disable Pi-hole blocking for all unmanaged devices. Raw database instructions INSERT INTO \"group\" ( id , name ) VALUES ( 1 , 'Group 1' ); INSERT INTO \"group\" ( id , name ) VALUES ( 2 , 'Group 2' ); INSERT INTO \"group\" ( id , name ) VALUES ( 3 , 'Group 3' ); Add three clients. Add three clients at your will, their IP addresses might differ from the ones in this example. Raw database instructions INSERT INTO client ( id , ip ) VALUES ( 1 , '192.168.0.101' ); INSERT INTO client ( id , ip ) VALUES ( 2 , '192.168.0.102' ); INSERT INTO client ( id , ip ) VALUES ( 3 , '192.168.0.103' ); Link the clients to the created groups. Raw database instructions INSERT INTO client_by_group ( client_id , group_id ) VALUES ( 1 , 1 ); INSERT INTO client_by_group ( client_id , group_id ) VALUES ( 2 , 2 ); INSERT INTO client_by_group ( client_id , group_id ) VALUES ( 3 , 3 );","title":"Prerequisites"},{"location":"database/gravity/example/#example-1-exclude-from-blocking","text":"Task: Exclude client 1 from Pi-hole's blocking by removing client 1 from the Default group. Raw database instructions DELETE FROM client_by_group WHERE client_id = 1 AND group_id = 0 ; Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net No 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes All three clients got automatically assigned to the default ( Default ) group when they were added. The default group includes all adlists and list domains (if not already changed by the user). When we remove the default group for client 192.168.0.101 , we effectively remove all associations to any adlists and domains. This leaves this client completely unblocked.","title":"Example 1: Exclude from blocking"},{"location":"database/gravity/example/#example-2-blocklist-management","text":"Task: Assign adlist with ID 1 to group 1 (in addition to the default assignment to group 0). This results in client 192.168.0.101 using only this adlist (we removed the default association in the last step). Raw database instructions INSERT INTO adlist_by_group ( adlist_id , group_id ) VALUES ( 1 , 1 ); Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net Yes 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes 192.168.0.101 gets doubleclick.net blocked as it uses an adlist including this domain. All other clients stay unchanged.","title":"Example 2: Blocklist management"},{"location":"database/gravity/example/#example-3-blacklisting","text":"Task: Add a single domain that should be blacklisted only for group 1 (client 192.168.0.101 ).","title":"Example 3: Blacklisting"},{"location":"database/gravity/example/#step-1","text":"Add the domain to be blocked Raw database instructions INSERT INTO domainlist ( type , domain , comment ) VALUES ( 1 , 'blacklisted.com' , 'Blacklisted for members of group 1' ); Result Client Group membership Domain Blocked all other Default blacklisted.com Yes 192.168.0.101 Group 1 blacklisted.com No 192.168.0.102 Group 2 + Default blacklisted.com Yes 192.168.0.103 Group 3 + Default blacklisted.com Yes Note that Pi-hole is not blocking this domain for client 192.168.0.101 as we removed the default assignment through group 0 above. All remaining clients are linked through the Default group to this domain and see it as being blocked.","title":"Step 1"},{"location":"database/gravity/example/#step-2","text":"Assign this domain to group 1 Raw database instructions INSERT INTO domainlist_by_group ( domainlist_id , group_id ) VALUES ( 1 , 1 ); (the domainlist_id might be different for you, check with SELECT last_insert_rowid(); after step 1) Result Client Group membership Domain Blocked all other Default blacklisted.com Yes 192.168.0.101 Group 1 blacklisted.com Yes 192.168.0.102 Group 2 + Default blacklisted.com Yes 192.168.0.103 Group 3 + Default blacklisted.com Yes All clients see this domain as being blocked: Client 1 due to a direct assignment through group 1, all remaining clients through the default group 0 (unchanged).","title":"Step 2"},{"location":"database/gravity/example/#step-3","text":"Remove default assignment to all clients not belonging to a group Raw database instructions DELETE FROM domainlist_by_group WHERE domainlist_id = 1 AND group_id = 0 ; (the domainlist_id might be different for you, see above) Result Client Group membership Domain Blocked all other Default blacklisted.com No 192.168.0.101 Group 1 blacklisted.com Yes 192.168.0.102 Group 2 + Default blacklisted.com No 192.168.0.103 Group 3 + Default blacklisted.com No While client 1 keeps its explicit assignment through group 1, the remaining clients lost their unassignments when we removed group 0 from the assignment.","title":"Step 3"},{"location":"database/gravity/example/#example-4-whitelisting","text":"Task: Add a single domain that should be whitelisted only for group 2 (client 192.168.0.102 ).","title":"Example 4: Whitelisting"},{"location":"database/gravity/example/#step-1_1","text":"Add the domain to be whitelisted Raw database instructions INSERT INTO domainlist ( type , domain , comment ) VALUES ( 0 , 'doubleclick.net' , 'Whitelisted for members of group 2' ); Result Client Group membership Domain Blocked all other Default doubleclick.net No 192.168.0.101 Group 1 doubleclick.net Yes 192.168.0.102 Group 2 + Default doubleclick.net No 192.168.0.103 Group 3 + Default doubleclick.net No Client 192.168.0.101 is not whitelisting this domain as we removed the default assignment through group 0 above. All remaining clients are linked through the default group to this domain and see it as being whitelisted. Note that this is completely analog to step 1 of example 3 .","title":"Step 1"},{"location":"database/gravity/example/#step-2_1","text":"Remove default group assignment Raw database instructions DELETE FROM domainlist_by_group WHERE domainlist_id = 2 AND group_id = 0 ; Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net Yes 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes Requests from all clients are blocked as the new whitelist entry is not associated with any group and, hence, is not used by any client.","title":"Step 2"},{"location":"database/gravity/example/#step-3_1","text":"Assign this domain to group 2 Raw database instructions INSERT INTO domainlist_by_group ( domainlist_id , group_id ) VALUES ( 2 , 2 ); (the domainlist_id might be different for you, check with SELECT last_insert_rowid(); after step 1) Result Client Group membership Domain Blocked all other Default doubleclick.net Yes 192.168.0.101 Group 1 doubleclick.net No 192.168.0.102 Group 2 + Default doubleclick.net Yes 192.168.0.103 Group 3 + Default doubleclick.net Yes Client 2 got the whitelist entry explicitly assigned to. Accordingly, client 2 does not get the domain blocked whereas all remaining clients still see this domain as blocked.","title":"Step 3"},{"location":"database/gravity/groups/","text":"Group management \u00b6 Any blocklist or domain on the white-/black-/regex-lists can be managed through groups. This allows not only grouping them to highlight their relationship, but also enabling/disabling them together if one, for instance, wants to visit a specific service only temporarily. Groups are defined in the group table and can have an optional description in addition to the mandatory name of the group. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations enabled boolean No Flag whether domains in this group should be used ( 0 = disabled, 1 = enabled) name text No Mandatory group name comment text No Optional field for arbitrary user comments Group management is implemented using so-called linking tables. Hence, it is possible to associate domains (and clients!) with any number of groups, manage adlists together with groups, use the same groups for black- and whitelisted domains at the same time. The linking tables are particularly simple, as they only link group id s with list id s. As an example, we describe the domainlist_by_group table. The adlist and client linking tables are constructed similarly. Label Type Content domainlist_id integer id of domain in the domainlist table group_id integer id of associated group in the group table Group Default ( group_id 0 ) is special as it is automatically assigned to domains and clients not being a member of other groups. Each newly added client or domain gets assigned to group zero when being added. Effect of group management \u00b6 The great flexibility to manage domains in no, one, or multiple groups may result in unexpected behavior when, e.g., the domains are enabled in some but disabled in other groups. For the sake of convenience, we describe the possible configurations and whether FTL DNS uses these domains (\u2714) or not (\u2718) in such cases. Domain disabled: \u2718 Note that the domain is never imported by FTL DNS, even if it is contained in an enabled group. Domain enabled: It depends... Not managed by a group: \u2714 Contained in one or more groups (at least one enabled): \u2714 Contained in one or more groups (all disabled): \u2718","title":"Group management"},{"location":"database/gravity/groups/#group-management","text":"Any blocklist or domain on the white-/black-/regex-lists can be managed through groups. This allows not only grouping them to highlight their relationship, but also enabling/disabling them together if one, for instance, wants to visit a specific service only temporarily. Groups are defined in the group table and can have an optional description in addition to the mandatory name of the group. Label Type Uniqueness enforced Content id integer Yes Unique ID for database operations enabled boolean No Flag whether domains in this group should be used ( 0 = disabled, 1 = enabled) name text No Mandatory group name comment text No Optional field for arbitrary user comments Group management is implemented using so-called linking tables. Hence, it is possible to associate domains (and clients!) with any number of groups, manage adlists together with groups, use the same groups for black- and whitelisted domains at the same time. The linking tables are particularly simple, as they only link group id s with list id s. As an example, we describe the domainlist_by_group table. The adlist and client linking tables are constructed similarly. Label Type Content domainlist_id integer id of domain in the domainlist table group_id integer id of associated group in the group table Group Default ( group_id 0 ) is special as it is automatically assigned to domains and clients not being a member of other groups. Each newly added client or domain gets assigned to group zero when being added.","title":"Group management"},{"location":"database/gravity/groups/#effect-of-group-management","text":"The great flexibility to manage domains in no, one, or multiple groups may result in unexpected behavior when, e.g., the domains are enabled in some but disabled in other groups. For the sake of convenience, we describe the possible configurations and whether FTL DNS uses these domains (\u2714) or not (\u2718) in such cases. Domain disabled: \u2718 Note that the domain is never imported by FTL DNS, even if it is contained in an enabled group. Domain enabled: It depends... Not managed by a group: \u2714 Contained in one or more groups (at least one enabled): \u2714 Contained in one or more groups (all disabled): \u2718","title":"Effect of group management"},{"location":"docker/DHCP/","text":"Docker DHCP and Network Modes \u00b6 Docker runs in a separate network by default called a docker bridge network, which makes DHCP want to serve addresses to that network and not your LAN network where you probably want it. This document details why Docker Pi-hole DHCP is different from normal Pi-hole and how to fix the problem. Technical details \u00b6 Docker's bridge network mode is default and recommended as a more secure setting for containers because docker is all about isolation, they isolate processes by default and the bridge network isolates the networking by default too. You gain access to the isolated container's service ports by using port forwards in your container's runtime config; for example -p 67:67 is DHCP. However, DHCP protocol operates through a network 'broadcast' which cannot span multiple networks (docker's bridge, and your LAN network). In order to get DHCP on to your network there are a few approaches: Working network modes \u00b6 Here are details on setting up DHCP for Docker Pi-hole for various network modes available in docker. Docker Pi-hole with host networking mode \u00b6 Advantages : Simple, easy, and fast setup Possibly the simplest way to get DHCP working with Docker Pi-hole is to use host networking which makes the container be on your LAN Network like a regular Raspberry Pi-hole would be, allowing it to broadcast DHCP. It will have the same IP as your Docker host server in this mode so you may still have to deal with port conflicts. Inside your docker-compose.yml remove all ports and replace them with: network_mode: host docker run --net=host if you don't use docker-compose Docker Pi-hole with a Macvlan network \u00b6 Advantages : Works well with NAS devices or hard port conflicts A Macvlan network is the most advanced option since it requires more network knowledge and setup. This mode is similar to host network mode but instead of borrowing the IP of your docker host computer it grabs a new IP address off your LAN network. Having the container get its own IP not only solves the broadcast problem but avoids port conflicts you might have on devices such as NAS devices with web interfaces. Tony Lawrence detailed macvlan setup for Pi-hole first in the second part of his great blog series about Running Pi-hole on Synology Docker , check it out here: Free your Synology ports with Macvlan Docker Pi-hole with a bridge networking \u00b6 Advantages : Works well with container web reverse proxies like Nginx or Traefik If you want to use docker's bridged network mode then you need to run a DHCP relay. A relay points to your containers forwarded port 67 and spreads the broadcast signal from an isolated docker bridge onto your LAN network. Relays are very simple software, you just have to configure it to point to your Docker host's IP port 67. Although uncommon, if your router is an advanced enough router it may support a DHCP relay. Try googling for your router manufacturer + DHCP relay or looking in your router's configuration around the DHCP settings or advanced areas. If your router doesn't support it, you can run a software/container based DHCP relay on your LAN instead. The author of dnsmasq made a very tiny simple one called DHCP-helper . DerFetzer kindly shared his great setup of a DHCP-helper container on the Pi-hole Discourse forums. Warning about the Default bridge network \u00b6 The out of the box default bridge network has some limitations that a user created bridge network won't have. These limitations make it painful to use especially when connecting multiple containers together. Avoid using the built-in default docker bridge network, the simplest way to do this is just use a docker-compose setup since it creates its own network automatically. If compose isn't an option the bridge network docs should help you create your own.","title":"DHCP"},{"location":"docker/DHCP/#docker-dhcp-and-network-modes","text":"Docker runs in a separate network by default called a docker bridge network, which makes DHCP want to serve addresses to that network and not your LAN network where you probably want it. This document details why Docker Pi-hole DHCP is different from normal Pi-hole and how to fix the problem.","title":"Docker DHCP and Network Modes"},{"location":"docker/DHCP/#technical-details","text":"Docker's bridge network mode is default and recommended as a more secure setting for containers because docker is all about isolation, they isolate processes by default and the bridge network isolates the networking by default too. You gain access to the isolated container's service ports by using port forwards in your container's runtime config; for example -p 67:67 is DHCP. However, DHCP protocol operates through a network 'broadcast' which cannot span multiple networks (docker's bridge, and your LAN network). In order to get DHCP on to your network there are a few approaches:","title":"Technical details"},{"location":"docker/DHCP/#working-network-modes","text":"Here are details on setting up DHCP for Docker Pi-hole for various network modes available in docker.","title":"Working network modes"},{"location":"docker/DHCP/#docker-pi-hole-with-host-networking-mode","text":"Advantages : Simple, easy, and fast setup Possibly the simplest way to get DHCP working with Docker Pi-hole is to use host networking which makes the container be on your LAN Network like a regular Raspberry Pi-hole would be, allowing it to broadcast DHCP. It will have the same IP as your Docker host server in this mode so you may still have to deal with port conflicts. Inside your docker-compose.yml remove all ports and replace them with: network_mode: host docker run --net=host if you don't use docker-compose","title":"Docker Pi-hole with host networking mode"},{"location":"docker/DHCP/#docker-pi-hole-with-a-macvlan-network","text":"Advantages : Works well with NAS devices or hard port conflicts A Macvlan network is the most advanced option since it requires more network knowledge and setup. This mode is similar to host network mode but instead of borrowing the IP of your docker host computer it grabs a new IP address off your LAN network. Having the container get its own IP not only solves the broadcast problem but avoids port conflicts you might have on devices such as NAS devices with web interfaces. Tony Lawrence detailed macvlan setup for Pi-hole first in the second part of his great blog series about Running Pi-hole on Synology Docker , check it out here: Free your Synology ports with Macvlan","title":"Docker Pi-hole with a Macvlan network"},{"location":"docker/DHCP/#docker-pi-hole-with-a-bridge-networking","text":"Advantages : Works well with container web reverse proxies like Nginx or Traefik If you want to use docker's bridged network mode then you need to run a DHCP relay. A relay points to your containers forwarded port 67 and spreads the broadcast signal from an isolated docker bridge onto your LAN network. Relays are very simple software, you just have to configure it to point to your Docker host's IP port 67. Although uncommon, if your router is an advanced enough router it may support a DHCP relay. Try googling for your router manufacturer + DHCP relay or looking in your router's configuration around the DHCP settings or advanced areas. If your router doesn't support it, you can run a software/container based DHCP relay on your LAN instead. The author of dnsmasq made a very tiny simple one called DHCP-helper . DerFetzer kindly shared his great setup of a DHCP-helper container on the Pi-hole Discourse forums.","title":"Docker Pi-hole with a bridge networking"},{"location":"docker/DHCP/#warning-about-the-default-bridge-network","text":"The out of the box default bridge network has some limitations that a user created bridge network won't have. These limitations make it painful to use especially when connecting multiple containers together. Avoid using the built-in default docker bridge network, the simplest way to do this is just use a docker-compose setup since it creates its own network automatically. If compose isn't an option the bridge network docs should help you create your own.","title":"Warning about the Default bridge network"},{"location":"ftldns/","text":"powered by Pi-hole\u00ae FTL DNS \u2122 ( pihole-FTL ) offers DNS services within the Pi-hole \u00ae project. It provides blazing fast DNS and DHCP services. It can also provide TFTP and more as the resolver part based on the popular dnsmasq . Furthermore, FTL offers an interactive API where extensive network analysis data and statistics may be queried.","title":"Overview"},{"location":"ftldns/blockingmode/","text":"Pi-hole FTL DNS supports two different methods for blocking queries. Both have their advantages and drawbacks. They are summarized on this page. The blocking mode can be configured in /etc/pihole/pihole-FTL.conf . This setting can be updated by sending SIGHUP to pihole-FTL ( sudo killall -SIGHUP pihole-FTL ). Pi-hole's unspecified IP blocking (default) \u00b6 /etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=NULL Blocked queries will be answered with the unspecified address ;; QUESTION SECTION: ;doubleclick.net. IN ANY ;; ANSWER SECTION: doubleclick.net. 2 IN A 0.0.0.0 doubleclick.net. 2 IN AAAA :: This blocking mode is the Pi-hole developers' recommendation. Following RFC 3513, Internet Protocol Version 6 ( IPv6 ) Addressing Architecture, section 2.5.2 , the address 0:0:0:0:0:0:0:0 (or :: for short) is the unspecified address. It must never be assigned to any node and indicates the absence of an address. Following RFC1122, section 3.2 , the address 0.0.0.0 can be understood as the IPv4 equivalent of :: . Advantages \u00b6 The client does not even try to establish a connection for the requested website Speedup and less traffic Solves potential HTTPS timeouts as requests are never performed No need to run a web server on your Pi-hole (reduces complexity when running other web services on the same machine) Disadvantage \u00b6 Blocking page cannot be shown and whitelisting has to be performed from the dashboard or CLI Pi-hole's IP ( IPv6 NODATA) blocking \u00b6 /etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=IP-NODATA-AAAA Blocked queries will be answered with the local IPv4 addresses of your Pi-hole (as configured in your setupVars.conf file). Blocked AAAA queries will be answered with NODATA-IPV6 and clients will only try to reach your Pi-hole over its static IPv4 address ;; QUESTION SECTION: ;doubleclick.net. IN ANY ;; ANSWER SECTION: doubleclick.net. 2 IN A 192.168.2.11 Advantage \u00b6 Shows a blocking page from which blocked domains can be whitelisted Serves IPv4 -only replies and hence mitigates issues with rotating IPv6 prefixes Disadvantages \u00b6 Requires a web server to run on your Pi-hole May cause time-outs for HTTPS content even with properly configured firewall rules Pi-hole's full IP blocking \u00b6 /etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=IP Blocked queries will be answered with the local IP addresses of your Pi-hole (as configured in your setupVars.conf file) ;; QUESTION SECTION: ;doubleclick.net. IN ANY ;; ANSWER SECTION: doubleclick.net. 2 IN A 192.168.2.11 doubleclick.net. 2 IN AAAA fda2:2001:4756:0:ab27:beff:ef37:4242 Advantage \u00b6 Shows a blocking page from which blocked domains can be whitelisted Disadvantages \u00b6 Requires a web server to run on your Pi-hole May cause time-outs for HTTPS content even with properly configured firewall rules May cause problems with alternating prefixes on IPv6 addresses (see IP-AAAA-NODATA ) Pi-hole's NXDOMAIN blocking \u00b6 /etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=NXDOMAIN Blocked queries will be answered with an empty response (no answer section) and status NXDOMAIN ( no such domain ) ;; QUESTION SECTION: ;doubleclick.net. IN ANY Advantages & Disadvantages \u00b6 Similar to NULL blocking, but experiments suggest that clients may try to resolve blocked domains more often compared to NULL blocking. Pi-hole's NODATA blocking \u00b6 /etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=NODATA Blocked queries will be answered with an empty response (no answer section) and status NODATA (domain exists but there is no record for the requested query type) ;; QUESTION SECTION: ;doubleclick.net. IN ANY Advantages & Disadvantages \u00b6 Similar to NXDOMAIN blocking. Clients might have a better acceptance of NODATA replies compared to NXDOMAIN replies.","title":"Blocking mode"},{"location":"ftldns/blockingmode/#pi-holes-unspecified-ip-blocking-default","text":"/etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=NULL Blocked queries will be answered with the unspecified address ;; QUESTION SECTION: ;doubleclick.net. IN ANY ;; ANSWER SECTION: doubleclick.net. 2 IN A 0.0.0.0 doubleclick.net. 2 IN AAAA :: This blocking mode is the Pi-hole developers' recommendation. Following RFC 3513, Internet Protocol Version 6 ( IPv6 ) Addressing Architecture, section 2.5.2 , the address 0:0:0:0:0:0:0:0 (or :: for short) is the unspecified address. It must never be assigned to any node and indicates the absence of an address. Following RFC1122, section 3.2 , the address 0.0.0.0 can be understood as the IPv4 equivalent of :: .","title":"Pi-hole's unspecified IP blocking (default)"},{"location":"ftldns/blockingmode/#advantages","text":"The client does not even try to establish a connection for the requested website Speedup and less traffic Solves potential HTTPS timeouts as requests are never performed No need to run a web server on your Pi-hole (reduces complexity when running other web services on the same machine)","title":"Advantages"},{"location":"ftldns/blockingmode/#disadvantage","text":"Blocking page cannot be shown and whitelisting has to be performed from the dashboard or CLI","title":"Disadvantage"},{"location":"ftldns/blockingmode/#pi-holes-ip-ipv6-nodata-blocking","text":"/etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=IP-NODATA-AAAA Blocked queries will be answered with the local IPv4 addresses of your Pi-hole (as configured in your setupVars.conf file). Blocked AAAA queries will be answered with NODATA-IPV6 and clients will only try to reach your Pi-hole over its static IPv4 address ;; QUESTION SECTION: ;doubleclick.net. IN ANY ;; ANSWER SECTION: doubleclick.net. 2 IN A 192.168.2.11","title":"Pi-hole's IP (IPv6 NODATA) blocking"},{"location":"ftldns/blockingmode/#advantage","text":"Shows a blocking page from which blocked domains can be whitelisted Serves IPv4 -only replies and hence mitigates issues with rotating IPv6 prefixes","title":"Advantage"},{"location":"ftldns/blockingmode/#disadvantages","text":"Requires a web server to run on your Pi-hole May cause time-outs for HTTPS content even with properly configured firewall rules","title":"Disadvantages"},{"location":"ftldns/blockingmode/#pi-holes-full-ip-blocking","text":"/etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=IP Blocked queries will be answered with the local IP addresses of your Pi-hole (as configured in your setupVars.conf file) ;; QUESTION SECTION: ;doubleclick.net. IN ANY ;; ANSWER SECTION: doubleclick.net. 2 IN A 192.168.2.11 doubleclick.net. 2 IN AAAA fda2:2001:4756:0:ab27:beff:ef37:4242","title":"Pi-hole's full IP blocking"},{"location":"ftldns/blockingmode/#advantage_1","text":"Shows a blocking page from which blocked domains can be whitelisted","title":"Advantage"},{"location":"ftldns/blockingmode/#disadvantages_1","text":"Requires a web server to run on your Pi-hole May cause time-outs for HTTPS content even with properly configured firewall rules May cause problems with alternating prefixes on IPv6 addresses (see IP-AAAA-NODATA )","title":"Disadvantages"},{"location":"ftldns/blockingmode/#pi-holes-nxdomain-blocking","text":"/etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=NXDOMAIN Blocked queries will be answered with an empty response (no answer section) and status NXDOMAIN ( no such domain ) ;; QUESTION SECTION: ;doubleclick.net. IN ANY","title":"Pi-hole's NXDOMAIN blocking"},{"location":"ftldns/blockingmode/#advantages-disadvantages","text":"Similar to NULL blocking, but experiments suggest that clients may try to resolve blocked domains more often compared to NULL blocking.","title":"Advantages &amp; Disadvantages"},{"location":"ftldns/blockingmode/#pi-holes-nodata-blocking","text":"/etc/pihole/pihole-FTL.conf setting: BLOCKINGMODE=NODATA Blocked queries will be answered with an empty response (no answer section) and status NODATA (domain exists but there is no record for the requested query type) ;; QUESTION SECTION: ;doubleclick.net. IN ANY","title":"Pi-hole's NODATA blocking"},{"location":"ftldns/blockingmode/#advantages-disadvantages_1","text":"Similar to NXDOMAIN blocking. Clients might have a better acceptance of NODATA replies compared to NXDOMAIN replies.","title":"Advantages &amp; Disadvantages"},{"location":"ftldns/compatibility/","text":"FTL DNS compatibility list \u00b6 We tested FTL DNS on the following devices: Board Tested OS CPU architecture Suitable binaries VirtualBox Ubuntu 16.10 amd64 linux-x86_64 Raspberry Pi Zero Raspbian Jessie, Stretch armv6l arm-linux-gnueabi Raspberry Pi 1 Raspbian Jessie, Stretch armv6 arm-linux-gnueabi Raspberry Pi 2 Raspbian Jessie, Stretch armv7l arm-linux-gnueabi and arm-linux-gnueabihf Raspberry Pi 3 Raspbian Jessie, Stretch armv7l arm-linux-gnueabi and arm-linux-gnueabihf Raspberry Pi 3 B+ Raspbian Jessie, Stretch armv7l arm-linux-gnueabi and arm-linux-gnueabihf Raspberry Pi 3 openSUSE aarch64 aarch64-linux-gnu NanoPi NEO armbian Ubuntu 16.04 armv7l arm-linux-gnueabihf Odroid-C2 Ubuntu 16.04 aarch64 aarch64-linux-gnu C.H.I.P Debian armv7l arm-linux-gnueabihf OrangePi Zero armbian Ubuntu 16.04 armv7l arm-linux-gnueabihf BeagleBone Black Debian Jessie, Stretch armv7l arm-linux-gnueabihf Devices we do not officially support include MIPS and armv5 (or lower) devices. You may, however, be successful with building binaries yourself from the source code, but we do not provide pre-built binaries for these targets.","title":"Compatibility"},{"location":"ftldns/compatibility/#ftldns-compatibility-list","text":"We tested FTL DNS on the following devices: Board Tested OS CPU architecture Suitable binaries VirtualBox Ubuntu 16.10 amd64 linux-x86_64 Raspberry Pi Zero Raspbian Jessie, Stretch armv6l arm-linux-gnueabi Raspberry Pi 1 Raspbian Jessie, Stretch armv6 arm-linux-gnueabi Raspberry Pi 2 Raspbian Jessie, Stretch armv7l arm-linux-gnueabi and arm-linux-gnueabihf Raspberry Pi 3 Raspbian Jessie, Stretch armv7l arm-linux-gnueabi and arm-linux-gnueabihf Raspberry Pi 3 B+ Raspbian Jessie, Stretch armv7l arm-linux-gnueabi and arm-linux-gnueabihf Raspberry Pi 3 openSUSE aarch64 aarch64-linux-gnu NanoPi NEO armbian Ubuntu 16.04 armv7l arm-linux-gnueabihf Odroid-C2 Ubuntu 16.04 aarch64 aarch64-linux-gnu C.H.I.P Debian armv7l arm-linux-gnueabihf OrangePi Zero armbian Ubuntu 16.04 armv7l arm-linux-gnueabihf BeagleBone Black Debian Jessie, Stretch armv7l arm-linux-gnueabihf Devices we do not officially support include MIPS and armv5 (or lower) devices. You may, however, be successful with building binaries yourself from the source code, but we do not provide pre-built binaries for these targets.","title":"FTLDNS compatibility list"},{"location":"ftldns/compile/","text":"We pre-compile FTL DNS for you to save you the trouble of compiling anything yourself. However, sometimes you may want to make your own modifications. To test them, you have to compile FTL DNS from source. Luckily, you don't have to be a programmer to build FTL DNS from source and install it on your system; you only have to know the basics we provide in here. With just a few commands, you can build FTL DNS from source like a pro. Installing the Required Software \u00b6 First, we'll install the basic software you'll need to compile from source, like the GCC compiler and other utilities. Install them by running the following command in a terminal: Debian / Ubuntu / Raspbian \u00b6 sudo apt install build-essential libgmp-dev m4 Fedora \u00b6 sudo dnf install gcc gmp-devel gmp-static m4 You'll also need to compile nettle as FTL DNS uses libnettle for handling DNSSEC. Compile and install a recent version of nettle (we tested and recommend 3.6): wget https://ftp.gnu.org/gnu/nettle/nettle-3.6.tar.gz tar -xvzf nettle-3.6.tar.gz cd nettle-3.6 ./configure make sudo make install Get the FTL DNS source \u00b6 Now, clone the FTL DNS repo (or your own fork) to get the source code of FTL DNS : git clone https://github.com/pi-hole/FTL.git cd FTL If you want to build another branch and not master , use checkout to get to this branch (e.g. git checkout development ). FTL DNS can now be compiled and installed: make -j $( nproc ) sudo make install Finally, restart FTL DNS to use the new binary: sudo service pihole-FTL restart","title":"Install from source"},{"location":"ftldns/compile/#installing-the-required-software","text":"First, we'll install the basic software you'll need to compile from source, like the GCC compiler and other utilities. Install them by running the following command in a terminal:","title":"Installing the Required Software"},{"location":"ftldns/compile/#debian-ubuntu-raspbian","text":"sudo apt install build-essential libgmp-dev m4","title":"Debian / Ubuntu / Raspbian"},{"location":"ftldns/compile/#fedora","text":"sudo dnf install gcc gmp-devel gmp-static m4 You'll also need to compile nettle as FTL DNS uses libnettle for handling DNSSEC. Compile and install a recent version of nettle (we tested and recommend 3.6): wget https://ftp.gnu.org/gnu/nettle/nettle-3.6.tar.gz tar -xvzf nettle-3.6.tar.gz cd nettle-3.6 ./configure make sudo make install","title":"Fedora"},{"location":"ftldns/compile/#get-the-ftldns-source","text":"Now, clone the FTL DNS repo (or your own fork) to get the source code of FTL DNS : git clone https://github.com/pi-hole/FTL.git cd FTL If you want to build another branch and not master , use checkout to get to this branch (e.g. git checkout development ). FTL DNS can now be compiled and installed: make -j $( nproc ) sudo make install Finally, restart FTL DNS to use the new binary: sudo service pihole-FTL restart","title":"Get the FTLDNS source"},{"location":"ftldns/configfile/","text":"You can create a file /etc/pihole/pihole-FTL.conf that will be read by FTL DNS on startup. Possible settings ( the option shown first is the default ): DNS settings \u00b6 BLOCKINGMODE=NULL|IP-NODATA-AAAA|IP|NXDOMAIN \u00b6 How should FTL reply to blocked queries? More details CNAME_DEEP_INSPECT=true|false \u00b6 Use this option to disable deep CNAME inspection. This might be beneficial for very low-end devices Statistics settings \u00b6 MAXLOGAGE=24.0 \u00b6 Up to how many hours of queries should be imported from the database and logs? Maximum is 24.0 PRIVACYLEVEL=0|1|2|3 \u00b6 Which privacy level is used? More details IGNORE_LOCALHOST=no|yes \u00b6 Should FTL ignore queries coming from the local machine? AAAA_QUERY_ANALYSIS=yes|no \u00b6 Allow FTL to analyze AAAA queries from pihole.log? ANALYZE_ONLY_A_AND_AAAA=false|true \u00b6 Should FTL only analyze A and AAAA queries? Other settings \u00b6 SOCKET_LISTENING=localonly|all \u00b6 Listen only for local socket connections or permit all connections FTLPORT=4711 \u00b6 On which port should FTL be listening? RESOLVE_IPV6=yes|no \u00b6 Should FTL try to resolve IPv6 addresses to hostnames? RESOLVE_IPV4=yes|no \u00b6 Should FTL try to resolve IPv4 addresses to hostnames? DELAY_STARTUP=0 \u00b6 In certain configurations, you may want FTL to wait a given amount of time before trying to start the DNS revolver. This is typically found when network interfaces appear only late during system startup and the interface startup priorities are configured incorrectly. This setting takes any integer value between 0 and 300 seconds Long-term database settings \u00b6 Further details concerning the database DBIMPORT=yes|no \u00b6 Should FTL load information from the database on startup to be aware of the most recent history? MAXDBDAYS=365 \u00b6 How long should queries be stored in the database? Setting this to 0 disables the database DBINTERVAL=1.0 \u00b6 How often do we store queries in FTL 's database [minutes]? DBFILE=/etc/pihole/pihole-FTL.db \u00b6 Specify the path and filename of FTL 's SQLite3 long-term database. Setting this to DBFILE= disables the database altogether File options \u00b6 LOGFILE=/var/log/pihole-FTL.log \u00b6 The location of FTL 's log file. If you want to move the log file to a different place, also consider this FAQ article . PIDFILE=/var/run/pihole-FTL.pid \u00b6 The file which contains the PID of FTL 's main process. PORTFILE=/var/run/pihole-FTL.port \u00b6 The file containing the port FTL 's API is listening on. SOCKETFILE=/var/run/pihole/FTL.sock \u00b6 The file containing the socket FTL 's API is listening on. SETUPVARSFILE=/etc/pihole/setupVars.conf \u00b6 The config file of Pi-hole containing, e.g., the current blocking status (do not change). MACVENDORDB=/etc/pihole/macvendor.db \u00b6 The database containing MAC -> Vendor information for the network table. GRAVITYDB=/etc/pihole/gravity.db \u00b6 Specify path and filename of FTL 's SQLite3 gravity database. This database contains all domains relevant for Pi-hole's DNS blocking Debugging options \u00b6 DEBUG_ALL=false|true \u00b6 Enable all debug flags. If this is set to true, all other debug config options are ignored. DEBUG_DATABASE=false|true \u00b6 Print debugging information about database actions. This prints performed SQL statements as well as some general information such as the time it took to store the queries and how many have been saved to the database. DEBUG_NETWORKING=false|true \u00b6 Prints a list of the detected interfaces on the startup of pihole-FTL . Also, prints whether these interfaces are IPv4 or IPv6 interfaces. DEBUG_LOCKS=false|true \u00b6 Print information about shared memory locks. Messages will be generated when waiting, obtaining, and releasing a lock. DEBUG_QUERIES=false|true \u00b6 Print extensive query information (domains, types, replies, etc.). This has always been part of the legacy debug mode of pihole-FTL . DEBUG_FLAGS=false|true \u00b6 Print flags of queries received by the DNS hooks. Only effective when DEBUG_QUERIES is enabled as well. DEBUG_SHMEM=false|true \u00b6 Print information about shared memory buffers. Messages are either about creating or enlarging shmem objects or string injections. DEBUG_GC=false|true \u00b6 Print information about garbage collection (GC): What is to be removed, how many have been removed and how long did GC take. DEBUG_ARP=false|true \u00b6 Print information about ARP table processing: How long did parsing take, whether read MAC addresses are valid, and if the macvendor.db file exists. DEBUG_REGEX=false|true \u00b6 Controls if FTL DNS should print extended details about regex matching into pihole-FTL.log . Due to legacy reasons, we also support the following setting to be used for enabling the same functionality: REGEX_DEBUGMODE=false|true Note that if one of them is set to true , the other one cannot be used to disable this setting again. More details DEBUG_API=false|true \u00b6 Print extra debugging information during telnet API calls. Currently only used to send extra information when getting all queries. DEBUG_OVERTIME=false|true \u00b6 Print information about overTime memory operations, such as initializing or moving overTime slots. DEBUG_EXTBLOCKED=false|true \u00b6 Print information about why FTL decided that certain queries were recognized as being externally blocked. DEBUG_CAPS=false|true \u00b6 Print information about capabilities granted to the pihole- FTL process. The current capabilities are printed on receipt of SIGHUP , i.e., the current set of capabilities can be queried without restarting pihole-FTL (by setting DEBUG_CAPS=true and thereafter sending killall -HUP pihole-FTL ). DEBUG_DNSMASQ_LINES=false|true \u00b6 Print file and line causing a dnsmasq event into FTL 's log files. This is handy to implement additional hooks missing from FTL . DEBUG_VECTORS=false|true {#debug_vectors data-toc-label='Debug FTL vectors'} \u00b6 FTL uses dynamically allocated vectors for various tasks. This config option enables extensive debugging information such as information about allocation, referencing, deletion, and appending. DEBUG_RESOLVER=false|true {#debug_resolver data-toc-label='Debug FTL resolver'} \u00b6 Extensive information about hostname resolution like which DNS servers are used in the first and second hostname resolving tries (only affecting internally generated PTR queries).","title":"Configuration"},{"location":"ftldns/configfile/#dns-settings","text":"","title":"DNS settings"},{"location":"ftldns/configfile/#blocking_mode","text":"How should FTL reply to blocked queries? More details","title":"Blocking Mode"},{"location":"ftldns/configfile/#cname_deep_inspect","text":"Use this option to disable deep CNAME inspection. This might be beneficial for very low-end devices","title":"Deep CNAME inspection"},{"location":"ftldns/configfile/#statistics-settings","text":"","title":"Statistics settings"},{"location":"ftldns/configfile/#maxlogage","text":"Up to how many hours of queries should be imported from the database and logs? Maximum is 24.0","title":"Max Log Age"},{"location":"ftldns/configfile/#privacylevel","text":"Which privacy level is used? More details","title":"Privacy Level"},{"location":"ftldns/configfile/#ignore_localhost","text":"Should FTL ignore queries coming from the local machine?","title":"Ignore localhost"},{"location":"ftldns/configfile/#aaaa_query_analysis","text":"Allow FTL to analyze AAAA queries from pihole.log?","title":"AAAA Query Analysis"},{"location":"ftldns/configfile/#analyze_only_a_and_aaaa","text":"Should FTL only analyze A and AAAA queries?","title":"Analyze A and AAAA Only"},{"location":"ftldns/configfile/#other-settings","text":"","title":"Other settings"},{"location":"ftldns/configfile/#socket_listening","text":"Listen only for local socket connections or permit all connections","title":"Socket Listening"},{"location":"ftldns/configfile/#ftlport","text":"On which port should FTL be listening?","title":"FTLDNS Port"},{"location":"ftldns/configfile/#resolve_ipv6","text":"Should FTL try to resolve IPv6 addresses to hostnames?","title":"Resolve IPV6"},{"location":"ftldns/configfile/#resolve_ipv4","text":"Should FTL try to resolve IPv4 addresses to hostnames?","title":"Resolve IPV4"},{"location":"ftldns/configfile/#delay_startup","text":"In certain configurations, you may want FTL to wait a given amount of time before trying to start the DNS revolver. This is typically found when network interfaces appear only late during system startup and the interface startup priorities are configured incorrectly. This setting takes any integer value between 0 and 300 seconds","title":"Delay resolver startup"},{"location":"ftldns/configfile/#long-term-database-settings","text":"Further details concerning the database","title":"Long-term database settings"},{"location":"ftldns/configfile/#dbimport","text":"Should FTL load information from the database on startup to be aware of the most recent history?","title":"Use database"},{"location":"ftldns/configfile/#maxdbdays","text":"How long should queries be stored in the database? Setting this to 0 disables the database","title":"Max age"},{"location":"ftldns/configfile/#dbinterval","text":"How often do we store queries in FTL 's database [minutes]?","title":"Storing Interval"},{"location":"ftldns/configfile/#dbfile","text":"Specify the path and filename of FTL 's SQLite3 long-term database. Setting this to DBFILE= disables the database altogether","title":"Database Filename"},{"location":"ftldns/configfile/#file-options","text":"","title":"File options"},{"location":"ftldns/configfile/#file_LOGFILE","text":"The location of FTL 's log file. If you want to move the log file to a different place, also consider this FAQ article .","title":"Log file"},{"location":"ftldns/configfile/#file_PIDFILE","text":"The file which contains the PID of FTL 's main process.","title":"Process identifier file"},{"location":"ftldns/configfile/#file_PORTFILE","text":"The file containing the port FTL 's API is listening on.","title":"Port file"},{"location":"ftldns/configfile/#file_SOCKETFILE","text":"The file containing the socket FTL 's API is listening on.","title":"Socket file"},{"location":"ftldns/configfile/#file_SETUPVARSFILE","text":"The config file of Pi-hole containing, e.g., the current blocking status (do not change).","title":"setupVars file"},{"location":"ftldns/configfile/#file_MACVENDORDB","text":"The database containing MAC -> Vendor information for the network table.","title":"MacVendor database file"},{"location":"ftldns/configfile/#file_GRAVITYDB","text":"Specify path and filename of FTL 's SQLite3 gravity database. This database contains all domains relevant for Pi-hole's DNS blocking","title":"Gravity database"},{"location":"ftldns/configfile/#debugging-options","text":"","title":"Debugging options"},{"location":"ftldns/configfile/#debug_all","text":"Enable all debug flags. If this is set to true, all other debug config options are ignored.","title":"Debug All"},{"location":"ftldns/configfile/#debug_database","text":"Print debugging information about database actions. This prints performed SQL statements as well as some general information such as the time it took to store the queries and how many have been saved to the database.","title":"Debug Database"},{"location":"ftldns/configfile/#debug_networking","text":"Prints a list of the detected interfaces on the startup of pihole-FTL . Also, prints whether these interfaces are IPv4 or IPv6 interfaces.","title":"Debug networking"},{"location":"ftldns/configfile/#debug_locks","text":"Print information about shared memory locks. Messages will be generated when waiting, obtaining, and releasing a lock.","title":"Debug Locks"},{"location":"ftldns/configfile/#debug_queries","text":"Print extensive query information (domains, types, replies, etc.). This has always been part of the legacy debug mode of pihole-FTL .","title":"Debug Queries"},{"location":"ftldns/configfile/#debug_flags","text":"Print flags of queries received by the DNS hooks. Only effective when DEBUG_QUERIES is enabled as well.","title":"Debug Flags"},{"location":"ftldns/configfile/#debug_shmem","text":"Print information about shared memory buffers. Messages are either about creating or enlarging shmem objects or string injections.","title":"Debug Shared Memory"},{"location":"ftldns/configfile/#debug_gc","text":"Print information about garbage collection (GC): What is to be removed, how many have been removed and how long did GC take.","title":"Debug GC"},{"location":"ftldns/configfile/#debug_arp","text":"Print information about ARP table processing: How long did parsing take, whether read MAC addresses are valid, and if the macvendor.db file exists.","title":"Debug ARP"},{"location":"ftldns/configfile/#debug_regex","text":"Controls if FTL DNS should print extended details about regex matching into pihole-FTL.log . Due to legacy reasons, we also support the following setting to be used for enabling the same functionality: REGEX_DEBUGMODE=false|true Note that if one of them is set to true , the other one cannot be used to disable this setting again. More details","title":"Debug REGEX"},{"location":"ftldns/configfile/#debug_api","text":"Print extra debugging information during telnet API calls. Currently only used to send extra information when getting all queries.","title":"Debug Telnet"},{"location":"ftldns/configfile/#debug_overtime","text":"Print information about overTime memory operations, such as initializing or moving overTime slots.","title":"Debug overTime"},{"location":"ftldns/configfile/#debug_extblocked","text":"Print information about why FTL decided that certain queries were recognized as being externally blocked.","title":"Debug externally blocked"},{"location":"ftldns/configfile/#debug_caps","text":"Print information about capabilities granted to the pihole- FTL process. The current capabilities are printed on receipt of SIGHUP , i.e., the current set of capabilities can be queried without restarting pihole-FTL (by setting DEBUG_CAPS=true and thereafter sending killall -HUP pihole-FTL ).","title":"Debug Linux capabilities"},{"location":"ftldns/configfile/#debug_dnsmasq_lines","text":"Print file and line causing a dnsmasq event into FTL 's log files. This is handy to implement additional hooks missing from FTL .","title":"Debug dnsmasq lines"},{"location":"ftldns/configfile/#debug_vectorsfalsetrue-debug_vectors-data-toc-labeldebug-ftl-vectors","text":"FTL uses dynamically allocated vectors for various tasks. This config option enables extensive debugging information such as information about allocation, referencing, deletion, and appending.","title":"DEBUG_VECTORS=false|true {#debug_vectors data-toc-label='Debug FTL vectors'}"},{"location":"ftldns/configfile/#debug_resolverfalsetrue-debug_resolver-data-toc-labeldebug-ftl-resolver","text":"Extensive information about hostname resolution like which DNS servers are used in the first and second hostname resolving tries (only affecting internally generated PTR queries).","title":"DEBUG_RESOLVER=false|true {#debug_resolver data-toc-label='Debug FTL resolver'}"},{"location":"ftldns/database/","text":"","title":"Database"},{"location":"ftldns/debugging/","text":"Once you are used to it, you can skip most of the steps. Debugging FTL DNS is quite easy. pihole-FTL has been designed so that a debugger can be attached to an already running process. This will give you insights into how software (not limited to pihole-FTL ) works. Prerequirements (only required once) \u00b6 Install screen and gdb using sudo apt-get install screen gdb Start a screen session (it will allow you to come back even if the SSH connection died) If you don't know about screen , then read about it (you will love it!) Start a screen session using screen Configure gdb by installing a globally valid initialization file: echo \"handle SIGHUP nostop SIGPIPE nostop SIGTERM nostop SIG32 nostop SIG34 nostop SIG35 nostop\" | sudo tee /root/.gdbinit You can omit this step, however, you will have to remember to run the quoted line on every start of gdb in order to properly debug FTL . Start of debugging session \u00b6 Use sudo gdb -p $(pidof pihole-FTL) to attach the debugger to the already running pihole-FTL process Once loading of the symbols has finished (the (gdb) input prompt is shown), enter continue to continue the operation of pihole-FTL inside the debugger. All debugger features are now available. When pihole-FTL has crashed, copy & paste the terminal output into a (new) issue. Also, type backtrace and include its output. We might ask for additional information in order to isolate your particular issue.","title":"Debugging FTLDNS"},{"location":"ftldns/debugging/#prerequirements-only-required-once","text":"Install screen and gdb using sudo apt-get install screen gdb Start a screen session (it will allow you to come back even if the SSH connection died) If you don't know about screen , then read about it (you will love it!) Start a screen session using screen Configure gdb by installing a globally valid initialization file: echo \"handle SIGHUP nostop SIGPIPE nostop SIGTERM nostop SIG32 nostop SIG34 nostop SIG35 nostop\" | sudo tee /root/.gdbinit You can omit this step, however, you will have to remember to run the quoted line on every start of gdb in order to properly debug FTL .","title":"Prerequirements (only required once)"},{"location":"ftldns/debugging/#start-of-debugging-session","text":"Use sudo gdb -p $(pidof pihole-FTL) to attach the debugger to the already running pihole-FTL process Once loading of the symbols has finished (the (gdb) input prompt is shown), enter continue to continue the operation of pihole-FTL inside the debugger. All debugger features are now available. When pihole-FTL has crashed, copy & paste the terminal output into a (new) issue. Also, type backtrace and include its output. We might ask for additional information in order to isolate your particular issue.","title":"Start of debugging session"},{"location":"ftldns/dns-cache/","text":"pihole-FTL offers an efficient DNS cache that helps speed up your Internet experience. This DNS cache is part of the embedded dnsmasq server. Setting the cache size to zero disables caching. The DNS TTL value is used for determining the caching period. pihole-FTL clears its cache on receiving SIGHUP . Cache metrics \u00b6 The Settings page (System panel, FTL table) gives live information about the cache usage. It obtains its information from http://pi.hole/admin/api.php?getCacheInfo . DNS cache size \u00b6 Size of the DNS domain cache, defaulting to 10,000 entries. You typically specify this number directly in /etc/dnsmasq.d/01-pihole.conf . It is the number of entries that can be actively cached at the same time. There is no benefit in enlarging this number except if the DNS cache evictions count is larger than zero. This information may also be queried using dig +short chaos txt cachesize.bind DNS cache insertions \u00b6 Number of total insertions into the cache. This number can be substantially larger than DNS cache size as expiring cache entries naturally make room for new insertions over time. Each lookup with a non-zero TTL will be cached. This information may also be queried using dig +short chaos txt insertions.bind DNS cache evictions \u00b6 The number of cache entries that had to be removed although the corresponding entries were not expired. Old cache entries get removed if the cache is full to make space for more recent domains. The cache size should be increased when this number is larger than zero. This information may also be queried using dig +short chaos txt evictions.bind","title":"DNS cache"},{"location":"ftldns/dns-cache/#cache-metrics","text":"The Settings page (System panel, FTL table) gives live information about the cache usage. It obtains its information from http://pi.hole/admin/api.php?getCacheInfo .","title":"Cache metrics"},{"location":"ftldns/dns-cache/#dns-cache-size","text":"Size of the DNS domain cache, defaulting to 10,000 entries. You typically specify this number directly in /etc/dnsmasq.d/01-pihole.conf . It is the number of entries that can be actively cached at the same time. There is no benefit in enlarging this number except if the DNS cache evictions count is larger than zero. This information may also be queried using dig +short chaos txt cachesize.bind","title":"DNS cache size"},{"location":"ftldns/dns-cache/#dns-cache-insertions","text":"Number of total insertions into the cache. This number can be substantially larger than DNS cache size as expiring cache entries naturally make room for new insertions over time. Each lookup with a non-zero TTL will be cached. This information may also be queried using dig +short chaos txt insertions.bind","title":"DNS cache insertions"},{"location":"ftldns/dns-cache/#dns-cache-evictions","text":"The number of cache entries that had to be removed although the corresponding entries were not expired. Old cache entries get removed if the cache is full to make space for more recent domains. The cache size should be increased when this number is larger than zero. This information may also be queried using dig +short chaos txt evictions.bind","title":"DNS cache evictions"},{"location":"ftldns/dns-resolver/","text":"FTL DNS comes with a lightweight but powerful inbuilt DNS / DHCP / TFTP /... server eliminating the need to install dnsmasq separately (we used to do this before Pi-hole v4.0). However, it is important to understand that we are not moving away from dnsmasq , but, in contrast, are coupling even closer to it by incorporating it into FTL . This provides us with a much more reliable monolith DNS solution where we can be sure that the versions of FTL and the DNS internals are always 100% compatible with each other. As we maintain our own fork of dnsmasq we have been able to apply some minimal changes to the source code which might bring substantial benefits for our users. However, although the potential for changes is endless, we want to include as few modifications as possible. As a purely volunteer-driven project, you will surely understand that it was already a major undertaking to get FTL DNS set up and running. It was much more than just copy-pasting dnsmasq into place. We have always been very explicit about how we will react to feature requests that target the resolver part (from the initial FTL DNS beta test announcement): Think of FTL DNS as dnsmasq with Pi-hole\u2019s special sauce. This allows us to easily merge any upstream changes that get added, while still allowing us to continue to develop Pi-hole as we have been. If we would start to modify the resolver code in too many places, then this would probably make us deviate too much from dnsmasq 's code base and we couldn't apply patches easily preventing us from being able to ship important security updates. Implemented modifications in dnsmasq 's source code \u00b6 FTL hooks \u00b6 We place hooks in a lot of places in the resolver that branch out into FTL code to process queries and responses. By this, we keep the resolver code itself clean. Remove limit on maximum cache size \u00b6 Users can configure the size of the resolver's name cache. The default is 150 names. Setting the cache size to zero disables caching. We think users should be allowed to set the cache size to any value they find appropriate. However, dnsmasq 's source code contains a condition that limits the maximum size of the cache to 10,000 names. We removed this hard-coded upper limit in and submitted a patch to remove this hard-coded limit in the upstream version of dnsmasq . It was accepted for dnsmasq v2.81 . Improve detection algorithm for determining the \"best\" forward destination \u00b6 The DNS forward destination determination algorithm in FTL DNS 's is modified to be much less restrictive than the original algorithm in dnsmasq . We keep using the fastest responding server now for 1000 queries or 10 minutes (whatever happens earlier) instead of 50 queries or 10 seconds (default values in dnsmasq ). We keep the exceptions, i.e., we try all possible forward destinations if SERVFAIL or REFUSED is received or if a timeout occurs. Overall, this change has proven to greatly reduce the number of actually performed queries in typical Pi-hole environments. It may even be understood as being preferential in terms of privacy (as we send queries much less often to all servers). This has been implemented in commit d1c163e .","title":"DNS resolver"},{"location":"ftldns/dns-resolver/#implemented-modifications-in-dnsmasqs-source-code","text":"","title":"Implemented modifications in dnsmasq's source code"},{"location":"ftldns/dns-resolver/#ftl-hooks","text":"We place hooks in a lot of places in the resolver that branch out into FTL code to process queries and responses. By this, we keep the resolver code itself clean.","title":"FTL hooks"},{"location":"ftldns/dns-resolver/#remove-limit-on-maximum-cache-size","text":"Users can configure the size of the resolver's name cache. The default is 150 names. Setting the cache size to zero disables caching. We think users should be allowed to set the cache size to any value they find appropriate. However, dnsmasq 's source code contains a condition that limits the maximum size of the cache to 10,000 names. We removed this hard-coded upper limit in and submitted a patch to remove this hard-coded limit in the upstream version of dnsmasq . It was accepted for dnsmasq v2.81 .","title":"Remove limit on maximum cache size"},{"location":"ftldns/dns-resolver/#improve-detection-algorithm-for-determining-the-best-forward-destination","text":"The DNS forward destination determination algorithm in FTL DNS 's is modified to be much less restrictive than the original algorithm in dnsmasq . We keep using the fastest responding server now for 1000 queries or 10 minutes (whatever happens earlier) instead of 50 queries or 10 seconds (default values in dnsmasq ). We keep the exceptions, i.e., we try all possible forward destinations if SERVFAIL or REFUSED is received or if a timeout occurs. Overall, this change has proven to greatly reduce the number of actually performed queries in typical Pi-hole environments. It may even be understood as being preferential in terms of privacy (as we send queries much less often to all servers). This has been implemented in commit d1c163e .","title":"Improve detection algorithm for determining the \"best\" forward destination"},{"location":"ftldns/in-depth/","text":"Available interfaces \u00b6 Pi-hole stats can be accessed via a standard Unix socket ( var/run/pihole/FTL.sock ), a telnet-like connection ( TCP socket on port 4711 ) as well as indirectly via the Web API ( admin/api.php ), and the command line ( pihole -c -j ). You can out find more details below. Command-line arguments \u00b6 debug - Don't go into daemon mode (stay in foreground) + more verbose logging test - Start FTL and process everything, but shut down immediately afterward version - Don't start FTL , only show the version tag - Don't start FTL , show only git tag branch - Don't start FTL , show only git branch FTL was compiled from no-daemon or -f - Don't go into background (daemon mode) help or -h - Don't start FTL , show help dnsmasq-test - Test resolver config file syntax -- everything behind -- will be passed as options to the internal resolver Command-line arguments can be arbitrarily combined, e.g. pihole-FTL debug test File locations \u00b6 /var/log/pihole-FTL.log log file /var/run/pihole-FTL.pid PID file /var/run/pihole-FTL.port file containing port on which FTL is listening /var/run/pihole/FTL.sock Unix socket Linux capabilities \u00b6 Capabilities ( POSIX 1003.1e, capabilities(7) ) provide fine-grained control over superuser permissions, allowing the use of the root user to be avoided. To perform permission checks, traditional UNIX implementations distinguish two categories of processes: privileged processes (superuser or root ), and unprivileged processes . Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (user and group permissions and supplementary process capabilities). Capabilities are implemented on Linux using extended attributes ( xattr(7) ) in the security namespace. Extended attributes are supported by all major Linux file systems, including Ext2 , Ext3 , Ext4 , Btrfs , JFS , XFS , and ReiserFS . For your safety and comfort, pihole-FTL is run by the entirely unprivileged user pihole . Whereas dnsmasq is running as root process, we designed pihole-FTL to be run by the entirely unprivileged user pihole . As a consequence, pihole-FTL will not be able to access the files of any other user on this system or mess around with your system's configuration. However, this also implies that FTL DNS cannot bind to ports 53 ( DNS ) among some other necessary capabilities related to DHCP services. To establish a strong security model, we explicitly grant the pihole-FTL process additional capabilities so that pihole-FTL (but no other processes which may be started by pihole ) can bind to port 53, etc., without giving any additional permissions to the pihole user. We specifically add the following capabilities to pihole-FTL : CAP_NET_BIND_SERVICE : Allows FTL DNS binding to TCP / UDP sockets below 1024 (specifically DNS service on port 53) CAP_NET_RAW : use raw and packet sockets (we need a RAW socket for handling DHCPv6 requests) CAP_NET_ADMIN : modify routing tables and other network-related operations (to allow for handling DHCP requests) Users that cannot use Linux capabilities for various reasons (lacking kernel or file system support) can modify the startup scripts of pihole-FTL to ensure the daemon is started as root . However, be aware that you do so on your own risk (although we don't expect problems to arise).","title":"In-depth manual"},{"location":"ftldns/in-depth/#available-interfaces","text":"Pi-hole stats can be accessed via a standard Unix socket ( var/run/pihole/FTL.sock ), a telnet-like connection ( TCP socket on port 4711 ) as well as indirectly via the Web API ( admin/api.php ), and the command line ( pihole -c -j ). You can out find more details below.","title":"Available interfaces"},{"location":"ftldns/in-depth/#command-line-arguments","text":"debug - Don't go into daemon mode (stay in foreground) + more verbose logging test - Start FTL and process everything, but shut down immediately afterward version - Don't start FTL , only show the version tag - Don't start FTL , show only git tag branch - Don't start FTL , show only git branch FTL was compiled from no-daemon or -f - Don't go into background (daemon mode) help or -h - Don't start FTL , show help dnsmasq-test - Test resolver config file syntax -- everything behind -- will be passed as options to the internal resolver Command-line arguments can be arbitrarily combined, e.g. pihole-FTL debug test","title":"Command-line arguments"},{"location":"ftldns/in-depth/#file-locations","text":"/var/log/pihole-FTL.log log file /var/run/pihole-FTL.pid PID file /var/run/pihole-FTL.port file containing port on which FTL is listening /var/run/pihole/FTL.sock Unix socket","title":"File locations"},{"location":"ftldns/in-depth/#linux-capabilities","text":"Capabilities ( POSIX 1003.1e, capabilities(7) ) provide fine-grained control over superuser permissions, allowing the use of the root user to be avoided. To perform permission checks, traditional UNIX implementations distinguish two categories of processes: privileged processes (superuser or root ), and unprivileged processes . Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (user and group permissions and supplementary process capabilities). Capabilities are implemented on Linux using extended attributes ( xattr(7) ) in the security namespace. Extended attributes are supported by all major Linux file systems, including Ext2 , Ext3 , Ext4 , Btrfs , JFS , XFS , and ReiserFS . For your safety and comfort, pihole-FTL is run by the entirely unprivileged user pihole . Whereas dnsmasq is running as root process, we designed pihole-FTL to be run by the entirely unprivileged user pihole . As a consequence, pihole-FTL will not be able to access the files of any other user on this system or mess around with your system's configuration. However, this also implies that FTL DNS cannot bind to ports 53 ( DNS ) among some other necessary capabilities related to DHCP services. To establish a strong security model, we explicitly grant the pihole-FTL process additional capabilities so that pihole-FTL (but no other processes which may be started by pihole ) can bind to port 53, etc., without giving any additional permissions to the pihole user. We specifically add the following capabilities to pihole-FTL : CAP_NET_BIND_SERVICE : Allows FTL DNS binding to TCP / UDP sockets below 1024 (specifically DNS service on port 53) CAP_NET_RAW : use raw and packet sockets (we need a RAW socket for handling DHCPv6 requests) CAP_NET_ADMIN : modify routing tables and other network-related operations (to allow for handling DHCP requests) Users that cannot use Linux capabilities for various reasons (lacking kernel or file system support) can modify the startup scripts of pihole-FTL to ensure the daemon is started as root . However, be aware that you do so on your own risk (although we don't expect problems to arise).","title":"Linux capabilities"},{"location":"ftldns/privacylevels/","text":"Using privacy levels you can specify which level of detail you want to see in your Pi-hole statistics. The privacy level may be changed at any time without having to restart the DNS resolver. Note that queries with (partially) hidden details cannot be disclosed with a subsequent reduction of the privacy level. They can be changed either from the Settings page on the dashboard or in FTL 's config file . The available options are Level 0 - show everything \u00b6 Doesn't hide anything, all statistics are available Level 1 - hide domains \u00b6 Show and store all domains as hidden This setting disables Top Domains Top Ads Level 2 - hide domains and clients \u00b6 Show and store all domains as hidden and clients as 0.0.0.0 This setting disables Top Domains Top Ads Top Clients Clients over time Level 3 - anonymous mode (anonymize everything) \u00b6 Disable all details except the most anonymous statistics This setting disables Top Domains Top Ads Top Clients Clients over time Query Log Long-term database logging","title":"Privacy levels"},{"location":"ftldns/privacylevels/#level-0-show-everything","text":"Doesn't hide anything, all statistics are available","title":"Level 0 - show everything"},{"location":"ftldns/privacylevels/#level-1-hide-domains","text":"Show and store all domains as hidden This setting disables Top Domains Top Ads","title":"Level 1 - hide domains"},{"location":"ftldns/privacylevels/#level-2-hide-domains-and-clients","text":"Show and store all domains as hidden and clients as 0.0.0.0 This setting disables Top Domains Top Ads Top Clients Clients over time","title":"Level 2 - hide domains and clients"},{"location":"ftldns/privacylevels/#level-3-anonymous-mode-anonymize-everything","text":"Disable all details except the most anonymous statistics This setting disables Top Domains Top Ads Top Clients Clients over time Query Log Long-term database logging","title":"Level 3 - anonymous mode (anonymize everything)"},{"location":"ftldns/telnet-api/","text":"Connect via e.g. telnet 127.0.0.1 4711 or use echo \">command\" | nc 127.0.0.1 4711 >quit : Closes the connection to the client >stats : Get current statistics domains_being_blocked 116007 dns_queries_today 30163 ads_blocked_today 5650 ads_percentage_today 18.731558 unique_domains 1056 queries_forwarded 4275 queries_cached 20238 clients_ever_seen 11 unique_clients 9 status enabled >overTime : over time data (10 min intervals) 1525546500 163 0 1525547100 154 1 1525547700 164 0 1525548300 167 0 1525548900 151 0 1525549500 143 0 [...] >top-domains : get top domains 0 8462 x.y.z.de 1 236 safebrowsing-cache.google.com 2 116 pi.hole 3 109 z.y.x.de 4 93 safebrowsing.google.com 5 96 plus.google.com [...] Variant: >top-domains (15) to show (up to) 15 entries >top-ads : get top ad domains 0 8 googleads.g.doubleclick.net 1 6 www.googleadservices.com 2 1 cdn.mxpnl.com 3 1 collector.githubapp.com 4 1 www.googletagmanager.com 5 1 s.zkcdn.net [...] Variant: >top-ads (14) to show (up to) 14 entries top-clients : get recently active top clients ( IP addresses + hostnames (if available)) 0 9373 192.168.2.1 router 1 484 192.168.2.2 work-machine 2 8 127.0.0.1 localhost Variant: >top-clients (9) to show (up to) 9 client entries or >top-clients withzero (15) to show (up to) 15 clients even if they have not been active recently (see PR #124 for further details) >forward-dest : get forward destinations ( IP addresses + hostnames (if available)) along with the percentage. The first result ( ID -2) will always be the percentage of domains answered from blocklists, whereas the second result ( ID -1) will be the queries answered from the cache -2 18.70 blocklist blocklist -1 67.10 cache cache 0 14.20 127.0.0.1 localhost Variant: >forward-dest unsorted to show forward destinations in unsorted order (equivalent to using >forward-names ) >querytypes : get collected query types percentage A (IPv4): 53.45 AAAA (IPv6): 45.32 ANY: 0.00 SRV: 0.64 SOA: 0.05 PTR: 0.54 TXT: 0.00 >getallqueries : get all queries that FTL has in memory 1525554586 A fonts.googleapis.com 192.168.2.100 3 0 4 6 1525554586 AAAA fonts.googleapis.com 192.168.2.100 3 0 4 5 1525554586 A www.mkdocs.org 192.168.2.100 3 0 4 7 1525554586 AAAA www.mkdocs.org 192.168.2.100 2 0 3 21 1525554586 A squidfunk.github.io 192.168.2.100 2 0 3 20 1525554586 A pi-hole.net 192.168.2.100 3 0 4 5 1525554586 AAAA squidfunk.github.io 192.168.2.100 3 0 1 6 1525554586 AAAA pi-hole.net 192.168.2.100 2 0 1 18 1525554586 A github.com 192.168.2.100 3 0 4 5 1525554586 AAAA github.com 192.168.2.100 2 0 1 18 Variants: >getallqueries (37) show (up to) 37 latest entries, >getallqueries-time 1483964295 1483964312 gets all queries that FTL has in its database in a limited time interval, >getallqueries-time 1483964295 1483964312 (17) show matches in the (up to) 17 latest entries, >getallqueries-domain www.google.com gets all queries that FTL has in its database for a specific domain name, >getallqueries-client 2.3.4.5 : gets all queries that FTL has in its database for a specific client name or IP >recentBlocked : get most recently pi-holed domain name www.googleadservices.com Variant: >recentBlocked (4) show the four most recent blocked domains >clientID : Get ID of currently connected client 6 >version : Get version information of the currently running FTL instance version v1.6-3-g106498d-dirty tag v1.6 branch master hash 106498d date 2017-03-26 13:10:43 +0200 >dbstats : Get some statistics about FTL 's' long-term storage database (this request may take some time for processing in case of a large database file) queries in database: 2700304 database filesize: 199.20 MB SQLite version: 3.23.1 >domain pi-hole.net : Get detailed information about domain (if available) Domain \"pi-hole.net\", ID: 254 Total: 179 Blocked: 0 Wildcard blocked: false >cacheinfo : Get DNS server cache size and usage information cache-size: 500000 cache-live-freed: 0 cache-inserted: 15529","title":"Telnet API"},{"location":"ftldns/regex/","text":"","title":"Redirect for /ftldns/regex/"},{"location":"ftldns/regex/overview/","text":"A regular expression, or RegEx for short, is a pattern that can be used for building arbitrarily complex filter rules in FTL DNS . We implement the POSIX Extended Regular Expressions similar to the one used by the UNIX egrep (or grep -E ) command. Our implementation is light and fast as each domain is only checked once for a match (if you query google.com , it will be checked against your RegEx . Any subsequent query to the same domain will not be checked again until you restart pihole-FTL ). Hierarchy of regex filters in FTL DNS \u00b6 FTL DNS uses a specific hierarchy to ensure regex filters work as you expect them to. Whitelisting always has priority over blacklisting. There are two locations where regex filters are important: On loading the blocking domains form the gravity database table, FTL DNS skips not only exactly whitelisted domains but also those that match enabled whitelist regex filters. When a queried domain matches a blacklist regex filter, the query will not be blocked if the domain also matches an exact or a regex whitelist entry. How to use regular expressions for filtering domains \u00b6 FTL DNS reads in regular expression filters from the two regex database views . To tell FTL DNS to reload the list of regex filters, either: Execute pihole restartdns reload-lists or Send SIGHUP to pihole-FTL ( sudo killall -SIGHUP pihole-FTL ) or Restart the service ( sudo service pihole-FTL restart ) The first command is to be preferred as it ensures that the DNS cache itself remains intact. Hence, it is also the fastest of the available options. Pi-hole Regex debugging mode \u00b6 To ease the usage of regular expression filters in FTL DNS , we offer a regex debugging mode. Set DEBUG_REGEX=true in your /etc/pihole/pihole-FTL.conf and restart pihole-FTL to enable or disable this mode. Once the debugging mode is enabled, each match will be logged to /var/log/pihole-FTL.log in the following format: [2018-07-17 17:40:51.304] Regex blacklist (DB ID 15) >> MATCH: \"whatever.twitter.com\" vs. \"((^)|(\\.))twitter\\.\" The given DB ID corresponds to the ID of the corresponding row in the domainlist database table. Note that validation is only done on the first occurrence of a domain to increase the computational efficiency of FTL DNS . The result of this evaluation is stored in an internal DNS cache that is separate from dnsmasq 's own DNS cache. This allows us to only flush this special cache when modifying the black- and whitelists without having to flush the entire DNS cache collected so far.","title":"Overview"},{"location":"ftldns/regex/overview/#hierarchy-of-regex-filters-in-ftldns","text":"FTL DNS uses a specific hierarchy to ensure regex filters work as you expect them to. Whitelisting always has priority over blacklisting. There are two locations where regex filters are important: On loading the blocking domains form the gravity database table, FTL DNS skips not only exactly whitelisted domains but also those that match enabled whitelist regex filters. When a queried domain matches a blacklist regex filter, the query will not be blocked if the domain also matches an exact or a regex whitelist entry.","title":"Hierarchy of regex filters in FTLDNS"},{"location":"ftldns/regex/overview/#how-to-use-regular-expressions-for-filtering-domains","text":"FTL DNS reads in regular expression filters from the two regex database views . To tell FTL DNS to reload the list of regex filters, either: Execute pihole restartdns reload-lists or Send SIGHUP to pihole-FTL ( sudo killall -SIGHUP pihole-FTL ) or Restart the service ( sudo service pihole-FTL restart ) The first command is to be preferred as it ensures that the DNS cache itself remains intact. Hence, it is also the fastest of the available options.","title":"How to use regular expressions for filtering domains"},{"location":"ftldns/regex/overview/#pi-hole-regex-debugging-mode","text":"To ease the usage of regular expression filters in FTL DNS , we offer a regex debugging mode. Set DEBUG_REGEX=true in your /etc/pihole/pihole-FTL.conf and restart pihole-FTL to enable or disable this mode. Once the debugging mode is enabled, each match will be logged to /var/log/pihole-FTL.log in the following format: [2018-07-17 17:40:51.304] Regex blacklist (DB ID 15) >> MATCH: \"whatever.twitter.com\" vs. \"((^)|(\\.))twitter\\.\" The given DB ID corresponds to the ID of the corresponding row in the domainlist database table. Note that validation is only done on the first occurrence of a domain to increase the computational efficiency of FTL DNS . The result of this evaluation is stored in an internal DNS cache that is separate from dnsmasq 's own DNS cache. This allows us to only flush this special cache when modifying the black- and whitelists without having to flush the entire DNS cache collected so far.","title":"Pi-hole Regex debugging mode"},{"location":"ftldns/regex/tutorial/","text":"Pi-hole regular expressions tutorial \u00b6 We provide a short but thorough introduction to our regular expressions implementation. This may come in handy if you are designing blocking or whitelisting rules (see also our cheat sheet below!). In our implementation, all characters match themselves except for the following special characters: .[{}()\\*+?|^$ . If you want to match those, you need to escape them like \\. for a literal period, but no rule without exception (see character groups below for further details). Anchors ( ^ and $ ) \u00b6 First of all, we look at anchors that can be used to indicate the start or the end of a domain, respectively. If you don't specify anchors, the match may be partial (see examples below). Example Interpretation domain partial match . Without anchors, a text may appear anywhere in the domain. This matches some.domain.com , domain.com and verylongdomain.com and more ^localhost$ exact match matching only localhost but neither a.localhost nor localhost.com ^abc matches any domain starting ( ^ ) in \"abc\" like abcdomain.com , abc.domain.com but not def.abc.com com$ matches any domain ending ( $ ) in \"com\" such as domain.com but not domain.com.co.uk Wildcard ( . ) \u00b6 An unescaped period stands for any single character. Example Interpretation ^domain.$ matches domaina , domainb , domainc , but not domain Bounds and multipliers ( {} , * , + , and ? ) \u00b6 With bounds, one can denote the number of times something has to occur: Bound Meaning ab{4} matches a domain that contains a single a followed by four b (matching only abbbb ) ab{4,} matches a domain that contains a single a followed by at least four b (matching also abbbbbbbb ) ab{3,5} matches a domain that contains a single a followed by three to five b (matching only abbb , abbbb , and abbbbb ) Multipliers are shortcuts for some of the bounds that are needed most often: Multipliers Bounds equivalent Meaning ? {0,1} never or once (optional) * {0,} never or more (optional) + {1,} once or more (mandatory) To illustrate the usefulness of multipliers (and bounds), we provide a few examples: Example Interpretation ^r-*movie matches a domain like r------movie.com where the number of dashes can be arbitrary (also none) ^r-?movie matches only the domains rmovie.com and r-movie.com but not those with more than one dash ^r-+movie matches only the domains with at least one dash, i.e., not rmovie.com ^a?b+ matches domains like abbbb.com (zero or one a at the beginning followed by one or more b ) Character groups ( [] ) \u00b6 With character groups, a set of characters can be matched: Character group Interpretation [abc] matches a , b , or c (using explicitly specified characters) [a-c] matches a , b , or c (using a range ) [a-c]+ matches any non-zero number of a , b , c [a-z] matches any single lowercase letter [a-zA-Z] matches any single letter [a-z0-9] matches any single lowercase letter or any single digit [^a-z] Negation matching any single character except lowercase letters abc[0-9]+ matches the string abc followed by a number of arbitrary length Bracket expressions are an exception to the character escape rule. Inside them, all special characters, including the backslash ( \\ ), lose their special powers, i.e. they match themselves exactly. Furthermore, to include a literal ] in the list, make it the first character (like []] or [^]] if negated). To include a literal - , make it the first or last character, or the second endpoint of a range (e.g. [a-z-] to match a to z and - ). Groups ( () ) \u00b6 Using groups, we can enclose regular expressions, they are most powerful when combined with bounds or multipliers (see also alternations below). Example Interpretation (abc) matches abc (trivial example) (abc)* matches zero or more copies of abc like abcabc but not abcdefabc (abc){1,3} matches one, two or three copies of abc : abc , abcabc , abcabcabc but nothing else Alternations ( | ) \u00b6 Alternations can be used as an \"or\" operator in regular expressions. Example Interpretation (abc)|(def) matches abc and def domain(a|b)\\.com matches domaina.com and domainb.com but not domain.com or domainx.com domain(a|b)*\\.com matches domain.com , domainaaaa.com domainbbb.com but not domainab.com (any number of a or b in between domain and .com ) Character classes ( [:class:] ) \u00b6 In addition to character groups, there are also some special character classes available, such as Character class Group equivalent Interpretation [:digit:] [0-9] matches digits [:lower:] [a-z] matched lowercase letters [:upper:] [A-Z] matched uppercase letters [:alpha:] [A-Za-z] matches alphabetic characters [:alnum:] [A-Za-z0-9] matches alphabetic characters and digits Advanced examples \u00b6 After going through our quick tutorial, we provide some more advanced examples so you can test your knowledge. Block domain with only numbers \u00b6 ^[0-9][^a-z]+\\.((com)|(edu))$ Blocks domains containing only numbers (no letters) and ending in .com or .edu . Blocks 555661.com , and 456.edu , but not 555g555.com Block domains without subdomains \u00b6 ^[a-z0-9]+([\\-]{1}[a-z0-9]+)*\\.[a-z]{2,7}$ A domain name shall not start or end with a dash but can contain any number of them. It must be followed by a TLD (we assume a valid TLD length of two to seven characters) Cheatsheet \u00b6 Expression Meaning Example ^ Beginning of string ^client matches strings that begin with client , such as client.server.com but not more.client.server.com (exception: within a character range ( [] ) ^ means negation) $ End of string ing$ matches exciting but not ingenious * Match zero or more of the previous ah* matches ahhhhh or a ? Match zero or one of the previous ah? matches a or ah + Match one or more of the previous ah+ matches ah or ahhh but not a . Wildcard character, matches any character do.* matches do , dog , door , dot , etc.; do.+ matches dog , door , dot , etc. but not do (wildcard with + requires at least one extra character for matching) ( ) Group Enclose regular expressions, see the example for | | Alternation (mon|tues)day matches monday or tuesday but not friday or mondiag [ ] Matches a range of characters [cbf]ar matches car , bar , or far ; [^] Negation [^0-9] matches any character except 0 to 9 { } Matches a specified number of occurrences of the previous [0-9]{3} matches any three-digit number like 315 but not 31 ; [0-9]{2,4} matches two- to four-digit numbers like 12 , 123 , and 1234 but not 1 or 12345 ; [0-9]{2,} matches any number with two or more digits like 1234567 , 123456789 , but not 1 \\ Used to escape a special character not inside [] google\\.com matches google.com","title":"Tutorial"},{"location":"ftldns/regex/tutorial/#pi-hole-regular-expressions-tutorial","text":"We provide a short but thorough introduction to our regular expressions implementation. This may come in handy if you are designing blocking or whitelisting rules (see also our cheat sheet below!). In our implementation, all characters match themselves except for the following special characters: .[{}()\\*+?|^$ . If you want to match those, you need to escape them like \\. for a literal period, but no rule without exception (see character groups below for further details).","title":"Pi-hole regular expressions tutorial"},{"location":"ftldns/regex/tutorial/#anchors-and","text":"First of all, we look at anchors that can be used to indicate the start or the end of a domain, respectively. If you don't specify anchors, the match may be partial (see examples below). Example Interpretation domain partial match . Without anchors, a text may appear anywhere in the domain. This matches some.domain.com , domain.com and verylongdomain.com and more ^localhost$ exact match matching only localhost but neither a.localhost nor localhost.com ^abc matches any domain starting ( ^ ) in \"abc\" like abcdomain.com , abc.domain.com but not def.abc.com com$ matches any domain ending ( $ ) in \"com\" such as domain.com but not domain.com.co.uk","title":"Anchors (^ and $)"},{"location":"ftldns/regex/tutorial/#wildcard","text":"An unescaped period stands for any single character. Example Interpretation ^domain.$ matches domaina , domainb , domainc , but not domain","title":"Wildcard (.)"},{"location":"ftldns/regex/tutorial/#bounds-and-multipliers-and","text":"With bounds, one can denote the number of times something has to occur: Bound Meaning ab{4} matches a domain that contains a single a followed by four b (matching only abbbb ) ab{4,} matches a domain that contains a single a followed by at least four b (matching also abbbbbbbb ) ab{3,5} matches a domain that contains a single a followed by three to five b (matching only abbb , abbbb , and abbbbb ) Multipliers are shortcuts for some of the bounds that are needed most often: Multipliers Bounds equivalent Meaning ? {0,1} never or once (optional) * {0,} never or more (optional) + {1,} once or more (mandatory) To illustrate the usefulness of multipliers (and bounds), we provide a few examples: Example Interpretation ^r-*movie matches a domain like r------movie.com where the number of dashes can be arbitrary (also none) ^r-?movie matches only the domains rmovie.com and r-movie.com but not those with more than one dash ^r-+movie matches only the domains with at least one dash, i.e., not rmovie.com ^a?b+ matches domains like abbbb.com (zero or one a at the beginning followed by one or more b )","title":"Bounds and multipliers ({}, *, +, and ?)"},{"location":"ftldns/regex/tutorial/#character-groups","text":"With character groups, a set of characters can be matched: Character group Interpretation [abc] matches a , b , or c (using explicitly specified characters) [a-c] matches a , b , or c (using a range ) [a-c]+ matches any non-zero number of a , b , c [a-z] matches any single lowercase letter [a-zA-Z] matches any single letter [a-z0-9] matches any single lowercase letter or any single digit [^a-z] Negation matching any single character except lowercase letters abc[0-9]+ matches the string abc followed by a number of arbitrary length Bracket expressions are an exception to the character escape rule. Inside them, all special characters, including the backslash ( \\ ), lose their special powers, i.e. they match themselves exactly. Furthermore, to include a literal ] in the list, make it the first character (like []] or [^]] if negated). To include a literal - , make it the first or last character, or the second endpoint of a range (e.g. [a-z-] to match a to z and - ).","title":"Character groups ([])"},{"location":"ftldns/regex/tutorial/#groups","text":"Using groups, we can enclose regular expressions, they are most powerful when combined with bounds or multipliers (see also alternations below). Example Interpretation (abc) matches abc (trivial example) (abc)* matches zero or more copies of abc like abcabc but not abcdefabc (abc){1,3} matches one, two or three copies of abc : abc , abcabc , abcabcabc but nothing else","title":"Groups (())"},{"location":"ftldns/regex/tutorial/#alternations","text":"Alternations can be used as an \"or\" operator in regular expressions. Example Interpretation (abc)|(def) matches abc and def domain(a|b)\\.com matches domaina.com and domainb.com but not domain.com or domainx.com domain(a|b)*\\.com matches domain.com , domainaaaa.com domainbbb.com but not domainab.com (any number of a or b in between domain and .com )","title":"Alternations (|)"},{"location":"ftldns/regex/tutorial/#character-classes-class","text":"In addition to character groups, there are also some special character classes available, such as Character class Group equivalent Interpretation [:digit:] [0-9] matches digits [:lower:] [a-z] matched lowercase letters [:upper:] [A-Z] matched uppercase letters [:alpha:] [A-Za-z] matches alphabetic characters [:alnum:] [A-Za-z0-9] matches alphabetic characters and digits","title":"Character classes ([:class:])"},{"location":"ftldns/regex/tutorial/#advanced-examples","text":"After going through our quick tutorial, we provide some more advanced examples so you can test your knowledge.","title":"Advanced examples"},{"location":"ftldns/regex/tutorial/#block-domain-with-only-numbers","text":"^[0-9][^a-z]+\\.((com)|(edu))$ Blocks domains containing only numbers (no letters) and ending in .com or .edu . Blocks 555661.com , and 456.edu , but not 555g555.com","title":"Block domain with only numbers"},{"location":"ftldns/regex/tutorial/#block-domains-without-subdomains","text":"^[a-z0-9]+([\\-]{1}[a-z0-9]+)*\\.[a-z]{2,7}$ A domain name shall not start or end with a dash but can contain any number of them. It must be followed by a TLD (we assume a valid TLD length of two to seven characters)","title":"Block domains without subdomains"},{"location":"ftldns/regex/tutorial/#cheatsheet","text":"Expression Meaning Example ^ Beginning of string ^client matches strings that begin with client , such as client.server.com but not more.client.server.com (exception: within a character range ( [] ) ^ means negation) $ End of string ing$ matches exciting but not ingenious * Match zero or more of the previous ah* matches ahhhhh or a ? Match zero or one of the previous ah? matches a or ah + Match one or more of the previous ah+ matches ah or ahhh but not a . Wildcard character, matches any character do.* matches do , dog , door , dot , etc.; do.+ matches dog , door , dot , etc. but not do (wildcard with + requires at least one extra character for matching) ( ) Group Enclose regular expressions, see the example for | | Alternation (mon|tues)day matches monday or tuesday but not friday or mondiag [ ] Matches a range of characters [cbf]ar matches car , bar , or far ; [^] Negation [^0-9] matches any character except 0 to 9 { } Matches a specified number of occurrences of the previous [0-9]{3} matches any three-digit number like 315 but not 31 ; [0-9]{2,4} matches two- to four-digit numbers like 12 , 123 , and 1234 but not 1 or 12345 ; [0-9]{2,} matches any number with two or more digits like 1234567 , 123456789 , but not 1 \\ Used to escape a special character not inside [] google\\.com matches google.com","title":"Cheatsheet"},{"location":"guides/benchmark/","text":"Realistic benchmarking of your Pi-hole \u00b6 If you want to know how many queries - using the given hardware - your Pi-hole can handle to, e.g., estimate how many clients could be served, you could mass query domains from your long-term database. As the domains in the long-term database reflect your particular real-life usage, a benchmark on these domains should give you a good feeling for the performance of your Pi-hole. 1. Extract the domains from the long-term database \u00b6 You can extract the domains using, e.g., sqlite3 /etc/pihole/pihole-FTL.db \"SELECT domain FROM queries LIMIT 100000;\" > domains.list This will generate a list file with up to 100,000 domains. You can increase the upper limit of domains, however, we suggest starting from a small number of domains to get realistic results in a reasonable period of time. They are extracted into the list file as they are recorded in the database. There will be lots of frequently queried domains (maybe google.com or similar) as well as some blocked ad domains. This list will serve you as an individualized testing bench for realistic DNS queries as typically seen in your particular environment . 2. Optimize Pi-hole setting for benchmarking \u00b6 2.1 Disable logging \u00b6 We suggest disabling both logging and the long-term database during the benchmark run as both the log file and the database would otherwise unnecessarily grow, several hundred megabytes may be possible. Not only would your statistics be distorted by the artificial mass querying, but the benchmark could also be negatively affected by the writing speed of your SD card. Logging can be disabled using sudo pihole logging off . The long-term database can be disabled by setting DBFILE= in /etc/pihole/pihole-FTL.conf and running sudo pihole restartdns (see also here ). 2.2 Increase DNS cache size \u00b6 We also suggest increasing the DNS cache for benchmarking. The rather low value is fine for typical use cases. Domains will expire at some point and make room for new domains. As the benchmark will artificially increase the querying rate, there will be no time for the domains to expire naturally. This would dramatically hit the caching performance while you would never see such performance penalties in real use cases. Set cache-size to a rather high value (maybe 25,000 - by guess roughly one-eighth to one-fourth number of the domains you extracted from the database in step 1) in /etc/dnsmasq.d/01-pihole.conf and run sudo pihole restartdns afterward. 3. Query domains from the list \u00b6 Use time dig -f domains.list +noall +answer > /dev/null for mass querying the domains from your list. This will show you how much time it takes to query the number of domains you extracted from the database.","title":"Benchmarking"},{"location":"guides/benchmark/#realistic-benchmarking-of-your-pi-hole","text":"If you want to know how many queries - using the given hardware - your Pi-hole can handle to, e.g., estimate how many clients could be served, you could mass query domains from your long-term database. As the domains in the long-term database reflect your particular real-life usage, a benchmark on these domains should give you a good feeling for the performance of your Pi-hole.","title":"Realistic benchmarking of your Pi-hole"},{"location":"guides/benchmark/#1-extract-the-domains-from-the-long-term-database","text":"You can extract the domains using, e.g., sqlite3 /etc/pihole/pihole-FTL.db \"SELECT domain FROM queries LIMIT 100000;\" > domains.list This will generate a list file with up to 100,000 domains. You can increase the upper limit of domains, however, we suggest starting from a small number of domains to get realistic results in a reasonable period of time. They are extracted into the list file as they are recorded in the database. There will be lots of frequently queried domains (maybe google.com or similar) as well as some blocked ad domains. This list will serve you as an individualized testing bench for realistic DNS queries as typically seen in your particular environment .","title":"1. Extract the domains from the long-term database"},{"location":"guides/benchmark/#2-optimize-pi-hole-setting-for-benchmarking","text":"","title":"2. Optimize Pi-hole setting for benchmarking"},{"location":"guides/benchmark/#21-disable-logging","text":"We suggest disabling both logging and the long-term database during the benchmark run as both the log file and the database would otherwise unnecessarily grow, several hundred megabytes may be possible. Not only would your statistics be distorted by the artificial mass querying, but the benchmark could also be negatively affected by the writing speed of your SD card. Logging can be disabled using sudo pihole logging off . The long-term database can be disabled by setting DBFILE= in /etc/pihole/pihole-FTL.conf and running sudo pihole restartdns (see also here ).","title":"2.1 Disable logging"},{"location":"guides/benchmark/#22-increase-dns-cache-size","text":"We also suggest increasing the DNS cache for benchmarking. The rather low value is fine for typical use cases. Domains will expire at some point and make room for new domains. As the benchmark will artificially increase the querying rate, there will be no time for the domains to expire naturally. This would dramatically hit the caching performance while you would never see such performance penalties in real use cases. Set cache-size to a rather high value (maybe 25,000 - by guess roughly one-eighth to one-fourth number of the domains you extracted from the database in step 1) in /etc/dnsmasq.d/01-pihole.conf and run sudo pihole restartdns afterward.","title":"2.2 Increase DNS cache size"},{"location":"guides/benchmark/#3-query-domains-from-the-list","text":"Use time dig -f domains.list +noall +answer > /dev/null for mass querying the domains from your list. This will show you how much time it takes to query the number of domains you extracted from the database.","title":"3. Query domains from the list"},{"location":"guides/caddy-configuration/","text":"This is an unsupported configuration created by the community If you'd like to use Caddy as your main web server with Pi-hole, you'll need to make a few changes. Note: This guide only deals with setting up caddy as a reverse-proxy and not as a replacement for lighttpd (Although caddy is capable of doing so, but it is beyond the scope of this guide). Modifying lighttpd configuration \u00b6 First, change the listen port in this file: /etc/lighttpd/lighttpd.conf: server.port = 1080 In this case, port 1080 was chosen at random. You can use a custom port. Next, restart the lighttpd server with either of these commands: sudo systemctl restart lighttpd or sudo service lighttpd restart Installing Caddy \u00b6 Follow the instructions on the Caddy download documentation page. Setting up your Caddyfile \u00b6 Now set up a \"virtual host\" in your Caddyfile (default /etc/caddy/Caddyfile ). There are many options you can add, but at a minimum, you need to make a \"default\" host by binding :80 . This will accept requests for any interface on port 80 . Caddyfile (for Caddy v2) \u00b6 http://pi.hole { reverse_proxy localhost:1080 } If you'd like to enable HTTPS on your site, make sure your server is reachable via your domain name (ex: myawesomesite.com) and is pointing to the right IP address. Additionally you need to open ports :80 and :443 (Apart from the one's required specifically for pi-hole) for your server before setting up HTTPS. The following configuration will automatically fetch and setup HTTPS for your domain using Lets-Encrypt myawesomesite.com { reverse_proxy localhost:1080 } Additionally you can make pihole reacheable via a subdomain and optionally can you enable Zstandard and Gzip compression as follows: pihole.myawesomesite.com { reverse_proxy localhost:1080 encode zstd gzip } Finally, run sudo systemctl caddy reload to reload Caddy with the new configuration. Caddyfile (for Caddy v1) \u00b6 Caddy v1 is no longer actively supported, but the following is a config example if you're running an old installation. blackhole:80, pi.hole:80, 0.0.0.0:80 { root /var/www/html/pihole log /var/log/caddy/blackhole.log rewrite { ext js to index.js } proxy / localhost:1080 { transparent } } In this example, blackhole and pi.hole are added as valid names with which to open the admin page. Verifying your setup \u00b6 First, make sure that any other sites you're serving from caddy are still functioning. For example, if you have a block for myawesomesite.com:80 or similar in your Caddyfile, open up a browser to http://myawesomesite.com (or https:// if you have enabled it) and verify it still loads. Next, verify you can load the admin page. Open up http://pi.hole/admin (or use the IP address of your server) and verify that you can access the admin page. Finally, verify that requests for ads are being black holed: $ curl -H \"Host: badhost\" pi.hole/ <html> <head> <script>window.close();</script> </head> <body> </body> </html> Replace the URL pi.hole with the IP address or alternate DNS name you're using if necessary. Lastly, ensure that requests for JavaScript files from advertisement domains are being served properly: curl -H \"Host: badhost\" pi.hole/malicious.js var x = \"Pi-hole: A black hole for Internet advertisements.\" For more information visit Caddy's documentation website . For usage questions or support, visit the Caddy Community forums .","title":"Configuring Caddy for Pi-hole"},{"location":"guides/caddy-configuration/#modifying-lighttpd-configuration","text":"First, change the listen port in this file: /etc/lighttpd/lighttpd.conf: server.port = 1080 In this case, port 1080 was chosen at random. You can use a custom port. Next, restart the lighttpd server with either of these commands: sudo systemctl restart lighttpd or sudo service lighttpd restart","title":"Modifying lighttpd configuration"},{"location":"guides/caddy-configuration/#installing-caddy","text":"Follow the instructions on the Caddy download documentation page.","title":"Installing Caddy"},{"location":"guides/caddy-configuration/#setting-up-your-caddyfile","text":"Now set up a \"virtual host\" in your Caddyfile (default /etc/caddy/Caddyfile ). There are many options you can add, but at a minimum, you need to make a \"default\" host by binding :80 . This will accept requests for any interface on port 80 .","title":"Setting up your Caddyfile"},{"location":"guides/caddy-configuration/#caddyfile-for-caddy-v2","text":"http://pi.hole { reverse_proxy localhost:1080 } If you'd like to enable HTTPS on your site, make sure your server is reachable via your domain name (ex: myawesomesite.com) and is pointing to the right IP address. Additionally you need to open ports :80 and :443 (Apart from the one's required specifically for pi-hole) for your server before setting up HTTPS. The following configuration will automatically fetch and setup HTTPS for your domain using Lets-Encrypt myawesomesite.com { reverse_proxy localhost:1080 } Additionally you can make pihole reacheable via a subdomain and optionally can you enable Zstandard and Gzip compression as follows: pihole.myawesomesite.com { reverse_proxy localhost:1080 encode zstd gzip } Finally, run sudo systemctl caddy reload to reload Caddy with the new configuration.","title":"Caddyfile (for Caddy v2)"},{"location":"guides/caddy-configuration/#caddyfile-for-caddy-v1","text":"Caddy v1 is no longer actively supported, but the following is a config example if you're running an old installation. blackhole:80, pi.hole:80, 0.0.0.0:80 { root /var/www/html/pihole log /var/log/caddy/blackhole.log rewrite { ext js to index.js } proxy / localhost:1080 { transparent } } In this example, blackhole and pi.hole are added as valid names with which to open the admin page.","title":"Caddyfile (for Caddy v1)"},{"location":"guides/caddy-configuration/#verifying-your-setup","text":"First, make sure that any other sites you're serving from caddy are still functioning. For example, if you have a block for myawesomesite.com:80 or similar in your Caddyfile, open up a browser to http://myawesomesite.com (or https:// if you have enabled it) and verify it still loads. Next, verify you can load the admin page. Open up http://pi.hole/admin (or use the IP address of your server) and verify that you can access the admin page. Finally, verify that requests for ads are being black holed: $ curl -H \"Host: badhost\" pi.hole/ <html> <head> <script>window.close();</script> </head> <body> </body> </html> Replace the URL pi.hole with the IP address or alternate DNS name you're using if necessary. Lastly, ensure that requests for JavaScript files from advertisement domains are being served properly: curl -H \"Host: badhost\" pi.hole/malicious.js var x = \"Pi-hole: A black hole for Internet advertisements.\" For more information visit Caddy's documentation website . For usage questions or support, visit the Caddy Community forums .","title":"Verifying your setup"},{"location":"guides/dns-over-https/","text":"Why use DNS-Over-HTTPS? \u00b6 DNS-Over-HTTPS is a protocol for performing DNS lookups via the same protocol you use to browse the web securely: HTTPS . With standard DNS, requests are sent in plain-text, with no method to detect tampering or misbehavior. This means that not only can a malicious actor look at all the DNS requests you are making (and therefore what websites you are visiting), they can also tamper with the response and redirect your device to resources in their control (such as a fake login page for internet banking). DNS-Over-HTTPS prevents this by using standard HTTPS requests to retrieve DNS information. This means that the connection from the device to the DNS server is secure and can not easily be snooped, monitored, tampered with or blocked. It is worth noting, however, that the upstream DNS-Over-HTTPS provider will still have this ability. Configuring DNS-Over-HTTPS \u00b6 Along with releasing their DNS service 1.1.1.1 , Cloudflare implemented DNS-Over-HTTPS proxy functionality into one of their tools: cloudflared . In the following sections, we will be covering how to install and configure this tool on Pi-hole . Installing cloudflared \u00b6 The installation is fairly straightforward, however, be aware of what architecture you are installing on ( amd64 or arm ). AMD64 architecture (most devices) \u00b6 Download the installer package, then use apt-get to install the package along with any dependencies. Proceed to run the binary with the -v flag to check it is all working: # For Debian/Ubuntu wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.deb sudo apt-get install ./cloudflared-stable-linux-amd64.deb cloudflared -v # For CentOS/RHEL/Fedora wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.rpm sudo yum install ./cloudflared-stable-linux-amd64.rpm cloudflared -v Note: Binaries for other operating systems can be found here: https://developers.cloudflare.com/argo-tunnel/downloads/ ARM architecture (Raspberry Pi) \u00b6 Here we are downloading the precompiled binary and copying it to the /usr/local/bin/ directory to allow execution by the cloudflared user. Proceed to run the binary with the -v flag to check it is all working: wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz tar -xvzf cloudflared-stable-linux-arm.tgz sudo cp ./cloudflared /usr/local/bin sudo chmod +x /usr/local/bin/cloudflared cloudflared -v Configuring cloudflared to run on startup \u00b6 Manual way \u00b6 Create a cloudflared user to run the daemon: sudo useradd -s /usr/sbin/nologin -r -M cloudflared Proceed to create a configuration file for cloudflared : sudo nano /etc/default/cloudflared Edit configuration file by copying the following in to /etc/default/cloudflared . This file contains the command-line options that get passed to cloudflared on startup: # Commandline args for cloudflared CLOUDFLARED_OPTS = --port 5053 --upstream https://1.1.1.1/dns-query --upstream https://1.0.0.1/dns-query Update the permissions for the configuration file and cloudflared binary to allow access for the cloudflared user: sudo chown cloudflared:cloudflared /etc/default/cloudflared sudo chown cloudflared:cloudflared /usr/local/bin/cloudflared Then create the systemd script by copying the following into /etc/systemd/system/cloudflared.service . This will control the running of the service and allow it to run on startup: sudo nano /etc/systemd/system/cloudflared.service [Unit] Description = cloudflared DNS over HTTPS proxy After = syslog.target network-online.target [Service] Type = simple User = cloudflared EnvironmentFile = /etc/default/cloudflared ExecStart = /usr/local/bin/cloudflared proxy-dns $CLOUDFLARED_OPTS Restart = on-failure RestartSec = 10 KillMode = process [Install] WantedBy = multi-user.target Enable the systemd service to run on startup, then start the service and check its status: sudo systemctl enable cloudflared sudo systemctl start cloudflared sudo systemctl status cloudflared Automatic way \u00b6 Warning Keep in mind that this will install cloudflared as root. Proceed to create a configuration file for cloudflared in /etc/cloudflared named config.yml : sudo mkdir /etc/cloudflared/ sudo nano /etc/cloudflared/config.yml Copy the following configuration: proxy-dns : true proxy-dns-port : 5053 proxy-dns-upstream : - https://1.1.1.1/dns-query - https://1.0.0.1/dns-query Now install the service via cloudflared 's service command : sudo cloudflared service install Start the systemd service and check its status: sudo systemctl start cloudflared sudo systemctl status cloudflared Now test that it is working! Run the following dig command, a response should be returned similar to the one below: pi@raspberrypi:~ $ dig @127.0.0.1 -p 5053 google.com ; <<>> DiG 9.11.5-P4-5.1-Raspbian <<>> @127.0.0.1 -p 5053 google.com ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 12157 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 22179adb227cd67b (echoed) ;; QUESTION SECTION: ;google.com. IN A ;; ANSWER SECTION: google.com. 191 IN A 172.217.22.14 ;; Query time: 0 msec ;; SERVER: 127.0.0.1#5053(127.0.0.1) ;; WHEN: Wed Dec 04 09:29:50 EET 2019 ;; MSG SIZE rcvd: 77 Configuring Pi-hole \u00b6 Finally, configure Pi-hole to use the local cloudflared service as the upstream DNS server by specifying 127.0.0.1#5053 as the Custom DNS (IPv4): (don't forget to hit Return or click on Save ) Updating cloudflared \u00b6 Manual way \u00b6 wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz tar -xvzf cloudflared-stable-linux-arm.tgz sudo systemctl stop cloudflared sudo cp ./cloudflared /usr/local/bin sudo chmod +x /usr/local/bin/cloudflared sudo systemctl start cloudflared cloudflared -v sudo systemctl status cloudflared Automatic way \u00b6 sudo cloudflared update sudo systemctl restart cloudflared Uninstalling cloudflared \u00b6 If installed the manual way \u00b6 Courtesy of https://discourse.pi-hole.net/t/uninstall-cloudflare/21459/3 sudo systemctl stop cloudflared sudo systemctl disable cloudflared sudo systemctl daemon-reload sudo deluser cloudflared sudo rm /etc/default/cloudflared sudo rm /etc/systemd/system/cloudflared.service sudo rm /usr/local/bin/cloudflared If installed with cloudflare service install \u00b6 sudo cloudflared service uninstall sudo systemctl daemon-reload After the above, don't forget to change the DNS back to something else in Pi-hole's DNS settings! Based on this guide by Ben Dews | bendews.com \u21a9","title":"Configuring DNS-Over-HTTPS on Pi-hole"},{"location":"guides/dns-over-https/#why-use-dns-over-https","text":"DNS-Over-HTTPS is a protocol for performing DNS lookups via the same protocol you use to browse the web securely: HTTPS . With standard DNS, requests are sent in plain-text, with no method to detect tampering or misbehavior. This means that not only can a malicious actor look at all the DNS requests you are making (and therefore what websites you are visiting), they can also tamper with the response and redirect your device to resources in their control (such as a fake login page for internet banking). DNS-Over-HTTPS prevents this by using standard HTTPS requests to retrieve DNS information. This means that the connection from the device to the DNS server is secure and can not easily be snooped, monitored, tampered with or blocked. It is worth noting, however, that the upstream DNS-Over-HTTPS provider will still have this ability.","title":"Why use DNS-Over-HTTPS?"},{"location":"guides/dns-over-https/#configuring-dns-over-https","text":"Along with releasing their DNS service 1.1.1.1 , Cloudflare implemented DNS-Over-HTTPS proxy functionality into one of their tools: cloudflared . In the following sections, we will be covering how to install and configure this tool on Pi-hole .","title":"Configuring DNS-Over-HTTPS"},{"location":"guides/dns-over-https/#installing-cloudflared","text":"The installation is fairly straightforward, however, be aware of what architecture you are installing on ( amd64 or arm ).","title":"Installing cloudflared"},{"location":"guides/dns-over-https/#amd64-architecture-most-devices","text":"Download the installer package, then use apt-get to install the package along with any dependencies. Proceed to run the binary with the -v flag to check it is all working: # For Debian/Ubuntu wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.deb sudo apt-get install ./cloudflared-stable-linux-amd64.deb cloudflared -v # For CentOS/RHEL/Fedora wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.rpm sudo yum install ./cloudflared-stable-linux-amd64.rpm cloudflared -v Note: Binaries for other operating systems can be found here: https://developers.cloudflare.com/argo-tunnel/downloads/","title":"AMD64 architecture (most devices)"},{"location":"guides/dns-over-https/#arm-architecture-raspberry-pi","text":"Here we are downloading the precompiled binary and copying it to the /usr/local/bin/ directory to allow execution by the cloudflared user. Proceed to run the binary with the -v flag to check it is all working: wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz tar -xvzf cloudflared-stable-linux-arm.tgz sudo cp ./cloudflared /usr/local/bin sudo chmod +x /usr/local/bin/cloudflared cloudflared -v","title":"ARM architecture (Raspberry Pi)"},{"location":"guides/dns-over-https/#configuring-cloudflared-to-run-on-startup","text":"","title":"Configuring cloudflared to run on startup"},{"location":"guides/dns-over-https/#manual-way","text":"Create a cloudflared user to run the daemon: sudo useradd -s /usr/sbin/nologin -r -M cloudflared Proceed to create a configuration file for cloudflared : sudo nano /etc/default/cloudflared Edit configuration file by copying the following in to /etc/default/cloudflared . This file contains the command-line options that get passed to cloudflared on startup: # Commandline args for cloudflared CLOUDFLARED_OPTS = --port 5053 --upstream https://1.1.1.1/dns-query --upstream https://1.0.0.1/dns-query Update the permissions for the configuration file and cloudflared binary to allow access for the cloudflared user: sudo chown cloudflared:cloudflared /etc/default/cloudflared sudo chown cloudflared:cloudflared /usr/local/bin/cloudflared Then create the systemd script by copying the following into /etc/systemd/system/cloudflared.service . This will control the running of the service and allow it to run on startup: sudo nano /etc/systemd/system/cloudflared.service [Unit] Description = cloudflared DNS over HTTPS proxy After = syslog.target network-online.target [Service] Type = simple User = cloudflared EnvironmentFile = /etc/default/cloudflared ExecStart = /usr/local/bin/cloudflared proxy-dns $CLOUDFLARED_OPTS Restart = on-failure RestartSec = 10 KillMode = process [Install] WantedBy = multi-user.target Enable the systemd service to run on startup, then start the service and check its status: sudo systemctl enable cloudflared sudo systemctl start cloudflared sudo systemctl status cloudflared","title":"Manual way"},{"location":"guides/dns-over-https/#automatic-way","text":"Warning Keep in mind that this will install cloudflared as root. Proceed to create a configuration file for cloudflared in /etc/cloudflared named config.yml : sudo mkdir /etc/cloudflared/ sudo nano /etc/cloudflared/config.yml Copy the following configuration: proxy-dns : true proxy-dns-port : 5053 proxy-dns-upstream : - https://1.1.1.1/dns-query - https://1.0.0.1/dns-query Now install the service via cloudflared 's service command : sudo cloudflared service install Start the systemd service and check its status: sudo systemctl start cloudflared sudo systemctl status cloudflared Now test that it is working! Run the following dig command, a response should be returned similar to the one below: pi@raspberrypi:~ $ dig @127.0.0.1 -p 5053 google.com ; <<>> DiG 9.11.5-P4-5.1-Raspbian <<>> @127.0.0.1 -p 5053 google.com ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 12157 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: 22179adb227cd67b (echoed) ;; QUESTION SECTION: ;google.com. IN A ;; ANSWER SECTION: google.com. 191 IN A 172.217.22.14 ;; Query time: 0 msec ;; SERVER: 127.0.0.1#5053(127.0.0.1) ;; WHEN: Wed Dec 04 09:29:50 EET 2019 ;; MSG SIZE rcvd: 77","title":"Automatic way"},{"location":"guides/dns-over-https/#configuring-pi-hole","text":"Finally, configure Pi-hole to use the local cloudflared service as the upstream DNS server by specifying 127.0.0.1#5053 as the Custom DNS (IPv4): (don't forget to hit Return or click on Save )","title":"Configuring Pi-hole"},{"location":"guides/dns-over-https/#updating-cloudflared","text":"","title":"Updating cloudflared"},{"location":"guides/dns-over-https/#manual-way_1","text":"wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz tar -xvzf cloudflared-stable-linux-arm.tgz sudo systemctl stop cloudflared sudo cp ./cloudflared /usr/local/bin sudo chmod +x /usr/local/bin/cloudflared sudo systemctl start cloudflared cloudflared -v sudo systemctl status cloudflared","title":"Manual way"},{"location":"guides/dns-over-https/#automatic-way_1","text":"sudo cloudflared update sudo systemctl restart cloudflared","title":"Automatic way"},{"location":"guides/dns-over-https/#uninstalling-cloudflared","text":"","title":"Uninstalling cloudflared"},{"location":"guides/dns-over-https/#if-installed-the-manual-way","text":"Courtesy of https://discourse.pi-hole.net/t/uninstall-cloudflare/21459/3 sudo systemctl stop cloudflared sudo systemctl disable cloudflared sudo systemctl daemon-reload sudo deluser cloudflared sudo rm /etc/default/cloudflared sudo rm /etc/systemd/system/cloudflared.service sudo rm /usr/local/bin/cloudflared","title":"If installed the manual way"},{"location":"guides/dns-over-https/#if-installed-with-cloudflare-service-install","text":"sudo cloudflared service uninstall sudo systemctl daemon-reload After the above, don't forget to change the DNS back to something else in Pi-hole's DNS settings! Based on this guide by Ben Dews | bendews.com \u21a9","title":"If installed with cloudflare service install"},{"location":"guides/nginx-configuration/","text":"Notes & Warnings \u00b6 This is an unsupported configuration created by the community Replace 7.3 with the PHP version you installed, e.g. if you're using Raspbian Stretch (Debian 9) replace 7.3 with 7.0 . The php7.3-sqlite3 package must be installed otherwise Networking and Querying will throw an error that it can't access the database. Basic requirements \u00b6 Stop default lighttpd service lighttpd stop Install necessary packages apt-get -y install nginx php7.3-fpm php7.3-xml php7.3-sqlite3 php7.3-intl apache2-utils Disable lighttpd at startup systemctl disable lighttpd Enable php7.3-fpm at startup systemctl enable php7.3-fpm Enable nginx at startup systemctl enable nginx Edit /etc/nginx/sites-available/default to: server { listen 80 default_server ; listen [::]:80 default_server ; root /var/www/html ; server_name _ ; autoindex off ; index pihole/index.php index.php index.html index.htm ; location / { expires max ; try_files $uri $uri/ = 404 ; } location ~ \\.php$ { include fastcgi_params ; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name ; fastcgi_pass unix:/run/php/php7.3-fpm.sock ; fastcgi_param FQDN true ; auth_basic \"Restricted\" ; # For Basic Auth auth_basic_user_file /etc/nginx/.htpasswd ; # For Basic Auth } location /*.js { index pihole/index.js ; auth_basic \"Restricted\" ; # For Basic Auth auth_basic_user_file /etc/nginx/.htpasswd ; # For Basic Auth } location /admin { root /var/www/html ; index index.php index.html index.htm ; auth_basic \"Restricted\" ; # For Basic Auth auth_basic_user_file /etc/nginx/.htpasswd ; # For Basic Auth } location ~ /\\.ht { deny all ; } } Create a username for authentication for the admin - we don't want other people in our network change our black and whitelist ;) htpasswd -c /etc/nginx/.htpasswd exampleuser Change ownership of the html directory to nginx user chown -R www-data:www-data /var/www/html Make sure the html directory is writable chmod -R 755 /var/www/html Grant the admin panel access to the gravity database usermod -aG pihole www-data Start php7.3-fpm daemon service php7.3-fpm start Start nginx web server service nginx start Optional configuration \u00b6 If you want to use your custom domain to access admin page (e.g.: http://mydomain.internal/admin/settings.php instead of http://pi.hole/admin/settings.php ), make sure mydomain.internal is assigned to server_name in /etc/nginx/sites-available/default . E.g.: server_name mydomain.internal; If you want to use block page for any blocked domain subpage (aka Nginx 404), add this to Pi-hole server block in your Nginx configuration file: error_page 404 /pihole/index.php ; When using nginx to serve Pi-hole, Let's Encrypt can be used to directly configure nginx. Make sure to use your hostname instead of _ in server_name _; line above. add-apt-repository ppa:certbot/certbot apt-get install certbot python-certbot-nginx certbot --nginx -m \" $email \" -d \" $domain \" -n --agree-tos --no-eff-email","title":"Configuring NGINX for Pi-hole"},{"location":"guides/nginx-configuration/#notes-warnings","text":"This is an unsupported configuration created by the community Replace 7.3 with the PHP version you installed, e.g. if you're using Raspbian Stretch (Debian 9) replace 7.3 with 7.0 . The php7.3-sqlite3 package must be installed otherwise Networking and Querying will throw an error that it can't access the database.","title":"Notes &amp; Warnings"},{"location":"guides/nginx-configuration/#basic-requirements","text":"Stop default lighttpd service lighttpd stop Install necessary packages apt-get -y install nginx php7.3-fpm php7.3-xml php7.3-sqlite3 php7.3-intl apache2-utils Disable lighttpd at startup systemctl disable lighttpd Enable php7.3-fpm at startup systemctl enable php7.3-fpm Enable nginx at startup systemctl enable nginx Edit /etc/nginx/sites-available/default to: server { listen 80 default_server ; listen [::]:80 default_server ; root /var/www/html ; server_name _ ; autoindex off ; index pihole/index.php index.php index.html index.htm ; location / { expires max ; try_files $uri $uri/ = 404 ; } location ~ \\.php$ { include fastcgi_params ; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name ; fastcgi_pass unix:/run/php/php7.3-fpm.sock ; fastcgi_param FQDN true ; auth_basic \"Restricted\" ; # For Basic Auth auth_basic_user_file /etc/nginx/.htpasswd ; # For Basic Auth } location /*.js { index pihole/index.js ; auth_basic \"Restricted\" ; # For Basic Auth auth_basic_user_file /etc/nginx/.htpasswd ; # For Basic Auth } location /admin { root /var/www/html ; index index.php index.html index.htm ; auth_basic \"Restricted\" ; # For Basic Auth auth_basic_user_file /etc/nginx/.htpasswd ; # For Basic Auth } location ~ /\\.ht { deny all ; } } Create a username for authentication for the admin - we don't want other people in our network change our black and whitelist ;) htpasswd -c /etc/nginx/.htpasswd exampleuser Change ownership of the html directory to nginx user chown -R www-data:www-data /var/www/html Make sure the html directory is writable chmod -R 755 /var/www/html Grant the admin panel access to the gravity database usermod -aG pihole www-data Start php7.3-fpm daemon service php7.3-fpm start Start nginx web server service nginx start","title":"Basic requirements"},{"location":"guides/nginx-configuration/#optional-configuration","text":"If you want to use your custom domain to access admin page (e.g.: http://mydomain.internal/admin/settings.php instead of http://pi.hole/admin/settings.php ), make sure mydomain.internal is assigned to server_name in /etc/nginx/sites-available/default . E.g.: server_name mydomain.internal; If you want to use block page for any blocked domain subpage (aka Nginx 404), add this to Pi-hole server block in your Nginx configuration file: error_page 404 /pihole/index.php ; When using nginx to serve Pi-hole, Let's Encrypt can be used to directly configure nginx. Make sure to use your hostname instead of _ in server_name _; line above. add-apt-repository ppa:certbot/certbot apt-get install certbot python-certbot-nginx certbot --nginx -m \" $email \" -d \" $domain \" -n --agree-tos --no-eff-email","title":"Optional configuration"},{"location":"guides/traefik-configuration-nodocker/","text":"Notes & Warnings \u00b6 This is an unsupported configuration created by the community This describes how to use traefik on a (possibly remote) machine to serve pi-hole via https and a different domain, not how to do this in docker (via docker-compose). Basic requirements \u00b6 Have a traefik server running anywhere where it can access port 80 of the pihole server. Technically it can run in a docker container though. For LetsEncrypt to work traefik must be reachable on port 80 and 443 from the internet and have the domain.tld pointed at its external address. The following traefik config (traefik.toml) debug = false checkNewVersion = true logLevel = \"INFO\" defaultEntryPoints = [\"https\",\"http\"] [entryPoints] [entryPoints.http] address = \":80\" [entryPoints.http.redirect] entryPoint = \"https\" [entryPoints.https] address = \":443\" [entryPoints.https.tls] # Optional Security Settings [retry] [docker] endpoint = \"unix:///var/run/docker.sock\" domain = \"domain.tld\" watch = true exposedbydefault = false [acme] email = \"emailForLetsEncryptACME\" storage = \"acme.json\" storageFile = \"/etc/traefik/acme/acme.json\" entryPoint = \"https\" OnHostRule = true [acme.tlsChallenge] [[acme.domains]] main = \"pihole.domain.tld\" [file] watch = true [backends] [backends.pihole] [backends.pihole.servers.server1] url = \"http://IP-Of-Pihole:80\" [frontends] [frontends.pihole] backend = \"pihole\" passHostHeader = true [frontends.pihole.headers] STSSeconds = 31536000 [frontends.pihole.routes.route1] rule = \"Host:pihole.domain.tld\" Edit your /etc/lighthttpd/external.conf to $SERVER [ \"socket\" ] == \":80\" { # Ensure the Pi-hole Block Page knows that this is not a blocked domain setenv.add-environment = ( \"fqdn\" => \"true\" ) $HTTP [ \"host\" ] =~ \"^pi\\.hole\" { url.redirect = ( \"^/(.*)\" => \"https://pihole.domain.tld/$1\" ) } } Restart pi-hole's lighttpd and traefik, then you should be able to access your pihole via https://pihole.domain.tld/","title":"Configuring Traefik for Pi-hole (not in Docker)"},{"location":"guides/traefik-configuration-nodocker/#notes-warnings","text":"This is an unsupported configuration created by the community This describes how to use traefik on a (possibly remote) machine to serve pi-hole via https and a different domain, not how to do this in docker (via docker-compose).","title":"Notes &amp; Warnings"},{"location":"guides/traefik-configuration-nodocker/#basic-requirements","text":"Have a traefik server running anywhere where it can access port 80 of the pihole server. Technically it can run in a docker container though. For LetsEncrypt to work traefik must be reachable on port 80 and 443 from the internet and have the domain.tld pointed at its external address. The following traefik config (traefik.toml) debug = false checkNewVersion = true logLevel = \"INFO\" defaultEntryPoints = [\"https\",\"http\"] [entryPoints] [entryPoints.http] address = \":80\" [entryPoints.http.redirect] entryPoint = \"https\" [entryPoints.https] address = \":443\" [entryPoints.https.tls] # Optional Security Settings [retry] [docker] endpoint = \"unix:///var/run/docker.sock\" domain = \"domain.tld\" watch = true exposedbydefault = false [acme] email = \"emailForLetsEncryptACME\" storage = \"acme.json\" storageFile = \"/etc/traefik/acme/acme.json\" entryPoint = \"https\" OnHostRule = true [acme.tlsChallenge] [[acme.domains]] main = \"pihole.domain.tld\" [file] watch = true [backends] [backends.pihole] [backends.pihole.servers.server1] url = \"http://IP-Of-Pihole:80\" [frontends] [frontends.pihole] backend = \"pihole\" passHostHeader = true [frontends.pihole.headers] STSSeconds = 31536000 [frontends.pihole.routes.route1] rule = \"Host:pihole.domain.tld\" Edit your /etc/lighthttpd/external.conf to $SERVER [ \"socket\" ] == \":80\" { # Ensure the Pi-hole Block Page knows that this is not a blocked domain setenv.add-environment = ( \"fqdn\" => \"true\" ) $HTTP [ \"host\" ] =~ \"^pi\\.hole\" { url.redirect = ( \"^/(.*)\" => \"https://pihole.domain.tld/$1\" ) } } Restart pi-hole's lighttpd and traefik, then you should be able to access your pihole via https://pihole.domain.tld/","title":"Basic requirements"},{"location":"guides/unbound/","text":"The problem: Whom can you trust? \u00b6 Pi-hole includes a caching and forwarding DNS server, now known as FTL DNS. After applying the blocking lists, it forwards requests made by the clients to configured upstream DNS server(s). However, as has been mentioned by several users in the past, this leads to some privacy concerns as it ultimately raises the question: Whom can you trust? Recently, more and more small (and not so small) DNS upstream providers have appeared on the market, advertising free and private DNS service, but how can you know that they keep their promises? Right, you can't. Furthermore, from the point of an attacker, the DNS servers of larger providers are very worthwhile targets, as they only need to poison one DNS server, but millions of users might be affected. Instead of your bank's actual IP address, you could be sent to a phishing site hosted on some island. This scenario has already happened and it isn't unlikely to happen again... When you operate your own (tiny) recursive DNS server, then the likeliness of getting affected by such an attack is greatly reduced. What is a recursive DNS server? \u00b6 The first distinction we have to be aware of is whether a DNS server is authoritative or not. If I'm the authoritative server for, e.g., pi-hole.net , then I know which IP is the correct answer for a query. Recursive name servers, in contrast, resolve any query they receive by consulting the servers authoritative for this query by traversing the domain. Example: We want to resolve pi-hole.net . On behalf of the client, the recursive DNS server will traverse the path of the domain across the Internet to deliver the answer to the question. What does this guide provide? \u00b6 In only a few simple steps, we will describe how to set up your own recursive DNS server. It will run on the same device you're already using for your Pi-hole. There are no additional hardware requirements. This guide assumes a fairly recent Debian/Ubuntu-based system and will use the maintainer provided packages for installation to make it an incredibly simple process. It assumes only a very basic knowledge of how DNS work. A standard Pi-hole installation will do it as follows: Your client asks the Pi-hole Who is pi-hole.net ? Your Pi-hole will check its cache and reply if the answer is already known. Your Pi-hole will check the blocking lists and reply if the domain is blocked. Since neither 2. nor 3. is true in our example, the Pi-hole forwards the request to the configured external upstream DNS server(s). Upon receiving the answer, your Pi-hole will reply to your client and tell it the answer to its request. Lastly, your Pi-hole will save the answer in its cache to be able to respond faster if any of your clients queries the same domain again. After you set up your Pi-hole as described in this guide, this procedure changes notably: Your client asks the Pi-hole Who is pi-hole.net ? Your Pi-hole will check its cache and reply if the answer is already known. Your Pi-hole will check the blocking lists and reply if the domain is blocked. Since neither 2. nor 3. is true in our example, the Pi-hole delegates the request to the (local) recursive DNS resolver. Your recursive server will send a query to the DNS root servers: \"Who is handling .net ?\" The root server answers with a referral to the TLD servers for .net . Your recursive server will send a query to one of the TLD DNS servers for .net : \"Who is handling pi-hole.net ?\" The TLD server answers with a referral to the authoritative name servers for pi-hole.net . Your recursive server will send a query to the authoritative name servers: \"What is the IP of pi-hole.net ?\" The authoritative server will answer with the IP address of the domain pi-hole.net . Your recursive server will send the reply to your Pi-hole which will, in turn, reply to your client and tell it the answer to its request. Lastly, your Pi-hole will save the answer in its cache to be able to respond faster if any of your clients queries the same domain again. You can easily imagine even longer chains for subdomains as the query process continues until your recursive resolver reaches the authoritative server for the zone that contains the queried domain name. It is obvious that the methods are very different and the own recursion is more involved than \"just\" asking some upstream server. This has benefits and drawbacks: Benefit: Privacy - as you're directly contacting the responsive servers, no server can fully log the exact paths you're going, as e.g. the Google DNS servers will only be asked if you want to visit a Google website, but not if you visit the website of your favorite newspaper, etc. Drawback: Traversing the path may be slow, especially for the first time you visit a website - while the bigger DNS providers always have answers for commonly used domains in their cache, you will have to transverse the path if you visit a page for the first time. The first request to a formerly unknown TLD may take up to a second (or even more if you're also using DNSSEC). Subsequent requests to domains under the same TLD usually complete in < 0.1s . Fortunately, both your Pi-hole as well as your recursive server will be configured for efficient caching to minimize the number of queries that will actually have to be performed. Setting up Pi-hole as a recursive DNS server solution \u00b6 We will use unbound , a secure open-source recursive DNS server primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. The first thing you need to do is to install the recursive DNS resolver: sudo apt install unbound Important : Download the current root hints file (the list of primary root servers which are serving the domain \".\" - the root domain). Update it roughly every six months. Note that this file changes infrequently. wget -O root.hints https://www.internic.net/domain/named.root sudo mv root.hints /var/lib/unbound/ Configure unbound \u00b6 Highlights: Listen only for queries from the local Pi-hole installation (on port 5335) Listen for both UDP and TCP requests Verify DNSSEC signatures, discarding BOGUS domains Apply a few security and privacy tricks /etc/unbound/unbound.conf.d/pi-hole.conf : server: # If no logfile is specified, syslog is used # logfile: \"/var/log/unbound/unbound.log\" verbosity: 0 interface: 127.0.0.1 port: 5335 do-ip4: yes do-udp: yes do-tcp: yes # May be set to yes if you have IPv6 connectivity do-ip6: no # You want to leave this to no unless you have *native* IPv6. With 6to4 and # Terredo tunnels your web browser should favor IPv4 for the same reasons prefer-ip6: no # Use this only when you downloaded the list of primary root servers! root-hints: \"/var/lib/unbound/root.hints\" # Trust glue only if it is within the server's authority harden-glue: yes # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS harden-dnssec-stripped: yes # Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details use-caps-for-id: no # Reduce EDNS reassembly buffer size. # Suggested by the unbound man page to reduce fragmentation reassembly problems edns-buffer-size: 1472 # Perform prefetching of close to expired message cache entries # This only applies to domains that have been frequently queried prefetch: yes # One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1. num-threads: 1 # Ensure kernel buffer is large enough to not lose messages in traffic spikes so-rcvbuf: 1m # Ensure privacy of local IP ranges private-address: 192.168.0.0/16 private-address: 169.254.0.0/16 private-address: 172.16.0.0/12 private-address: 10.0.0.0/8 private-address: fd00::/8 private-address: fe80::/10 Start your local recursive server and test that it's operational: sudo service unbound start dig pi-hole.net @127.0.0.1 -p 5335 The first query may be quite slow, but subsequent queries, also to other domains under the same TLD, should be fairly quick. Test validation \u00b6 You can test DNSSEC validation using dig sigfail.verteiltesysteme.net @127.0.0.1 -p 5335 dig sigok.verteiltesysteme.net @127.0.0.1 -p 5335 The first command should give a status report of SERVFAIL and no IP address. The second should give NOERROR plus an IP address. Configure Pi-hole \u00b6 Finally, configure Pi-hole to use your recursive DNS server by specifying 127.0.0.1#5335 as the Custom DNS (IPv4): (don't forget to hit Return or click on Save )","title":"Pi-hole as All-Around DNS Solution"},{"location":"guides/unbound/#the-problem-whom-can-you-trust","text":"Pi-hole includes a caching and forwarding DNS server, now known as FTL DNS. After applying the blocking lists, it forwards requests made by the clients to configured upstream DNS server(s). However, as has been mentioned by several users in the past, this leads to some privacy concerns as it ultimately raises the question: Whom can you trust? Recently, more and more small (and not so small) DNS upstream providers have appeared on the market, advertising free and private DNS service, but how can you know that they keep their promises? Right, you can't. Furthermore, from the point of an attacker, the DNS servers of larger providers are very worthwhile targets, as they only need to poison one DNS server, but millions of users might be affected. Instead of your bank's actual IP address, you could be sent to a phishing site hosted on some island. This scenario has already happened and it isn't unlikely to happen again... When you operate your own (tiny) recursive DNS server, then the likeliness of getting affected by such an attack is greatly reduced.","title":"The problem: Whom can you trust?"},{"location":"guides/unbound/#what-is-a-recursive-dns-server","text":"The first distinction we have to be aware of is whether a DNS server is authoritative or not. If I'm the authoritative server for, e.g., pi-hole.net , then I know which IP is the correct answer for a query. Recursive name servers, in contrast, resolve any query they receive by consulting the servers authoritative for this query by traversing the domain. Example: We want to resolve pi-hole.net . On behalf of the client, the recursive DNS server will traverse the path of the domain across the Internet to deliver the answer to the question.","title":"What is a recursive DNS server?"},{"location":"guides/unbound/#what-does-this-guide-provide","text":"In only a few simple steps, we will describe how to set up your own recursive DNS server. It will run on the same device you're already using for your Pi-hole. There are no additional hardware requirements. This guide assumes a fairly recent Debian/Ubuntu-based system and will use the maintainer provided packages for installation to make it an incredibly simple process. It assumes only a very basic knowledge of how DNS work. A standard Pi-hole installation will do it as follows: Your client asks the Pi-hole Who is pi-hole.net ? Your Pi-hole will check its cache and reply if the answer is already known. Your Pi-hole will check the blocking lists and reply if the domain is blocked. Since neither 2. nor 3. is true in our example, the Pi-hole forwards the request to the configured external upstream DNS server(s). Upon receiving the answer, your Pi-hole will reply to your client and tell it the answer to its request. Lastly, your Pi-hole will save the answer in its cache to be able to respond faster if any of your clients queries the same domain again. After you set up your Pi-hole as described in this guide, this procedure changes notably: Your client asks the Pi-hole Who is pi-hole.net ? Your Pi-hole will check its cache and reply if the answer is already known. Your Pi-hole will check the blocking lists and reply if the domain is blocked. Since neither 2. nor 3. is true in our example, the Pi-hole delegates the request to the (local) recursive DNS resolver. Your recursive server will send a query to the DNS root servers: \"Who is handling .net ?\" The root server answers with a referral to the TLD servers for .net . Your recursive server will send a query to one of the TLD DNS servers for .net : \"Who is handling pi-hole.net ?\" The TLD server answers with a referral to the authoritative name servers for pi-hole.net . Your recursive server will send a query to the authoritative name servers: \"What is the IP of pi-hole.net ?\" The authoritative server will answer with the IP address of the domain pi-hole.net . Your recursive server will send the reply to your Pi-hole which will, in turn, reply to your client and tell it the answer to its request. Lastly, your Pi-hole will save the answer in its cache to be able to respond faster if any of your clients queries the same domain again. You can easily imagine even longer chains for subdomains as the query process continues until your recursive resolver reaches the authoritative server for the zone that contains the queried domain name. It is obvious that the methods are very different and the own recursion is more involved than \"just\" asking some upstream server. This has benefits and drawbacks: Benefit: Privacy - as you're directly contacting the responsive servers, no server can fully log the exact paths you're going, as e.g. the Google DNS servers will only be asked if you want to visit a Google website, but not if you visit the website of your favorite newspaper, etc. Drawback: Traversing the path may be slow, especially for the first time you visit a website - while the bigger DNS providers always have answers for commonly used domains in their cache, you will have to transverse the path if you visit a page for the first time. The first request to a formerly unknown TLD may take up to a second (or even more if you're also using DNSSEC). Subsequent requests to domains under the same TLD usually complete in < 0.1s . Fortunately, both your Pi-hole as well as your recursive server will be configured for efficient caching to minimize the number of queries that will actually have to be performed.","title":"What does this guide provide?"},{"location":"guides/unbound/#setting-up-pi-hole-as-a-recursive-dns-server-solution","text":"We will use unbound , a secure open-source recursive DNS server primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. The first thing you need to do is to install the recursive DNS resolver: sudo apt install unbound Important : Download the current root hints file (the list of primary root servers which are serving the domain \".\" - the root domain). Update it roughly every six months. Note that this file changes infrequently. wget -O root.hints https://www.internic.net/domain/named.root sudo mv root.hints /var/lib/unbound/","title":"Setting up Pi-hole as a recursive DNS server solution"},{"location":"guides/unbound/#configure-unbound","text":"Highlights: Listen only for queries from the local Pi-hole installation (on port 5335) Listen for both UDP and TCP requests Verify DNSSEC signatures, discarding BOGUS domains Apply a few security and privacy tricks /etc/unbound/unbound.conf.d/pi-hole.conf : server: # If no logfile is specified, syslog is used # logfile: \"/var/log/unbound/unbound.log\" verbosity: 0 interface: 127.0.0.1 port: 5335 do-ip4: yes do-udp: yes do-tcp: yes # May be set to yes if you have IPv6 connectivity do-ip6: no # You want to leave this to no unless you have *native* IPv6. With 6to4 and # Terredo tunnels your web browser should favor IPv4 for the same reasons prefer-ip6: no # Use this only when you downloaded the list of primary root servers! root-hints: \"/var/lib/unbound/root.hints\" # Trust glue only if it is within the server's authority harden-glue: yes # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS harden-dnssec-stripped: yes # Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details use-caps-for-id: no # Reduce EDNS reassembly buffer size. # Suggested by the unbound man page to reduce fragmentation reassembly problems edns-buffer-size: 1472 # Perform prefetching of close to expired message cache entries # This only applies to domains that have been frequently queried prefetch: yes # One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1. num-threads: 1 # Ensure kernel buffer is large enough to not lose messages in traffic spikes so-rcvbuf: 1m # Ensure privacy of local IP ranges private-address: 192.168.0.0/16 private-address: 169.254.0.0/16 private-address: 172.16.0.0/12 private-address: 10.0.0.0/8 private-address: fd00::/8 private-address: fe80::/10 Start your local recursive server and test that it's operational: sudo service unbound start dig pi-hole.net @127.0.0.1 -p 5335 The first query may be quite slow, but subsequent queries, also to other domains under the same TLD, should be fairly quick.","title":"Configure unbound"},{"location":"guides/unbound/#test-validation","text":"You can test DNSSEC validation using dig sigfail.verteiltesysteme.net @127.0.0.1 -p 5335 dig sigok.verteiltesysteme.net @127.0.0.1 -p 5335 The first command should give a status report of SERVFAIL and no IP address. The second should give NOERROR plus an IP address.","title":"Test validation"},{"location":"guides/unbound/#configure-pi-hole","text":"Finally, configure Pi-hole to use your recursive DNS server by specifying 127.0.0.1#5335 as the Custom DNS (IPv4): (don't forget to hit Return or click on Save )","title":"Configure Pi-hole"},{"location":"guides/upstream-dns-providers/","text":"The Pi-hole setup offers 8 options for an upstream DNS provider during the initial setup. Google OpenDNS Level3 Comodo DNS.WATCH Quad9 CloudFlare DNS Custom During the pi-hole installation, you select 1 of the 7 preset providers or enter one of your own. Below you can find more information on each of the DNS providers, along with some additional providers which have different kinds of extra filtering options (spam, phishing, adult content, etc). Google \u00b6 Default upstream DNS provider on the Pi-hole. 8.8.8.8 8.8.4.4 More information on Google Public DNS OpenDNS Home (owned by Cisco) \u00b6 Built-in features include a phishing filter, this is the OpenDNS version the Pi-hole would use if you select it during setup. 208.67.222.222 208.67.220.220 208.67.222.220 208.67.220.222 2620:119:35::35 (IPv6) 2620:119:53::53 (IPv6) More information on OpenDNS Home + OpenDNS Wikipedia Page OpenDNS also provides the OpenDNS FamilyShield (free)- option. The service blocks pornographic content, including our \u201cPornography,\u201d \u201cTasteless,\u201d and \u201cSexuality\u201d categories, in addition to proxies and anonymizers (which can render filtering useless). It also blocks phishing and some malware. 208.67.222.123 208.67.220.123 More information on OpenDNS FamilyShield + OpenDNS FamilyShield introduction Blog Level3 DNS \u00b6 This DNS service does no filtering of itself, but redirects mistyped URL to Level 3 Web Search. 4.2.2.1 4.2.2.2 Comodo Secure DNS \u00b6 SecureDNS references a real-time block list (RBL) of harmful websites (i.e. phishing sites, malware sites, spyware sites, and parked domains that may contain excessive advertising including pop-up and/or pop-under advertisements, etc.) and will warn you whenever you attempt to access a site containing potentially threatening content. 8.26.56.26 8.20.247.20 More information on Comodo Secure DNS DNS.WATCH \u00b6 DNS.WATCH offers Fast, free and uncensored DNS resolution. 84.200.69.80 84.200.70.40 2001:1608:10:25::1c04:b12f (IPv6) 2001:1608:10:25::9249:d69b (IPv6) More information on DNS.WATCH Quad9 \u00b6 Quad9 is a free, recursive, anycast DNS platform that provides end users robust security protections, high-performance, and privacy. 9.9.9.9 149.112.112.112 2620:fe::fe (IPv6) 2620:fe::9 (IPv6) More information on Quad9 CloudFlare DNS \u00b6 CloudFlare will never log your IP address (the way other companies identify you). The independent DNS monitor DNSPerf ranks Cloudflare's DNS the fastest DNS service in the world. 1.1.1.1 1.0.0.1 2606:4700:4700::1111 (IPv6) 2606:4700:4700::1001 (IPv6) More information on Cloudflare DNS Cloudflare also provides 1.1.1.1 for Families, a set of resolvers that can block malware only, or malware and adult content. Malware Blocking Only 1.1.1.2 1.0.0.2 2606:4700:4700::1112 (IPv6) 2606:4700:4700::1002 (IPv6) Malware and Adult Content 1.1.1.3 1.0.0.3 2606:4700:4700::1113 (IPv6) 2606:4700:4700::1003 (IPv6) More info on 1.1.1.1 for Families Custom \u00b6 With custom, you'll choose your favorite DNS provider. If you care about Internet independence and privacy, we suggest having a look at the OpenNIC DNS Project . More information \u00b6 There are even more public DNS server, you can find many (with some extra information) on this Lifewire page. A benchmark of these DNS servers (by Gibson Research Center) is available here .","title":"Upstream DNS Providers"},{"location":"guides/upstream-dns-providers/#google","text":"Default upstream DNS provider on the Pi-hole. 8.8.8.8 8.8.4.4 More information on Google Public DNS","title":"Google"},{"location":"guides/upstream-dns-providers/#opendns-home-owned-by-cisco","text":"Built-in features include a phishing filter, this is the OpenDNS version the Pi-hole would use if you select it during setup. 208.67.222.222 208.67.220.220 208.67.222.220 208.67.220.222 2620:119:35::35 (IPv6) 2620:119:53::53 (IPv6) More information on OpenDNS Home + OpenDNS Wikipedia Page OpenDNS also provides the OpenDNS FamilyShield (free)- option. The service blocks pornographic content, including our \u201cPornography,\u201d \u201cTasteless,\u201d and \u201cSexuality\u201d categories, in addition to proxies and anonymizers (which can render filtering useless). It also blocks phishing and some malware. 208.67.222.123 208.67.220.123 More information on OpenDNS FamilyShield + OpenDNS FamilyShield introduction Blog","title":"OpenDNS Home (owned by Cisco)"},{"location":"guides/upstream-dns-providers/#level3-dns","text":"This DNS service does no filtering of itself, but redirects mistyped URL to Level 3 Web Search. 4.2.2.1 4.2.2.2","title":"Level3 DNS"},{"location":"guides/upstream-dns-providers/#comodo-secure-dns","text":"SecureDNS references a real-time block list (RBL) of harmful websites (i.e. phishing sites, malware sites, spyware sites, and parked domains that may contain excessive advertising including pop-up and/or pop-under advertisements, etc.) and will warn you whenever you attempt to access a site containing potentially threatening content. 8.26.56.26 8.20.247.20 More information on Comodo Secure DNS","title":"Comodo Secure DNS"},{"location":"guides/upstream-dns-providers/#dnswatch","text":"DNS.WATCH offers Fast, free and uncensored DNS resolution. 84.200.69.80 84.200.70.40 2001:1608:10:25::1c04:b12f (IPv6) 2001:1608:10:25::9249:d69b (IPv6) More information on DNS.WATCH","title":"DNS.WATCH"},{"location":"guides/upstream-dns-providers/#quad9","text":"Quad9 is a free, recursive, anycast DNS platform that provides end users robust security protections, high-performance, and privacy. 9.9.9.9 149.112.112.112 2620:fe::fe (IPv6) 2620:fe::9 (IPv6) More information on Quad9","title":"Quad9"},{"location":"guides/upstream-dns-providers/#cloudflare-dns","text":"CloudFlare will never log your IP address (the way other companies identify you). The independent DNS monitor DNSPerf ranks Cloudflare's DNS the fastest DNS service in the world. 1.1.1.1 1.0.0.1 2606:4700:4700::1111 (IPv6) 2606:4700:4700::1001 (IPv6) More information on Cloudflare DNS Cloudflare also provides 1.1.1.1 for Families, a set of resolvers that can block malware only, or malware and adult content. Malware Blocking Only 1.1.1.2 1.0.0.2 2606:4700:4700::1112 (IPv6) 2606:4700:4700::1002 (IPv6) Malware and Adult Content 1.1.1.3 1.0.0.3 2606:4700:4700::1113 (IPv6) 2606:4700:4700::1003 (IPv6) More info on 1.1.1.1 for Families","title":"CloudFlare DNS"},{"location":"guides/upstream-dns-providers/#custom","text":"With custom, you'll choose your favorite DNS provider. If you care about Internet independence and privacy, we suggest having a look at the OpenNIC DNS Project .","title":"Custom"},{"location":"guides/upstream-dns-providers/#more-information","text":"There are even more public DNS server, you can find many (with some extra information) on this Lifewire page. A benchmark of these DNS servers (by Gibson Research Center) is available here .","title":"More information"},{"location":"guides/whitelist-blacklist/","text":"What to Whitelist or Blacklist \u00b6 This extension for Google Chrome can help you in finding out which domains you need to whitelist. How to Whitelist or Blacklist \u00b6 There are scripts to aid users in adding or removing domains to the whitelist or blacklist from the CLI Each script accepts the following parameters: Parameter Description [domain] Fully qualified domain name you wish to add or remove. You can pass any number of domains. -d Removal mode. Domains will be removed from the list, rather than added -nr Update blacklist without refreshing pihole-FTL -f Force delete cached blocklist content -q Quiet mode. Console output is minimal. Useful for calling from another script (see gravity.sh ) Domains passed are parsed by the script to ensure they are valid domains. If a domain is invalid it will be ignored. Example pihole -w usages \u00b6 Attempt to add one or more domains to the whitelist and reload pihole-FTL: pihole -w domain1 [ domain2... ] Attempt to add one or more domains to the whitelist, but do not reload pihole-FTL: pihole -w -nr domain1 [ domain2... ] Attempt to add one or more domains to the whitelist and force pihole-FTL to reload: pihole -w -f domain1 [ domain2... ] To remove domains from the whitelist add -d as an additional argument, e.g: pihole -w -d domain1 [ domain2... ] Example pihole -b usages \u00b6 Attempt to add one or more domains to the blacklist and reload pihole-FTL: pihole -b domain1 [ domain2... ] Attempt to add one or more domains to the blacklist, but do not reload pihole-FTL: pihole -b -nr domain1 [ domain2... ] Attempt to add one or more domains to the blacklist and force pihole-FTL to reload: pihole -b -f domain1 [ domain2... ] To remove domains from the blacklist add -d as an additional argument, e.g: pihole -b -d domain1 [ domain2... ]","title":"Editing Whitelist and Blacklist"},{"location":"guides/whitelist-blacklist/#what-to-whitelist-or-blacklist","text":"This extension for Google Chrome can help you in finding out which domains you need to whitelist.","title":"What to Whitelist or Blacklist"},{"location":"guides/whitelist-blacklist/#how-to-whitelist-or-blacklist","text":"There are scripts to aid users in adding or removing domains to the whitelist or blacklist from the CLI Each script accepts the following parameters: Parameter Description [domain] Fully qualified domain name you wish to add or remove. You can pass any number of domains. -d Removal mode. Domains will be removed from the list, rather than added -nr Update blacklist without refreshing pihole-FTL -f Force delete cached blocklist content -q Quiet mode. Console output is minimal. Useful for calling from another script (see gravity.sh ) Domains passed are parsed by the script to ensure they are valid domains. If a domain is invalid it will be ignored.","title":"How to Whitelist or Blacklist"},{"location":"guides/whitelist-blacklist/#example-pihole-w-usages","text":"Attempt to add one or more domains to the whitelist and reload pihole-FTL: pihole -w domain1 [ domain2... ] Attempt to add one or more domains to the whitelist, but do not reload pihole-FTL: pihole -w -nr domain1 [ domain2... ] Attempt to add one or more domains to the whitelist and force pihole-FTL to reload: pihole -w -f domain1 [ domain2... ] To remove domains from the whitelist add -d as an additional argument, e.g: pihole -w -d domain1 [ domain2... ]","title":"Example pihole -w usages"},{"location":"guides/whitelist-blacklist/#example-pihole-b-usages","text":"Attempt to add one or more domains to the blacklist and reload pihole-FTL: pihole -b domain1 [ domain2... ] Attempt to add one or more domains to the blacklist, but do not reload pihole-FTL: pihole -b -nr domain1 [ domain2... ] Attempt to add one or more domains to the blacklist and force pihole-FTL to reload: pihole -b -f domain1 [ domain2... ] To remove domains from the blacklist add -d as an additional argument, e.g: pihole -b -d domain1 [ domain2... ]","title":"Example pihole -b usages"},{"location":"guides/github/contributing/","text":"Pi-hole enforces the Developer Certificate of Origin (DCO) on Pull Requests. It requires all commit messages to contain the Signed-off-by line with an email address that matches the commit author and the name on your GitHub account. The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. Here is the full text of the DCO, reformatted for readability: By making a contribution to this project, I certify that: The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or The contribution is based upon previous work that, to the best of my knowledge, is covered under an > appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Contributors sign-off that they adhere to these requirements by adding a Signed-off-by line to commit messages. See this guide for how to sign-off correctly . DCO Failures \u00b6 The Pi-hole project uses a DCO bot for all GitHub pulls to verify that each commit is signed off. When you create your pull request, it will automatically be verified by this bot. An example of what to expect is below. If your Pull Request fails the DCO check, it's necessary to fix the entire commit history in the PR. Although this is a situation we'd like to avoid the best practice is to squash the commit history to a single commit, append the DCO sign-off as described above or interactively in the rebase comment editing process, and force push. For example, if you have 2 commits in your history (Note the ~2): git rebase --interactive HEAD~2 ( interactive squash + DCO append ) git push origin --force Note, that in general rewriting history in this way is something that can cause issues with the review process and this should only be done to correct a DCO mistake.","title":"Contributing on GitHub"},{"location":"guides/github/contributing/#dco-failures","text":"The Pi-hole project uses a DCO bot for all GitHub pulls to verify that each commit is signed off. When you create your pull request, it will automatically be verified by this bot. An example of what to expect is below. If your Pull Request fails the DCO check, it's necessary to fix the entire commit history in the PR. Although this is a situation we'd like to avoid the best practice is to squash the commit history to a single commit, append the DCO sign-off as described above or interactively in the rebase comment editing process, and force push. For example, if you have 2 commits in your history (Note the ~2): git rebase --interactive HEAD~2 ( interactive squash + DCO append ) git push origin --force Note, that in general rewriting history in this way is something that can cause issues with the review process and this should only be done to correct a DCO mistake.","title":"DCO Failures"},{"location":"guides/github/how-to-signoff/","text":"Pi-hole requires a sign-off message in the following format appear on each commit in the pull request: This is my commit message Signed-off-by: Random J Developer <random@developer.example.org> The text can either be manually added to your commit body, or you can add either -s or --signoff to your usual git commit commands. Creating your signoff \u00b6 Git has a -s | --signoff command-line option to append this automatically to your commit message: git commit --signoff --message 'This is my commit message' git commit -s -m \"This is my commit message\" This will use your default git configuration which is found in .git/config and usually, it is the username systemaddress of the machine which you are using. To change this, you can use the following commands (Note these only change the current repo settings, you will need to add --global for these commands to change the installation default). Your name: git config user.name \"FIRST_NAME LAST_NAME\" Your email: git config user.email \"MY_NAME@example.com\" How to amend a sign-off \u00b6 If you have authored a commit that is missing the signed-off-by line, you can amend your commits and push them to GitHub git commit --amend --signoff If you've pushed your changes to GitHub already you'll need to force push your branch after this with git push -f .","title":"How to sign-off commits"},{"location":"guides/github/how-to-signoff/#creating-your-signoff","text":"Git has a -s | --signoff command-line option to append this automatically to your commit message: git commit --signoff --message 'This is my commit message' git commit -s -m \"This is my commit message\" This will use your default git configuration which is found in .git/config and usually, it is the username systemaddress of the machine which you are using. To change this, you can use the following commands (Note these only change the current repo settings, you will need to add --global for these commands to change the installation default). Your name: git config user.name \"FIRST_NAME LAST_NAME\" Your email: git config user.email \"MY_NAME@example.com\"","title":"Creating your signoff"},{"location":"guides/github/how-to-signoff/#how-to-amend-a-sign-off","text":"If you have authored a commit that is missing the signed-off-by line, you can amend your commits and push them to GitHub git commit --amend --signoff If you've pushed your changes to GitHub already you'll need to force push your branch after this with git push -f .","title":"How to amend a sign-off"},{"location":"guides/tor/dnssec/","text":"This is an unsupported configuration created by the community A lot of the Exit Nodes configure their DNS Server to support DNSSEC. You can test here whether DNSSEC is enabled for your current DNS Servers. If you want to test again by refreshing the site, please be aware of the notes on the site: To re-run the above test, you also need to: Flush the DNS cache of your OS (Windows: ipconfig /flushdns ) Restart browser or clear browser cache Note: Flushing Browser/DNS Cache here means restarting Pi-hole (DNS Server), restarting the browser and ideally opening the site in private/incognito mode. Alternatives \u00b6 An alternative would be using DNSCrypt , but this leaves you in a position where you have to trust the DNSCrypt resolver since your IP is not anonymized - unless you configure DNSCrypt to route over Tor .","title":"Using DNSSEC"},{"location":"guides/tor/dnssec/#alternatives","text":"An alternative would be using DNSCrypt , but this leaves you in a position where you have to trust the DNSCrypt resolver since your IP is not anonymized - unless you configure DNSCrypt to route over Tor .","title":"Alternatives"},{"location":"guides/tor/overview/","text":"This is an unsupported configuration created by the community If you want to protect your - unencrypted by default - DNS requests from easily being collected by your ISP or another Adversary between you and your DNS server, you can easily set up Pi-hole to use Tor for hostname resolving. Using DNS over Tor anonymizes your IP by using Onion-Routing . Contribute to the Tor project \u00b6 If you got spare resources, consider running a Tor Relay (or Exit ) Node to contribute back to the Tor Network. The default installation doesn't do either of these. And/Or consider donating . \u26a0\ufe0f Warnings & Considerations \u00b6 Tracking \u00b6 Please be aware that your ISP or an Adversary still can collect what Websites you visit by capturing HTTP (plaintext) or HTTPS ( SNI ) packets or by trying to reverse lookup or whois the IPs you're connecting to . To avoid that you might want to consider to additionally route your Browser traffic over Tor . Also keep in mind that even Tor can't provide 100% anonymity, for example correlation attacks are possible. Although it's almost impossible to execute such an attack for e.g. your ISP or a random service on the internet - you might need to change some of your habits to get the most out of Tor. Bad Relays, Phishing, Scam \u00b6 Tor has the concept of Bad Relays and tries to avoid that Tor Relays become Bad Exit Nodes (which are a form of Relay) by monitoring their behavior before declaring them as Exit Node. But it still can happen and since anyone can run a Tor Relay as Exit Node on the Tor Network, this means that an Exit Node owner could fake the answer to a DNS request and redirect you to a malicious website/IP. If you're in a recent Browser and only visit encrypted (HTTPS) sites, that isn't too bad, since the Browser would warn you with an invalid certificate warning (unless someone would hack a Certificate authority or get a CA to issue a certificate without validation - which is both highly unlikely ). But other apps on your network that resolve DNS queries via DNS over Tor might either communicate unencrypted or don't validate certificates properly. Such apps could get malicious data injected and/or phish your data without your knowledge. So, ideally, only use DNS over Tor if you know for a fact that the apps in your network communicate over a secure connection and properly validate certificates. That being said, if you use DNS over Tor in the default configuration (meaning no custom ExitNodes in the torrc), this kind of attack requires a big portion of luck for the attacker (owner of a Bad Exit Node), because you would have to get a circuit routing over the Bad Exit Node in the same moment when using an insecure app (Tor switches the circuit at least every 10minutes in the default configuration). On top of that, an attacker must first find an app that has this kind of vulnerability and has valuable data or attack vectors. This is unlikely since most apps out there that handle sensitive data at least communicate over encrypted connections that validate certificates based on system or manual root certs. To lower the chances of Bad Exit Nodes you could restrict ExitNodes to trusted ones ( country and/or specific ). Choosing specific Exit Nodes would basically be the same as e.g. trusting specific DNSCrypt resolvers or Alternative DNS Servers . They might be good, they might be bad, you can't know for sure (unless the DNS answers are DNSSEC signed - but that's most likely not the case for the kinds of app that might get affected by this). So, in the end, it boils down to one of the following use cases. Encrypt your DNS traffic using Tor so your ISP can't collect it (but still is able to collect what Websites/IPs you visit unless you route that traffic also over Tor) and the DNS Server won't see your real IP for the price of maybe getting a Bad Exit Node that fakes answers to DNS queries. Use DNSCrypt so your ISP can't collect DNS traffic (but still can collect the websites/IPs you visit unless you route that traffic over Tor), but you have to accept that the DNSCrypt resolver you've chosen might store your DNS queries together with your IP (unless you modify DNSCrypt to route over Tor ) and could also turn out to send faked answers to DNS queries. I guess you would call that a Bad DNSCrypt resolver then. Use an unencrypted alternative DNS server (there are a lot of lists out there). In this case, your ISP easily can record your DNS traffic and the alternative DNS server can store your DNS queries together with your IP. On top of that, your ISP or the alternative DNS could also fake the answer to the DNS queries. That would be a Bad Alternative DNS Server then. Use your ISP DNS server. In this case, your ISP gets your DNS traffic for free. On top of that, the ISP could also fake answers to DNS queries. Bad ISP DNS Server. The bottom line is that you have to weigh up who you trust the most and which risks you are willing to take.","title":"Overview"},{"location":"guides/tor/overview/#contribute-to-the-tor-project","text":"If you got spare resources, consider running a Tor Relay (or Exit ) Node to contribute back to the Tor Network. The default installation doesn't do either of these. And/Or consider donating .","title":"Contribute to the Tor project"},{"location":"guides/tor/overview/#warnings-considerations","text":"","title":"\u26a0\ufe0f Warnings &amp; Considerations"},{"location":"guides/tor/overview/#tracking","text":"Please be aware that your ISP or an Adversary still can collect what Websites you visit by capturing HTTP (plaintext) or HTTPS ( SNI ) packets or by trying to reverse lookup or whois the IPs you're connecting to . To avoid that you might want to consider to additionally route your Browser traffic over Tor . Also keep in mind that even Tor can't provide 100% anonymity, for example correlation attacks are possible. Although it's almost impossible to execute such an attack for e.g. your ISP or a random service on the internet - you might need to change some of your habits to get the most out of Tor.","title":"Tracking"},{"location":"guides/tor/overview/#bad-relays-phishing-scam","text":"Tor has the concept of Bad Relays and tries to avoid that Tor Relays become Bad Exit Nodes (which are a form of Relay) by monitoring their behavior before declaring them as Exit Node. But it still can happen and since anyone can run a Tor Relay as Exit Node on the Tor Network, this means that an Exit Node owner could fake the answer to a DNS request and redirect you to a malicious website/IP. If you're in a recent Browser and only visit encrypted (HTTPS) sites, that isn't too bad, since the Browser would warn you with an invalid certificate warning (unless someone would hack a Certificate authority or get a CA to issue a certificate without validation - which is both highly unlikely ). But other apps on your network that resolve DNS queries via DNS over Tor might either communicate unencrypted or don't validate certificates properly. Such apps could get malicious data injected and/or phish your data without your knowledge. So, ideally, only use DNS over Tor if you know for a fact that the apps in your network communicate over a secure connection and properly validate certificates. That being said, if you use DNS over Tor in the default configuration (meaning no custom ExitNodes in the torrc), this kind of attack requires a big portion of luck for the attacker (owner of a Bad Exit Node), because you would have to get a circuit routing over the Bad Exit Node in the same moment when using an insecure app (Tor switches the circuit at least every 10minutes in the default configuration). On top of that, an attacker must first find an app that has this kind of vulnerability and has valuable data or attack vectors. This is unlikely since most apps out there that handle sensitive data at least communicate over encrypted connections that validate certificates based on system or manual root certs. To lower the chances of Bad Exit Nodes you could restrict ExitNodes to trusted ones ( country and/or specific ). Choosing specific Exit Nodes would basically be the same as e.g. trusting specific DNSCrypt resolvers or Alternative DNS Servers . They might be good, they might be bad, you can't know for sure (unless the DNS answers are DNSSEC signed - but that's most likely not the case for the kinds of app that might get affected by this). So, in the end, it boils down to one of the following use cases. Encrypt your DNS traffic using Tor so your ISP can't collect it (but still is able to collect what Websites/IPs you visit unless you route that traffic also over Tor) and the DNS Server won't see your real IP for the price of maybe getting a Bad Exit Node that fakes answers to DNS queries. Use DNSCrypt so your ISP can't collect DNS traffic (but still can collect the websites/IPs you visit unless you route that traffic over Tor), but you have to accept that the DNSCrypt resolver you've chosen might store your DNS queries together with your IP (unless you modify DNSCrypt to route over Tor ) and could also turn out to send faked answers to DNS queries. I guess you would call that a Bad DNSCrypt resolver then. Use an unencrypted alternative DNS server (there are a lot of lists out there). In this case, your ISP easily can record your DNS traffic and the alternative DNS server can store your DNS queries together with your IP. On top of that, your ISP or the alternative DNS could also fake the answer to the DNS queries. That would be a Bad Alternative DNS Server then. Use your ISP DNS server. In this case, your ISP gets your DNS traffic for free. On top of that, the ISP could also fake answers to DNS queries. Bad ISP DNS Server. The bottom line is that you have to weigh up who you trust the most and which risks you are willing to take.","title":"Bad Relays, Phishing, Scam"},{"location":"guides/tor/performance-issues/","text":"This is an unsupported configuration created by the community You're constantly using new DNS Servers that are located all over the world, so it might happen that sometimes hostname resolving is slow or might not work at all for certain domains. In this case, you have to wait a few minutes until you switch to another Tor circuit or configure Tor to accept control connections and send a command that tells Tor to switch circuits immediately . You could set ExitNodes in your torrc to a specific set of Exit nodes that are reliable for you or use only Exit nodes in a specific country (on Debian derivatives you need to have the tor-geoipdb package installed for that to work) and thus avoid problems with DNS lookups to some extent. Keep in mind that this approach increases the correlation attack vulnerability if you only have a small amount of ExitNodes set or your selected country/s has/have few Exit nodes. If your goal is only to slightly increase security and maintain performance and reliability, this approach might be for you. It is not recommended. Ok, but please just tell me how to avoid timeouts So you've read about Performance, Reliability and Timeouts and just want a quick solution. This is not recommended, but here are some things you can do: Solution 1 - Only use Exit Nodes from specific countries \u00b6 Install the necessary geoip db for Tor to use, on Debian derivatives (Raspbian, Ubuntu) that means sudo apt install tor-geoipdb Pick the Country Codes you want to use as ExitNodes from the \"List of country codes for Tor\" list on this page . Edit /etc/tor/torrc as root and, add the following lines to the end and replace CountryCodeN (keep the { and } ) with the country code you've chosen (you can also use only one country code; in this case, it would be just {CountryCode1} without a comma). ExitNodes {CountryCode1},{CountryCode2},{CountryCode3} StrictNodes 1 Save the changes, restart Tor sudo service tor restart Note: Using this approach you put a strain on Tor Relays in the selected countries only and increase your security vulnerability. It's not nice and not recommended. Also, be aware that this change also affects which Exit Nodes are used if you Route Your Browser Traffic over the Pi-hole host Tor SocksPort. Solution 2 - Only use specific Exit Nodes \u00b6 Navigate to atlas.torproject.org Top Relays . Click on two Relays out of the list. Make sure the relay allows Port 53 in his IPv4 Exit Policy Summary (and/or IPv6 Exit Policy Summary if you want to resolve IPv6 AAAA queries). As root copy the Fingerprint (Top Right under Relay Details) of those two Relays to the end of your /etc/tor/torrc file on the Pi-hole host in the following format: ExitNodes Fingerprint1,Fingerprint2 StrictNodes 1 Save the changes, restart Tor sudo service tor restart If DNS requests stop resolving at all, you might need to repeat this procedure because the Relays you chose might've gone down. Note: Using this approach you put a strain on single Tor Relays and increase your security vulnerability. It's not nice and not recommended. Also, be aware that this change also affects which Exit Nodes are used if you Route Your Browser Traffic over the Pi-hole host Tor SocksPort. Hint: You can combine both Solutions and have country codes and fingerprints as ExitNodes . IPv6 \u00b6 DNS over Tor only partially supports IPv6 as of now. This is only a problem if your Router or your ISP don't support IPv4 or you want only IPv6 traffic for another reason - if you have both IPv4 and IPv6 available and you don't plan to visit an IPv6 only service, this is no problem at all. In general, if you made sure that you configured your Pi-hole to support IPv6 , resolving IPv6 addresses will sometimes work and sometimes not. The reason for this is that Tor Exit nodes only resolve IPv6 queries if they have IPv6Exit 1 set in their configuration. Tor is working on a fix for that - but until that is done and the Tor exit nodes switched to the fixed version, you will run into situations where IPv6 addresses aren't resolvable despite being available in the responsible nameserver. To check whether your current Exit node resolves IPv6 correctly you can run dig example.com aaaa (Linux) or nslookup -q=aaaa example.com (Windows) on your client. If you're dependent on IPv6 and can't use IPv4 at all, your only chance is to configure ExitNodes in your torrc to only point to Exit nodes that resolve IPv6 correctly. But keep in mind that this approach increases the correlation attack vulnerability if you only have a small amount of ExitNodes set. Also, you can't (AFAIK) change the internal IPv4 Tor DNS address on the Pi-hole host to an IPv6 one since DNSPort doesn't support that - so you need at least internal IPv4 on your Pi-hole host, which is the default on most host systems. Exit node fingerprints \u00b6 To get the fingerprint of your current Exit node, you can configure SocksPort 0.0.0.0:9050 in your torrc, restart tor, point your browser to use your Pi-hole's IP and port 9050 as Socks5 proxy, visit e.g. check.torproject.org to get your Exit Node IP, search for that IP on atlas.torproject.org , click on one of the results and it will show the Fingerprint top right under details. These fingerprints can be set as a comma-separated value for ExitNodes . Don't forget to remove the SocksPort option and restart tor if you don't need it anymore. Also, it should be noted that the Exit node you get over SocksPort is not necessarily the same as the one you get when issuing DNS requests over the DNSPort since Tor internally keeps multiple circuits open. Again, setting ExitNodes manually is not recommended.","title":"Performance and other issues"},{"location":"guides/tor/performance-issues/#solution-1-only-use-exit-nodes-from-specific-countries","text":"Install the necessary geoip db for Tor to use, on Debian derivatives (Raspbian, Ubuntu) that means sudo apt install tor-geoipdb Pick the Country Codes you want to use as ExitNodes from the \"List of country codes for Tor\" list on this page . Edit /etc/tor/torrc as root and, add the following lines to the end and replace CountryCodeN (keep the { and } ) with the country code you've chosen (you can also use only one country code; in this case, it would be just {CountryCode1} without a comma). ExitNodes {CountryCode1},{CountryCode2},{CountryCode3} StrictNodes 1 Save the changes, restart Tor sudo service tor restart Note: Using this approach you put a strain on Tor Relays in the selected countries only and increase your security vulnerability. It's not nice and not recommended. Also, be aware that this change also affects which Exit Nodes are used if you Route Your Browser Traffic over the Pi-hole host Tor SocksPort.","title":"Solution 1 - Only use Exit Nodes from specific countries"},{"location":"guides/tor/performance-issues/#solution-2-only-use-specific-exit-nodes","text":"Navigate to atlas.torproject.org Top Relays . Click on two Relays out of the list. Make sure the relay allows Port 53 in his IPv4 Exit Policy Summary (and/or IPv6 Exit Policy Summary if you want to resolve IPv6 AAAA queries). As root copy the Fingerprint (Top Right under Relay Details) of those two Relays to the end of your /etc/tor/torrc file on the Pi-hole host in the following format: ExitNodes Fingerprint1,Fingerprint2 StrictNodes 1 Save the changes, restart Tor sudo service tor restart If DNS requests stop resolving at all, you might need to repeat this procedure because the Relays you chose might've gone down. Note: Using this approach you put a strain on single Tor Relays and increase your security vulnerability. It's not nice and not recommended. Also, be aware that this change also affects which Exit Nodes are used if you Route Your Browser Traffic over the Pi-hole host Tor SocksPort. Hint: You can combine both Solutions and have country codes and fingerprints as ExitNodes .","title":"Solution 2 - Only use specific Exit Nodes"},{"location":"guides/tor/performance-issues/#ipv6","text":"DNS over Tor only partially supports IPv6 as of now. This is only a problem if your Router or your ISP don't support IPv4 or you want only IPv6 traffic for another reason - if you have both IPv4 and IPv6 available and you don't plan to visit an IPv6 only service, this is no problem at all. In general, if you made sure that you configured your Pi-hole to support IPv6 , resolving IPv6 addresses will sometimes work and sometimes not. The reason for this is that Tor Exit nodes only resolve IPv6 queries if they have IPv6Exit 1 set in their configuration. Tor is working on a fix for that - but until that is done and the Tor exit nodes switched to the fixed version, you will run into situations where IPv6 addresses aren't resolvable despite being available in the responsible nameserver. To check whether your current Exit node resolves IPv6 correctly you can run dig example.com aaaa (Linux) or nslookup -q=aaaa example.com (Windows) on your client. If you're dependent on IPv6 and can't use IPv4 at all, your only chance is to configure ExitNodes in your torrc to only point to Exit nodes that resolve IPv6 correctly. But keep in mind that this approach increases the correlation attack vulnerability if you only have a small amount of ExitNodes set. Also, you can't (AFAIK) change the internal IPv4 Tor DNS address on the Pi-hole host to an IPv6 one since DNSPort doesn't support that - so you need at least internal IPv4 on your Pi-hole host, which is the default on most host systems.","title":"IPv6"},{"location":"guides/tor/performance-issues/#exit-node-fingerprints","text":"To get the fingerprint of your current Exit node, you can configure SocksPort 0.0.0.0:9050 in your torrc, restart tor, point your browser to use your Pi-hole's IP and port 9050 as Socks5 proxy, visit e.g. check.torproject.org to get your Exit Node IP, search for that IP on atlas.torproject.org , click on one of the results and it will show the Fingerprint top right under details. These fingerprints can be set as a comma-separated value for ExitNodes . Don't forget to remove the SocksPort option and restart tor if you don't need it anymore. Also, it should be noted that the Exit node you get over SocksPort is not necessarily the same as the one you get when issuing DNS requests over the DNSPort since Tor internally keeps multiple circuits open. Again, setting ExitNodes manually is not recommended.","title":"Exit node fingerprints"},{"location":"guides/tor/setup/","text":"This is an unsupported configuration created by the community This guide should work for the most recent Debian derivatives (Raspbian, Ubuntu). Alternatively, you can follow a Tor Installation Guide for your Host System. sudo apt install tor Edit /etc/tor/torrc as root, include the following line at the end and save the changes DNSPort 127.0.10.1:53 Restart Tor with: sudo service tor restart Change your Pi-hole upstream DNS server to use 127.0.10.1 in the Pi-hole WebGUI (Settings) under \"Upstream DNS Servers\" and click \"Save\". Note: It's currently not possible to change the Upstream DNS Server directly in the /etc/pihole/setupVars.conf file, the Pi-hole DNS Server won't pick up the change. If you want a recognizable hostname for the Tor DNS in your Pi-hole GUI statistics, edit /etc/hosts as root, include the following line at the end and save the changes 127.0.10.1 tor.dns.local Restart Pi-hole DNS Server for the /etc/hosts changes to take effect sudo pihole restartdns Testing your configuration \u00b6 To see which DNS servers you're using, you can use a DNS Server Leak Test. Some of them don't work with DNS over Tor, this one does work tho. It should show random DNS Servers. Tor rotates the circuit approximately every 10minutes in the default configuration, so it might take 10minutes for you to see a new set of random DNS servers in the Leak Test. You can also check the \"Forward Destinations over Time\" Graph (enabled per default) in your Pi-hole WebGUI - the latest Forward Destinations should only include \"local\" and \"tor.dns.local\" (if you updated the /etc/hosts file). To make sure that you always use the Pi-hole as DNS Server and to make sure that it handles IPv4 and/or IPv6 blocking if you configured it to do so, you should check which DNS Servers your client is using: nmcli device show <interface> | grep .DNS (Linux) or ipconfig /all (Windows, and look for DNS Servers on your LAN Adapter ). You should then issue an IPv4 (A) and/or IPv6 (AAAA) DNS query to every IPv4 and/or IPv6 DNS Server that shows up: For Linux: dig @<IPv4/6-dns-server-address> api.mixpanel.com <A/AAAA> For Windows: nslookup -server = <IPv4/6-dns-server-address> -q = <A/AAAA> api.mixpanel.com That should give you the Pi-hole IPv4 and/or IPv6 address as Answer and show up as \"Pi-holed\" in the WebGUI Query Log (assuming you have the default blocklist, otherwise replace api.mixpanel.com with any domain on your blocklist). If any of the queries don't show up in the Query Log you should make sure to configure your Pi-hole/network setup properly ( this thread might help ).","title":"Basic Setup"},{"location":"guides/tor/setup/#testing-your-configuration","text":"To see which DNS servers you're using, you can use a DNS Server Leak Test. Some of them don't work with DNS over Tor, this one does work tho. It should show random DNS Servers. Tor rotates the circuit approximately every 10minutes in the default configuration, so it might take 10minutes for you to see a new set of random DNS servers in the Leak Test. You can also check the \"Forward Destinations over Time\" Graph (enabled per default) in your Pi-hole WebGUI - the latest Forward Destinations should only include \"local\" and \"tor.dns.local\" (if you updated the /etc/hosts file). To make sure that you always use the Pi-hole as DNS Server and to make sure that it handles IPv4 and/or IPv6 blocking if you configured it to do so, you should check which DNS Servers your client is using: nmcli device show <interface> | grep .DNS (Linux) or ipconfig /all (Windows, and look for DNS Servers on your LAN Adapter ). You should then issue an IPv4 (A) and/or IPv6 (AAAA) DNS query to every IPv4 and/or IPv6 DNS Server that shows up: For Linux: dig @<IPv4/6-dns-server-address> api.mixpanel.com <A/AAAA> For Windows: nslookup -server = <IPv4/6-dns-server-address> -q = <A/AAAA> api.mixpanel.com That should give you the Pi-hole IPv4 and/or IPv6 address as Answer and show up as \"Pi-holed\" in the WebGUI Query Log (assuming you have the default blocklist, otherwise replace api.mixpanel.com with any domain on your blocklist). If any of the queries don't show up in the Query Log you should make sure to configure your Pi-hole/network setup properly ( this thread might help ).","title":"Testing your configuration"},{"location":"guides/tor/using-tor/","text":"This is an unsupported configuration created by the community To enhance your privacy you might want to route all or part of your Browser Traffic over Tor. Tor Browser \u00b6 The easiest and most reliable solution would be to use the Tor Browser . Though that won't use your Pi-hole DNS Server out of the box. You can, however, disable Proxy DNS when using SOCKS v5 in Tor Browsers Preferences -> Advanced -> Network -> Settings and make sure to point your system to use Pi-hole with DNS over Tor activated. Your Browser \u00b6 Edit /etc/tor/torrc on your Pi-hole as root, include the following line at the end and save the changes SocksPort 0.0.0.0:9050 Note: You should make sure that only your LAN devices are able to access your Pi-hole on port 9050. Restart Tor sudo service tor restart Point your browser to use your Pi-hole IP or Hostname (e.g. pi.hole ) and Port 9050 as Socks5 Proxy. Do not enable Proxy DNS when using SOCKS v5 and make sure to point your system to use Pi-hole with DNS over Tor activated. For Chrome you can either use e.g. the Proxy SwitchyOmega Extension or start Chrome with command-line parameters . For Firefox you can either use e.g. the FoxyProxy Add-on or configure the Socks5 Proxy directly in the Firefox Preferences. If you use a Proxy Add-on/Extension you can also e.g. route everything per default over Tor and only whitelist some sites that you need to perform really good. Accessing .onion addresses \u00b6 If you want to access .onion addresses with this kind of setup you have to activate Transparent Access to Tor Hidden Services on the Pi-hole host. Notes \u00b6 Don't define other regular Upstream DNS Servers than the Tor one if you want to avoid that your Pi-hole makes plaintext DNS requests. From the Tor Manual regarding DNSPort : This port only handles A, AAAA, and PTR requests","title":"Using TOR"},{"location":"guides/tor/using-tor/#tor-browser","text":"The easiest and most reliable solution would be to use the Tor Browser . Though that won't use your Pi-hole DNS Server out of the box. You can, however, disable Proxy DNS when using SOCKS v5 in Tor Browsers Preferences -> Advanced -> Network -> Settings and make sure to point your system to use Pi-hole with DNS over Tor activated.","title":"Tor Browser"},{"location":"guides/tor/using-tor/#your-browser","text":"Edit /etc/tor/torrc on your Pi-hole as root, include the following line at the end and save the changes SocksPort 0.0.0.0:9050 Note: You should make sure that only your LAN devices are able to access your Pi-hole on port 9050. Restart Tor sudo service tor restart Point your browser to use your Pi-hole IP or Hostname (e.g. pi.hole ) and Port 9050 as Socks5 Proxy. Do not enable Proxy DNS when using SOCKS v5 and make sure to point your system to use Pi-hole with DNS over Tor activated. For Chrome you can either use e.g. the Proxy SwitchyOmega Extension or start Chrome with command-line parameters . For Firefox you can either use e.g. the FoxyProxy Add-on or configure the Socks5 Proxy directly in the Firefox Preferences. If you use a Proxy Add-on/Extension you can also e.g. route everything per default over Tor and only whitelist some sites that you need to perform really good.","title":"Your Browser"},{"location":"guides/tor/using-tor/#accessing-onion-addresses","text":"If you want to access .onion addresses with this kind of setup you have to activate Transparent Access to Tor Hidden Services on the Pi-hole host.","title":"Accessing .onion addresses"},{"location":"guides/tor/using-tor/#notes","text":"Don't define other regular Upstream DNS Servers than the Tor one if you want to avoid that your Pi-hole makes plaintext DNS requests. From the Tor Manual regarding DNSPort : This port only handles A, AAAA, and PTR requests","title":"Notes"},{"location":"guides/vpn/android-client/","text":"Install the official OpenVPN App from the App Store Log into your OpenVPN server and use the road warrior installer to create a new certificate for your device: root@ubuntu-512mb-fra1-01:~# bash openvpn-install.sh Looks like OpenVPN is already installed What do you want to do? 1) Add a cert for a new user 2) Revoke existing user cert 3) Remove OpenVPN 4) Exit Select an option [1-4]: 1 Tell me a name for the client cert Please, use one word only, no special characters Client name: android Generating a 2048 bit RSA private key .....+++ ..................................+++ writing new private key to '...' ----- Using configuration from /etc/openvpn/server/easy-rsa/openssl-1.0.cnf Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows commonName :ASN.1 12:'android' Certificate is to be certified until Jan 25 15:07:37 2027 GMT (3650 days) Write out database with 1 new entries Data Base Updated Client android added, configuration is available at /root/android.ovpn Copy the mentioned file ( /root/android.ovpn ) to your Android device (e.g. SD card) and import it in the app: Connect to your OpenVPN server You are ready to go!","title":"Android"},{"location":"guides/vpn/clients/","text":"Create a client config file ( .ovpn ) \u00b6 Now that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are. Doing so requires the use of a certificate. You generate these and the resulting .ovpn file by running the installer and choosing 1) Add a new user for each client that will connect to the VPN. You can repeat this process for as many clients as you need. In this example, we'll \"Add a new user\" by naming the .ovpn file the same as the client's hostname but you may want to adopt your own naming strategy. Run the OpenVPN installer again ./openvpn-install.sh Choose 1) Add a new user and enter a client name Looks like OpenVPN is already installed What do you want to do? 1) Add a new user 2) Revoke an existing user 3) Remove OpenVPN 4) Exit Select an option [1-4]: 1 Tell me a name for the client certificate Please, use one word only, no special characters Client name: iphone7 This will generate a .ovpn file, which needs to be copied to your client machine (oftentimes using the OpenVPN app). This process also generates a few other files found in /etc/openvpn/server/easy-rsa/pki/ , which make public key authentication possible; you only need to worry about the .ovpn file, though. Connect a client using the .ovpn file \u00b6 The OpenVPN documentation has some decent guides on connecting desktop clients for Mac, Windows, and Linux , so we'll instead explain how to connect a mobile device since that provides the most usefulness in today's world-- connecting to your ad-blocking VPN via a mobile device . We'll go through two examples: connect an iPhone using the OpenVPN Connect mobile app (see here for Android) connect a Linux machine iOS \u00b6 First, make sure the OpenVPN connect app is installed on your phone or mobile device. Import the .ovpn file into iOS. There are several ways to do this, but be careful about transferring it over an insecure medium. Airdrop the file from another device Store the file in a cloud app and open it ion your device Message the file to yourself (not recommended) Email the file to yourself (not recommended) Warning Anyone who gets his hands on this configuration/certificate file can obtain full access to your VPN. Make sure that you use only trusted paths for transferring the file (e.g. never send it via an unencrypted channel, e.g. email or FTP). The best strategy is to use a USB thumb drive to avoid any network transport at all (when possible). Make sure to delete the certificate on the USB drive afterward. Notice If one of your certificates has been compromised, remove it using option 2 when you run the installer and generate a new certificate. This will effectively lock out anyone who might have gotten access to the certificate. Once you get it on your device, you can open the file in the OpenVPN app. Click the green plus to add the profile to your phone. You can connect from within the app or you can connect from the Settings app once you grant it access to do so. Linux \u00b6 We'll demonstrate the procedure here for Ubuntu Linux (which trivially extends to Linux Mint, etc.) Install the necessary network-manager plugins sudo apt-get install network-manager-openvpn network-manager-openvpn-gnome sudo service network-manager restart Securely copy the necessary certificates from your OpenVPN server to your client (e.g. using sftp ). They are located in /etc/openvpn/server/easy-rsa/pki You will need: User Certificate: /etc/openvpn/server/easy-rsa/pki/issued/client.crt CA Certificate: /etc/openvpn/server/easy-rsa/pki/ca.crt Private Key: /etc/openvpn/server/easy-rsa/pki/private/client.key Private Key Password: Depending on your settings (might even be empty) TA Key: /etc/openvpn/server/ta.key Further details can be found in the screenshots provided below: Your whole network traffic will now securely be transferred to your Pi-hole. Windows \u00b6 You will have to install additional software. See https://openvpn.net/community-downloads/","title":"General"},{"location":"guides/vpn/clients/#create-a-client-config-file-ovpn","text":"Now that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are. Doing so requires the use of a certificate. You generate these and the resulting .ovpn file by running the installer and choosing 1) Add a new user for each client that will connect to the VPN. You can repeat this process for as many clients as you need. In this example, we'll \"Add a new user\" by naming the .ovpn file the same as the client's hostname but you may want to adopt your own naming strategy. Run the OpenVPN installer again ./openvpn-install.sh Choose 1) Add a new user and enter a client name Looks like OpenVPN is already installed What do you want to do? 1) Add a new user 2) Revoke an existing user 3) Remove OpenVPN 4) Exit Select an option [1-4]: 1 Tell me a name for the client certificate Please, use one word only, no special characters Client name: iphone7 This will generate a .ovpn file, which needs to be copied to your client machine (oftentimes using the OpenVPN app). This process also generates a few other files found in /etc/openvpn/server/easy-rsa/pki/ , which make public key authentication possible; you only need to worry about the .ovpn file, though.","title":"Create a client config file (.ovpn)"},{"location":"guides/vpn/clients/#connect-a-client-using-the-ovpn-file","text":"The OpenVPN documentation has some decent guides on connecting desktop clients for Mac, Windows, and Linux , so we'll instead explain how to connect a mobile device since that provides the most usefulness in today's world-- connecting to your ad-blocking VPN via a mobile device . We'll go through two examples: connect an iPhone using the OpenVPN Connect mobile app (see here for Android) connect a Linux machine","title":"Connect a client using the .ovpn file"},{"location":"guides/vpn/clients/#ios","text":"First, make sure the OpenVPN connect app is installed on your phone or mobile device. Import the .ovpn file into iOS. There are several ways to do this, but be careful about transferring it over an insecure medium. Airdrop the file from another device Store the file in a cloud app and open it ion your device Message the file to yourself (not recommended) Email the file to yourself (not recommended) Warning Anyone who gets his hands on this configuration/certificate file can obtain full access to your VPN. Make sure that you use only trusted paths for transferring the file (e.g. never send it via an unencrypted channel, e.g. email or FTP). The best strategy is to use a USB thumb drive to avoid any network transport at all (when possible). Make sure to delete the certificate on the USB drive afterward. Notice If one of your certificates has been compromised, remove it using option 2 when you run the installer and generate a new certificate. This will effectively lock out anyone who might have gotten access to the certificate. Once you get it on your device, you can open the file in the OpenVPN app. Click the green plus to add the profile to your phone. You can connect from within the app or you can connect from the Settings app once you grant it access to do so.","title":"iOS"},{"location":"guides/vpn/clients/#linux","text":"We'll demonstrate the procedure here for Ubuntu Linux (which trivially extends to Linux Mint, etc.) Install the necessary network-manager plugins sudo apt-get install network-manager-openvpn network-manager-openvpn-gnome sudo service network-manager restart Securely copy the necessary certificates from your OpenVPN server to your client (e.g. using sftp ). They are located in /etc/openvpn/server/easy-rsa/pki You will need: User Certificate: /etc/openvpn/server/easy-rsa/pki/issued/client.crt CA Certificate: /etc/openvpn/server/easy-rsa/pki/ca.crt Private Key: /etc/openvpn/server/easy-rsa/pki/private/client.key Private Key Password: Depending on your settings (might even be empty) TA Key: /etc/openvpn/server/ta.key Further details can be found in the screenshots provided below: Your whole network traffic will now securely be transferred to your Pi-hole.","title":"Linux"},{"location":"guides/vpn/clients/#windows","text":"You will have to install additional software. See https://openvpn.net/community-downloads/","title":"Windows"},{"location":"guides/vpn/dual-VPN/","text":"Dual VPN Setup - Separate DNS and VPN Traffic \u00b6 In order to separate VPN traffic from DNS queries, you will need to run two VPN servers. One server routes the normal user traffic and the second routes only DNS requests. This can be done with two OpenVPN configurations. Prerequisites and Configuration \u00b6 You should have an existing OpenVPN server configured and running. We are going to use the original configuration file located at /etc/openvpn/server/server.conf . First, copy the file: sudo cp /etc/openvpn/server/server.conf /etc/openvpn/server/server2.conf Next, exit the new copy of the configuration. We use the nano editor in this example, but any editor will work. Remember to edit under the root account via sudo . sudo nano /etc/openvpn/server/server2.conf We will need to change the port to one different from the original so that it does not conflict with the first instance of OpenVPN. Assuming you used the default port configuration, you should have 1194 as the port. You need to change this to a different value, making sure the port is available - 1195 should be. Next, if needed, port forward the newly configured port from your router to your device. You will also need to assign a different class of IP addresses that will serve this connection only. Your server line should look like this: server 10.9.0.0 255.255.255.0 Make sure that the DNS requests go through the instance of OpenVPN: push \"dhcp-option DNS 10.9.0.1\" One other setting that we need to change is to comment out the bypass-dhcp instruction so that it looks like: # push \"redirect-gateway def1 bypass-dhcp\"`. Commenting out this line ensures that no traffic is routed via the VPN server. Save the file and start the second instance of OpenVPN: systemctl start openvpn@server2.service If your distribution does not have systemctl you may use the command below to start an OpenVPN daemon with your second configuration: /usr/sbin/openvpn --daemon --writepid /var/run/openvpn/server2.pid --cd /etc/openvpn --config server2.conf --script-security 2 Finally, edit the existing .ovpn file used for the client connection. Update the port from the previous value to the port you used for the second instance of OpenVPN. Testing \u00b6 Before testing, make sure that: Port forwarding is configured for the second instance of OpenVPN. ps ax | grep openvpn shows two instances of OpenVPN running (with different configs). The modified ovpn file is loaded on the client. Note: when connected to your DNS only VPN connection * you will not get a Pi-hole splash page when accessing a blocked domain directly.** The page will not load or it may load with an error. This is because the web server traffic is not routed through the VPN. We did not create an iptables rule for masquerading, and the return packets (since they are not part of the same LAN subset as your VPN Client) are prevented.*","title":"Optional: Full and DNS-only"},{"location":"guides/vpn/dual-VPN/#dual-vpn-setup-separate-dns-and-vpn-traffic","text":"In order to separate VPN traffic from DNS queries, you will need to run two VPN servers. One server routes the normal user traffic and the second routes only DNS requests. This can be done with two OpenVPN configurations.","title":"Dual VPN Setup - Separate DNS and VPN Traffic"},{"location":"guides/vpn/dual-VPN/#prerequisites-and-configuration","text":"You should have an existing OpenVPN server configured and running. We are going to use the original configuration file located at /etc/openvpn/server/server.conf . First, copy the file: sudo cp /etc/openvpn/server/server.conf /etc/openvpn/server/server2.conf Next, exit the new copy of the configuration. We use the nano editor in this example, but any editor will work. Remember to edit under the root account via sudo . sudo nano /etc/openvpn/server/server2.conf We will need to change the port to one different from the original so that it does not conflict with the first instance of OpenVPN. Assuming you used the default port configuration, you should have 1194 as the port. You need to change this to a different value, making sure the port is available - 1195 should be. Next, if needed, port forward the newly configured port from your router to your device. You will also need to assign a different class of IP addresses that will serve this connection only. Your server line should look like this: server 10.9.0.0 255.255.255.0 Make sure that the DNS requests go through the instance of OpenVPN: push \"dhcp-option DNS 10.9.0.1\" One other setting that we need to change is to comment out the bypass-dhcp instruction so that it looks like: # push \"redirect-gateway def1 bypass-dhcp\"`. Commenting out this line ensures that no traffic is routed via the VPN server. Save the file and start the second instance of OpenVPN: systemctl start openvpn@server2.service If your distribution does not have systemctl you may use the command below to start an OpenVPN daemon with your second configuration: /usr/sbin/openvpn --daemon --writepid /var/run/openvpn/server2.pid --cd /etc/openvpn --config server2.conf --script-security 2 Finally, edit the existing .ovpn file used for the client connection. Update the port from the previous value to the port you used for the second instance of OpenVPN.","title":"Prerequisites and Configuration"},{"location":"guides/vpn/dual-VPN/#testing","text":"Before testing, make sure that: Port forwarding is configured for the second instance of OpenVPN. ps ax | grep openvpn shows two instances of OpenVPN running (with different configs). The modified ovpn file is loaded on the client. Note: when connected to your DNS only VPN connection * you will not get a Pi-hole splash page when accessing a blocked domain directly.** The page will not load or it may load with an error. This is because the web server traffic is not routed through the VPN. We did not create an iptables rule for masquerading, and the return packets (since they are not part of the same LAN subset as your VPN Client) are prevented.*","title":"Testing"},{"location":"guides/vpn/dual-operation/","text":"Up until now, this wiki has been about a server set up on a cloud host, available on the public Internet. This section is aimed at a server set up in a private network like on a Raspberry Pi. So if blocking works using eth0 but stops working for tun0 , as described here , you may want to run this command pihole -a -i all , which should get the behavior you want by opening pihole-FTL up to listen on all ports. This is not recommended for cloud servers as they should not be listening on eth0 . If you want to set up your Pi-hole + OpenVPN such that you can use from both internal ((W)LAN) and external (VPN) networks, you have to apply some small changes. As an additional benefit, you will be able to reach all devices in the internal network (e.g. computers, networking-aware printers, etc.) through the VPN. This setup assumes that your local network is in the range 192.168.2.0 (i.e. device addresses are in the range of 192.168.2.1 - 192.168.2.254). If this is not the case for you, you have to adjust the settings, accordingly, e.g. devices in 192.168.0.1 - 192.168.0.254 -> route 192.168.0.0 devices in 192.168.123.1 - 192.168.123.254 -> route 192.168.123.0 Edit your /etc/openvpn/server/server.conf : push \"route 192.168.2.0 255.255.255.0\" push \"dhcp-option DNS 192.168.2.123\" As you can see, we change the address of the DNS server to the local IP address of our Pi-hole (which is 192.168.2.123 in this example). Afterward, we change the interface of Pi-hole to eth0 (your local network adapter instead of the VPN adapter tun0 ). This can conveniently be done by using pihole -r + Reconfigure . After a restart of the OpenVPN server, all clients should be able to see all devices within your (at home) local network. This is an example running on a distant server, which is connected through the VPN and can successfully communicate with all internal devices: me@client ~ $ ifconfig eth0 Link encap:Ethernet HWaddr e0:xx:xx:xx:xx:xx inet addr:134.x.x.x Bcast:134.x.x.x Mask:255.x.x.x inet6 addr: X:X:X:X::X/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:3623911 errors:0 dropped:0 overruns:0 frame:0 TX packets:2803670 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1921375471 ( 1 .9 GB ) TX bytes:1227835028 ( 1 .2 GB ) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:553426 errors:0 dropped:0 overruns:0 frame:0 TX packets:553426 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:113417383 ( 113 .4 MB ) TX bytes:113417383 ( 113 .4 MB ) tun0 Link encap:UNSPEC HWaddr 00 -00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 inet addr:10.8.0.2 P-t-P:10.8.0.2 Mask:255.255.255.0 UP POINTOPOINT RUNNING NOARP MULTICAST MTU:1500 Metric:1 RX packets:274676 errors:0 dropped:0 overruns:0 frame:0 TX packets:331178 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:100 RX bytes:43745313 ( 43 .7 MB ) TX bytes:43956250 ( 43 .9 MB ) me@client ~ $ ping 192 .168.2.123 PING 192 .168.2.123 ( 192 .168.2.123 ) 56 ( 84 ) bytes of data. 64 bytes from 192 .168.2.123: icmp_seq = 1 ttl = 64 time = 18 .9 ms 64 bytes from 192 .168.2.123: icmp_seq = 2 ttl = 64 time = 18 .9 ms 64 bytes from 192 .168.2.123: icmp_seq = 3 ttl = 64 time = 18 .9 ms 64 bytes from 192 .168.2.123: icmp_seq = 4 ttl = 64 time = 18 .7 ms 64 bytes from 192 .168.2.123: icmp_seq = 5 ttl = 64 time = 18 .7 ms 64 bytes from 192 .168.2.123: icmp_seq = 6 ttl = 64 time = 19 .0 ms ^C --- 192 .168.2.123 ping statistics --- 6 packets transmitted, 6 received, 0 % packet loss, time 5007ms rtt min/avg/max/mdev = 18 .740/18.894/19.017/0.189 ms Important last step \u00b6 The undocumented pihole -a -i all command is simply what runs when you choose Listen on all interfaces, permit all origins (make sure your Pi-hole is firewalled) , which if you've read this far in the tutorial, you should understand that we don't want you to knowingly or unknowing set up an open resolver.","title":"Optional: Dual operation: LAN & VPN at the same time"},{"location":"guides/vpn/dual-operation/#important-last-step","text":"The undocumented pihole -a -i all command is simply what runs when you choose Listen on all interfaces, permit all origins (make sure your Pi-hole is firewalled) , which if you've read this far in the tutorial, you should understand that we don't want you to knowingly or unknowing set up an open resolver.","title":"Important last step"},{"location":"guides/vpn/dynDNS/","text":"If you operate your Pi-hole + OpenVPN at home, you are likely sitting behind a NAT / dynamically changing IP address. In this case, you should set up a dynamic DNS record, which allows you to reach your server. You can exchange the address that has been configured during the setup of OpenVPN like this: vim /etc/openvpn/server/client-common.txt Look for the remote line and adjust it accordingly (remove IP address, add hostname), e.g. remote home.mydomain.de 1194 This change has to be repeated in each client config file ( *.conf ) that you have been created up till now. If you have set up a DDNS domain for your IP address, you will likely need to add a host-record to Pi-hole's settings. pihole -a hostrecord home.mydomain.de 192 .168.1.10 If you don't do this, clients (like the Android OpenVPN client) will not able to connect to the VPN server when inside the internal network (while it will work from outside). Afterward, the client will be able to connect to the VPN server both from inside and outside your local network. Setting up DynDNS update \u00b6 If your router cannot update the dynamic DNS record, you can use for example ddclient . sudo apt install ddclient This configuration file resides in /etc/ddclient.conf . During installation, apt probably already asked you some questions and prepared a useful config file. In general, configuration files look like: # /etc/ddclient.conf # protocol = dyndns2 use = web login = mylogin password = mypassword myhost.dyndns.org If you want to have ddclient running as daemon (recommended!), change also your /etc/default/ddclient to: # Configuration for ddclient scripts # generated from debconf on Do 9. Feb 22:29:13 CET 2017 # # /etc/default/ddclient # Set to \"true\" if ddclient should be run every time DHCP client ('dhclient' # from package isc-dhcp-client) updates the systems IP address. run_dhclient = \"false\" # Set to \"true\" if ddclient should be run every time a new ppp connection is # established. This might be useful, if you are using dial-on-demand. run_ipup = \"false\" # Set to \"true\" if ddclient should run in daemon mode # If this is changed to true, run_ipup and run_dhclient must be set to false. run_daemon = \"true\" # Set the time interval between the updates of the dynamic DNS name in seconds. # This option only takes effect if the ddclient runs in daemon mode. daemon_interval = \"300\" Example: Strato DynDNS \u00b6 In the following, we give an example of how to set up ddclient using the German Internet hosting provider Strato. First, you need to create a subdomain. Then you need to enable DnyDNS for this domain: Afterwards, modify your ddclient config file to look like: protocol = dyndns2 use = if , if = eth0 use = web, web = checkip.dyndns.org server = dyndns.strato.com/nic/update login = strato-login-name password = 'password1234' meine.domain.de where you replace strato-login-name by your Strato login name (most likely your domain name, like maxmustermann.de ), password1234 by the password you configured above (see the third screenshot), and meine.domain.de by the subdomain you created and enabled dynamic DNS for.","title":"Optional: Dynamic DNS"},{"location":"guides/vpn/dynDNS/#setting-up-dyndns-update","text":"If your router cannot update the dynamic DNS record, you can use for example ddclient . sudo apt install ddclient This configuration file resides in /etc/ddclient.conf . During installation, apt probably already asked you some questions and prepared a useful config file. In general, configuration files look like: # /etc/ddclient.conf # protocol = dyndns2 use = web login = mylogin password = mypassword myhost.dyndns.org If you want to have ddclient running as daemon (recommended!), change also your /etc/default/ddclient to: # Configuration for ddclient scripts # generated from debconf on Do 9. Feb 22:29:13 CET 2017 # # /etc/default/ddclient # Set to \"true\" if ddclient should be run every time DHCP client ('dhclient' # from package isc-dhcp-client) updates the systems IP address. run_dhclient = \"false\" # Set to \"true\" if ddclient should be run every time a new ppp connection is # established. This might be useful, if you are using dial-on-demand. run_ipup = \"false\" # Set to \"true\" if ddclient should run in daemon mode # If this is changed to true, run_ipup and run_dhclient must be set to false. run_daemon = \"true\" # Set the time interval between the updates of the dynamic DNS name in seconds. # This option only takes effect if the ddclient runs in daemon mode. daemon_interval = \"300\"","title":"Setting up DynDNS update"},{"location":"guides/vpn/dynDNS/#example-strato-dyndns","text":"In the following, we give an example of how to set up ddclient using the German Internet hosting provider Strato. First, you need to create a subdomain. Then you need to enable DnyDNS for this domain: Afterwards, modify your ddclient config file to look like: protocol = dyndns2 use = if , if = eth0 use = web, web = checkip.dyndns.org server = dyndns.strato.com/nic/update login = strato-login-name password = 'password1234' meine.domain.de where you replace strato-login-name by your Strato login name (most likely your domain name, like maxmustermann.de ), password1234 by the password you configured above (see the third screenshot), and meine.domain.de by the subdomain you created and enabled dynamic DNS for.","title":"Example: Strato DynDNS"},{"location":"guides/vpn/firewall/","text":"(optional) Secure the server with firewall rules ( iptables ) \u00b6 **If you are behind a NAT and not running the Pi-hole on a cloud server, you do not need to issue the IPTABLES commands bellow as the firewall rules are already handled by the RoadWarrior installer. This step is optional but recommended if you are running your server in the cloud, such as a droplet made on Digital Ocean . If this is the case, you need to secure the server for your safety as well as others to prevent aiding in DDoS attacks. In addition to the risk of being an open resolver, your Web interface is also open to the world increasing the risk. So you will want to prevent ports 53 and 80, respectively, from being accessible from the public Internet. It's recommended that you clear out your entire firewall so you have full control over its setup. You have two options for setting up your firewall with your VPN. Option 1: Allow everything from within your VPN \u00b6 Enter this command, which will allow all traffic through the VPN tun0 interface. iptables -I INPUT -i tun0 -j ACCEPT Option 2: Explicitly allow what can be accessed within the VPN \u00b6 These commands will allow DNS and HTTP needed for name resolution (using Pi-hole as a resolver) and accessing the Web interface, respectively. iptables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT iptables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT iptables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT You will also want to enable SSH and VPN access from anywhere. iptables -A INPUT -p tcp --destination-port 22 -j ACCEPT iptables -A INPUT -p tcp --destination-port 1194 -j ACCEPT iptables -A INPUT -p udp --destination-port 1194 -j ACCEPT The next crucial setting is to explicitly allow TCP/IP to do \"three-way handshakes\": iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT Also, we want to allow any loopback traffic, i.e. the server is allowed to talk to itself without any limitations using 127.0.0.0/8: iptables -I INPUT -i lo -j ACCEPT Finally, reject access from anywhere else (i.e. if no rule has matched up to this point): iptables -P INPUT DROP Blocking HTTPS advertisement assets \u00b6 Since you're :head-desk: ing with iptables , you can also use this opportunity to block HTTPS advertisements to improve blocking ads that are loaded via HTTPS and also deal with QUIC. Why doesn't Pi-hole just use a certificate to prevent this? The answer is here . iptables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp-port-unreachable iptables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset iptables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp-port-unreachable Depending on the systems you have connecting, you may benefit from appending --reject-with tcp-reset to the command above. If you still get slow load times of HTTPS assets, the above may help. IPv6 iptables \u00b6 If your server is reachable via IPv6, you'll need to run the same commands but using ip6tables : ip6tables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT ip6tables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT ip6tables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT ip6tables -A INPUT -p tcp --destination-port 22 -j ACCEPT ip6tables -A INPUT -p tcp --destination-port 1194 -j ACCEPT ip6tables -A INPUT -p udp --destination-port 1194 -j ACCEPT ip6tables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT ip6tables -I INPUT -i lo -j ACCEPT ip6tables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp6-port-unreachable ip6tables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset ip6tables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp6-port-unreachable ip6tables -P INPUT DROP View the rules you just created iptables -L --line-numbers and they should look something like this: Chain INPUT (policy DROP) num target prot opt source destination 1 ACCEPT all -- anywhere anywhere 2 ACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED 3 ACCEPT all -- anywhere anywhere 4 ACCEPT tcp -- anywhere anywhere tcp dpt:domain 5 ACCEPT udp -- anywhere anywhere udp dpt:domain 6 ACCEPT tcp -- anywhere anywhere tcp dpt:http 7 ACCEPT udp -- anywhere anywhere udp dpt:80 8 ACCEPT tcp -- anywhere anywhere tcp dpt:ssh 9 ACCEPT tcp -- anywhere anywhere tcp dpt:openvpn 10 ACCEPT udp -- anywhere anywhere udp dpt:openvpn 11 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:domain 12 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:domain 13 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:http 14 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:80 15 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:domain 16 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:http 17 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:domain 18 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:80 19 REJECT tcp -- anywhere anywhere tcp dpt:https reject-with icmp-port-unreachable Chain FORWARD (policy ACCEPT) num target prot opt source destination Chain OUTPUT (policy ACCEPT) num target prot opt source destination Similarly, ip6tables -L --line-numbers should look like this: Chain INPUT (policy DROP) num target prot opt source destination 1 ACCEPT all anywhere anywhere 2 ACCEPT all anywhere anywhere state RELATED,ESTABLISHED 3 ACCEPT tcp anywhere anywhere tcp dpt:domain 4 ACCEPT udp anywhere anywhere udp dpt:domain 5 ACCEPT tcp anywhere anywhere tcp dpt:http 6 ACCEPT udp anywhere anywhere udp dpt:80 7 ACCEPT tcp anywhere anywhere tcp dpt:ssh 8 ACCEPT tcp anywhere anywhere tcp dpt:openvpn 9 ACCEPT udp anywhere anywhere udp dpt:openvpn 10 REJECT tcp anywhere anywhere tcp dpt:https reject-with icmp6-port-unreachable Chain FORWARD (policy ACCEPT) num target prot opt source destination Chain OUTPUT (policy ACCEPT) num target prot opt source destination Verify the rules are working \u00b6 Connect to the VPN as a client and verify you can resolve DNS names as well as access the Pi-hole Web interface. These settings are stored in memory until you save them. If it's not working, you can restart your server to start from scratch. Alternatively, you could also go through and delete lines with iptables -D INPUT <SOME LINE NUMBER> Save your iptables \u00b6 If things look good, you may want to save your rules so you can revert to them if you ever make changes to the firewall. Save them with these commands: iptables-save > /etc/pihole/rules.v4 ip6tables-save > /etc/pihole/rules.v6 Similarly, you can restore these rules: iptables-restore < /etc/pihole/rules.v4 ip6tables-restore < /etc/pihole/rules.v6","title":"Firewall Configuration"},{"location":"guides/vpn/firewall/#optional-secure-the-server-with-firewall-rules-iptables","text":"**If you are behind a NAT and not running the Pi-hole on a cloud server, you do not need to issue the IPTABLES commands bellow as the firewall rules are already handled by the RoadWarrior installer. This step is optional but recommended if you are running your server in the cloud, such as a droplet made on Digital Ocean . If this is the case, you need to secure the server for your safety as well as others to prevent aiding in DDoS attacks. In addition to the risk of being an open resolver, your Web interface is also open to the world increasing the risk. So you will want to prevent ports 53 and 80, respectively, from being accessible from the public Internet. It's recommended that you clear out your entire firewall so you have full control over its setup. You have two options for setting up your firewall with your VPN.","title":"(optional) Secure the server with firewall rules (iptables)"},{"location":"guides/vpn/firewall/#option-1-allow-everything-from-within-your-vpn","text":"Enter this command, which will allow all traffic through the VPN tun0 interface. iptables -I INPUT -i tun0 -j ACCEPT","title":"Option 1: Allow everything from within your VPN"},{"location":"guides/vpn/firewall/#option-2-explicitly-allow-what-can-be-accessed-within-the-vpn","text":"These commands will allow DNS and HTTP needed for name resolution (using Pi-hole as a resolver) and accessing the Web interface, respectively. iptables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT iptables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT iptables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT You will also want to enable SSH and VPN access from anywhere. iptables -A INPUT -p tcp --destination-port 22 -j ACCEPT iptables -A INPUT -p tcp --destination-port 1194 -j ACCEPT iptables -A INPUT -p udp --destination-port 1194 -j ACCEPT The next crucial setting is to explicitly allow TCP/IP to do \"three-way handshakes\": iptables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT Also, we want to allow any loopback traffic, i.e. the server is allowed to talk to itself without any limitations using 127.0.0.0/8: iptables -I INPUT -i lo -j ACCEPT Finally, reject access from anywhere else (i.e. if no rule has matched up to this point): iptables -P INPUT DROP","title":"Option 2: Explicitly allow what can be accessed within the VPN"},{"location":"guides/vpn/firewall/#blocking-https-advertisement-assets","text":"Since you're :head-desk: ing with iptables , you can also use this opportunity to block HTTPS advertisements to improve blocking ads that are loaded via HTTPS and also deal with QUIC. Why doesn't Pi-hole just use a certificate to prevent this? The answer is here . iptables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp-port-unreachable iptables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset iptables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp-port-unreachable Depending on the systems you have connecting, you may benefit from appending --reject-with tcp-reset to the command above. If you still get slow load times of HTTPS assets, the above may help.","title":"Blocking HTTPS advertisement assets"},{"location":"guides/vpn/firewall/#ipv6-iptables","text":"If your server is reachable via IPv6, you'll need to run the same commands but using ip6tables : ip6tables -A INPUT -i tun0 -p tcp --destination-port 53 -j ACCEPT ip6tables -A INPUT -i tun0 -p udp --destination-port 53 -j ACCEPT ip6tables -A INPUT -i tun0 -p tcp --destination-port 80 -j ACCEPT ip6tables -A INPUT -p tcp --destination-port 22 -j ACCEPT ip6tables -A INPUT -p tcp --destination-port 1194 -j ACCEPT ip6tables -A INPUT -p udp --destination-port 1194 -j ACCEPT ip6tables -I INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT ip6tables -I INPUT -i lo -j ACCEPT ip6tables -A INPUT -p udp --dport 80 -j REJECT --reject-with icmp6-port-unreachable ip6tables -A INPUT -p tcp --dport 443 -j REJECT --reject-with tcp-reset ip6tables -A INPUT -p udp --dport 443 -j REJECT --reject-with icmp6-port-unreachable ip6tables -P INPUT DROP View the rules you just created iptables -L --line-numbers and they should look something like this: Chain INPUT (policy DROP) num target prot opt source destination 1 ACCEPT all -- anywhere anywhere 2 ACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED 3 ACCEPT all -- anywhere anywhere 4 ACCEPT tcp -- anywhere anywhere tcp dpt:domain 5 ACCEPT udp -- anywhere anywhere udp dpt:domain 6 ACCEPT tcp -- anywhere anywhere tcp dpt:http 7 ACCEPT udp -- anywhere anywhere udp dpt:80 8 ACCEPT tcp -- anywhere anywhere tcp dpt:ssh 9 ACCEPT tcp -- anywhere anywhere tcp dpt:openvpn 10 ACCEPT udp -- anywhere anywhere udp dpt:openvpn 11 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:domain 12 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:domain 13 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:http 14 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:80 15 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:domain 16 ACCEPT tcp -- 10.8.0.0/24 anywhere tcp dpt:http 17 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:domain 18 ACCEPT udp -- 10.8.0.0/24 anywhere udp dpt:80 19 REJECT tcp -- anywhere anywhere tcp dpt:https reject-with icmp-port-unreachable Chain FORWARD (policy ACCEPT) num target prot opt source destination Chain OUTPUT (policy ACCEPT) num target prot opt source destination Similarly, ip6tables -L --line-numbers should look like this: Chain INPUT (policy DROP) num target prot opt source destination 1 ACCEPT all anywhere anywhere 2 ACCEPT all anywhere anywhere state RELATED,ESTABLISHED 3 ACCEPT tcp anywhere anywhere tcp dpt:domain 4 ACCEPT udp anywhere anywhere udp dpt:domain 5 ACCEPT tcp anywhere anywhere tcp dpt:http 6 ACCEPT udp anywhere anywhere udp dpt:80 7 ACCEPT tcp anywhere anywhere tcp dpt:ssh 8 ACCEPT tcp anywhere anywhere tcp dpt:openvpn 9 ACCEPT udp anywhere anywhere udp dpt:openvpn 10 REJECT tcp anywhere anywhere tcp dpt:https reject-with icmp6-port-unreachable Chain FORWARD (policy ACCEPT) num target prot opt source destination Chain OUTPUT (policy ACCEPT) num target prot opt source destination","title":"IPv6 iptables"},{"location":"guides/vpn/firewall/#verify-the-rules-are-working","text":"Connect to the VPN as a client and verify you can resolve DNS names as well as access the Pi-hole Web interface. These settings are stored in memory until you save them. If it's not working, you can restart your server to start from scratch. Alternatively, you could also go through and delete lines with iptables -D INPUT <SOME LINE NUMBER>","title":"Verify the rules are working"},{"location":"guides/vpn/firewall/#save-your-iptables","text":"If things look good, you may want to save your rules so you can revert to them if you ever make changes to the firewall. Save them with these commands: iptables-save > /etc/pihole/rules.v4 ip6tables-save > /etc/pihole/rules.v6 Similarly, you can restore these rules: iptables-restore < /etc/pihole/rules.v4 ip6tables-restore < /etc/pihole/rules.v6","title":"Save your iptables"},{"location":"guides/vpn/installation/","text":"Install an operating system \u00b6 Once you have your preferred OS up and running. You may already have a server set up on your network, or you may prefer to make a Digital Ocean droplet. In either case, you'll use the quick OpenVPN \"road warrior\" installer. The cloud-hosted server option is convenient if you don't want to host the hardware at home, but you'll need to take additional steps to secure the server as it's available on the public Internet. Failure to do so is not only irresponsible, but you also put yourself and others at risk . Install OpenVPN + Pi-hole \u00b6 A note about security \u00b6 For security purposes, it is recommended that the CA machine should be separate from the machine running OpenVPN. If you lose control of your CA private key, you can no longer trust any certificates from this CA. Anyone with access to this CA private key can sign new certificates without your knowledge, which then can connect to your OpenVPN server without needing to modify anything on the VPN server. Place your CA files on storage that can be offline as much as possible, only to be activated when you need to get a new certificate for a client or server. This is less convenient, so many users will simply decide to install Pi-hole and OpenVPN on a single machine, which is what this guide will walkthrough. Install the OpenVPN server \u00b6 First, download the OpenVPN installer; make it executable, and then run it: wget https://git.io/vpn -O openvpn-install.sh chmod 755 openvpn-install.sh ./openvpn-install.sh Enter your server's IP address and accept all the defaults, unless you require special needs: Welcome to this quick OpenVPN \"road warrior\" installer I need to ask you a few questions before starting the setup You can leave the default options and just press enter if you are ok with them First I need to know the IPv4 address of the network interface you want OpenVPN listening to. IP address: 10.8.0.1 Which protocol do you want for OpenVPN connections? 1) UDP (recommended) 2) TCP Protocol [1-2]: 1 What port do you want OpenVPN listening to? Port: 1194 Which DNS do you want to use with the VPN? 1) Current system resolvers 2) Google 3) OpenDNS 4) NTT 5) Hurricane Electric 6) Verisign DNS [1-6]: 1 Finally, tell me your name for the client certificate Please, use one word only, no special characters Client name: pihole Okay, that was all I needed. We are ready to setup your OpenVPN server now Press any key to continue... Let the installer run... Finished! Your client configuration is available at /root/pihole.ovpn If you want to add more clients, you simply need to run this script again! Install Pi-hole \u00b6 Next, install Pi-hole and choose tun0 as the interface and 10.8.0.1/24 as the IP address. You can accept the rest of the defaults, or configure Pi-hole to your liking. The interface selection is the most important step; if you don't choose tun0 (at least to begin with), it will not work properly. curl -sSL https://install.pi-hole.net | bash","title":"Installation"},{"location":"guides/vpn/installation/#install-an-operating-system","text":"Once you have your preferred OS up and running. You may already have a server set up on your network, or you may prefer to make a Digital Ocean droplet. In either case, you'll use the quick OpenVPN \"road warrior\" installer. The cloud-hosted server option is convenient if you don't want to host the hardware at home, but you'll need to take additional steps to secure the server as it's available on the public Internet. Failure to do so is not only irresponsible, but you also put yourself and others at risk .","title":"Install an operating system"},{"location":"guides/vpn/installation/#install-openvpn-pi-hole","text":"","title":"Install OpenVPN + Pi-hole"},{"location":"guides/vpn/installation/#a-note-about-security","text":"For security purposes, it is recommended that the CA machine should be separate from the machine running OpenVPN. If you lose control of your CA private key, you can no longer trust any certificates from this CA. Anyone with access to this CA private key can sign new certificates without your knowledge, which then can connect to your OpenVPN server without needing to modify anything on the VPN server. Place your CA files on storage that can be offline as much as possible, only to be activated when you need to get a new certificate for a client or server. This is less convenient, so many users will simply decide to install Pi-hole and OpenVPN on a single machine, which is what this guide will walkthrough.","title":"A note about security"},{"location":"guides/vpn/installation/#install-the-openvpn-server","text":"First, download the OpenVPN installer; make it executable, and then run it: wget https://git.io/vpn -O openvpn-install.sh chmod 755 openvpn-install.sh ./openvpn-install.sh Enter your server's IP address and accept all the defaults, unless you require special needs: Welcome to this quick OpenVPN \"road warrior\" installer I need to ask you a few questions before starting the setup You can leave the default options and just press enter if you are ok with them First I need to know the IPv4 address of the network interface you want OpenVPN listening to. IP address: 10.8.0.1 Which protocol do you want for OpenVPN connections? 1) UDP (recommended) 2) TCP Protocol [1-2]: 1 What port do you want OpenVPN listening to? Port: 1194 Which DNS do you want to use with the VPN? 1) Current system resolvers 2) Google 3) OpenDNS 4) NTT 5) Hurricane Electric 6) Verisign DNS [1-6]: 1 Finally, tell me your name for the client certificate Please, use one word only, no special characters Client name: pihole Okay, that was all I needed. We are ready to setup your OpenVPN server now Press any key to continue... Let the installer run... Finished! Your client configuration is available at /root/pihole.ovpn If you want to add more clients, you simply need to run this script again!","title":"Install the OpenVPN server"},{"location":"guides/vpn/installation/#install-pi-hole","text":"Next, install Pi-hole and choose tun0 as the interface and 10.8.0.1/24 as the IP address. You can accept the rest of the defaults, or configure Pi-hole to your liking. The interface selection is the most important step; if you don't choose tun0 (at least to begin with), it will not work properly. curl -sSL https://install.pi-hole.net | bash","title":"Install Pi-hole"},{"location":"guides/vpn/only-dns-via-vpn/","text":"Optional: Only route DNS via VPN \u00b6 With this setup, you will force connected clients to use only the DNS provided by the VPN connection, i.e. the Pi-hole. Do this only if you don't want to tunnel all traffic from the client through the VPN, but only its DNS queries. Edit your /etc/openvpn/server/server.conf and remove (comment out) the following line: # push \"redirect-gateway def1 bypass-dhcp\" Using a client config file \u00b6 This works pretty much out of the box with common client.ovpn files, like this provided one: client.ovpn Remember to replace the locations of your keys and the address/hostname of your server. Using the Network Manager \u00b6 When using the Network Manager, you will have to do some additional setting on the client's side of things: Alternative 1: Disable Network Manager's internal DNS server \u00b6 Edit /etc/NetworkManager/NetworkManager.conf : # dns=dnsmasq and restart the Network Manager: sudo restart network-manager When connecting your DNS server will now be properly picked up and used by your client. Alternative 2: Set DNS server address of your Pi-hole manually on the main interface \u00b6 You can also set the address of the DNS server manually (use the device which actually connects to the internet, e.g. eth0 ): After doing either alternative, you should see: pi.hole has address W.X.Y.Z (outside address of your VPN server) pi.hole has IPv6 address A:B:C:D:E:F (outside address of your VPN server) The web interface of your Pi-hole will be visible at http://pi.hole/admin/ (even with the recommended firewall configuration mentioned on another subpage) Troubleshooting \u00b6 If your new DNS server configuration has not been activated (try restarting the interface/system) you will see host pi.hole Host pi.hole not found: 3(NXDOMAIN) If you are not connected to your VPN network you will see host pi.hole ;; connection timed out; no servers could be reached","title":"Optional: Only route DNS via VPN"},{"location":"guides/vpn/only-dns-via-vpn/#optional-only-route-dns-via-vpn","text":"With this setup, you will force connected clients to use only the DNS provided by the VPN connection, i.e. the Pi-hole. Do this only if you don't want to tunnel all traffic from the client through the VPN, but only its DNS queries. Edit your /etc/openvpn/server/server.conf and remove (comment out) the following line: # push \"redirect-gateway def1 bypass-dhcp\"","title":"Optional: Only route DNS via VPN"},{"location":"guides/vpn/only-dns-via-vpn/#using-a-client-config-file","text":"This works pretty much out of the box with common client.ovpn files, like this provided one: client.ovpn Remember to replace the locations of your keys and the address/hostname of your server.","title":"Using a client config file"},{"location":"guides/vpn/only-dns-via-vpn/#using-the-network-manager","text":"When using the Network Manager, you will have to do some additional setting on the client's side of things:","title":"Using the Network Manager"},{"location":"guides/vpn/only-dns-via-vpn/#alternative-1-disable-network-managers-internal-dns-server","text":"Edit /etc/NetworkManager/NetworkManager.conf : # dns=dnsmasq and restart the Network Manager: sudo restart network-manager When connecting your DNS server will now be properly picked up and used by your client.","title":"Alternative 1: Disable Network Manager's internal DNS server"},{"location":"guides/vpn/only-dns-via-vpn/#alternative-2-set-dns-server-address-of-your-pi-hole-manually-on-the-main-interface","text":"You can also set the address of the DNS server manually (use the device which actually connects to the internet, e.g. eth0 ): After doing either alternative, you should see: pi.hole has address W.X.Y.Z (outside address of your VPN server) pi.hole has IPv6 address A:B:C:D:E:F (outside address of your VPN server) The web interface of your Pi-hole will be visible at http://pi.hole/admin/ (even with the recommended firewall configuration mentioned on another subpage)","title":"Alternative 2: Set DNS server address of your Pi-hole manually on the main interface"},{"location":"guides/vpn/only-dns-via-vpn/#troubleshooting","text":"If your new DNS server configuration has not been activated (try restarting the interface/system) you will see host pi.hole Host pi.hole not found: 3(NXDOMAIN) If you are not connected to your VPN network you will see host pi.hole ;; connection timed out; no servers could be reached","title":"Troubleshooting"},{"location":"guides/vpn/overview/","text":"This tutorial is tailored for setting up OpenVPN on a cloud-hosted virtual server (such as Digital Ocean ). If you wish to have this working on your home network, you will need to tailor Pi-hole to listen on eth0 (or similar), which we explain in this section of the tutorial . High-level Overview \u00b6 Using a VPN is a responsible, respectful, and safe way to access your Pi-hole's capabilities remotely. Setting up a DNS server has become a simple task with Pi-hole's automated installer, which has resulted in many people knowingly--or unknowingly--creating an open resolver, which aids in DNS Amplification Attacks. We do not encourage open resolvers but there are always people wanting access to their ad-blocking capabilities outside of their home network, whether it's on their cellular network or on an unsecured wireless network. This article aims to provide a step-by-step walk-through on setting up a server running Pi-hole and OpenVPN so you can connect to your Pi-hole's DNS from anywhere. This guide should work for a private server installed on your private network, but it will also work for cloud servers, such as those created on Digital Ocean . This tutorial walks you through the installation of Pi-hole combined with a VPN server for secure access from remote clients . Via this VPN, you can: use the DNS server and full filtering capabilities of your Pi-hole from everywhere around the globe access your admin interface remotely encrypt your Internet traffic If you don't want a full-tunnel, we provide a page of how to set up your server to exclusively route DNS traffic, but nothing else via the VPN . On another optional page, we describe how to set up Pi-hole + VPN in such a way that it is usable both locally (no VPN) and from remote (through VPN) while preserving full functionality. In the end, you will have access to a VPN that uses Pi-hole for DNS and tunnels some or all of your network traffic This manual is partially based on this HowTo on Discourse .","title":"Overview"},{"location":"guides/vpn/overview/#high-level-overview","text":"Using a VPN is a responsible, respectful, and safe way to access your Pi-hole's capabilities remotely. Setting up a DNS server has become a simple task with Pi-hole's automated installer, which has resulted in many people knowingly--or unknowingly--creating an open resolver, which aids in DNS Amplification Attacks. We do not encourage open resolvers but there are always people wanting access to their ad-blocking capabilities outside of their home network, whether it's on their cellular network or on an unsecured wireless network. This article aims to provide a step-by-step walk-through on setting up a server running Pi-hole and OpenVPN so you can connect to your Pi-hole's DNS from anywhere. This guide should work for a private server installed on your private network, but it will also work for cloud servers, such as those created on Digital Ocean . This tutorial walks you through the installation of Pi-hole combined with a VPN server for secure access from remote clients . Via this VPN, you can: use the DNS server and full filtering capabilities of your Pi-hole from everywhere around the globe access your admin interface remotely encrypt your Internet traffic If you don't want a full-tunnel, we provide a page of how to set up your server to exclusively route DNS traffic, but nothing else via the VPN . On another optional page, we describe how to set up Pi-hole + VPN in such a way that it is usable both locally (no VPN) and from remote (through VPN) while preserving full functionality. In the end, you will have access to a VPN that uses Pi-hole for DNS and tunnels some or all of your network traffic This manual is partially based on this HowTo on Discourse .","title":"High-level Overview"},{"location":"guides/vpn/setup-openvpn-server/","text":"Change OpenVPN's resolvers \u00b6 First, find the IP of your tun0 interface: On Jessie ifconfig tun0 | grep 'inet addr' On Stretch ip a Edit the OpenVPN config file: vim /etc/openvpn/server/server.conf Set this line to use your Pi-hole's IP address, which you determined from the ifconfig command and comment out or remove the other line (if it exists): push \"dhcp-option DNS 10.8.0.1\" #push \"dhcp-option DNS 8.8.8.8\" This push directive is setting a DHCP option , which tells clients connecting to the VPN that they should use Pi-hole as their primary DNS server. It's suggested to have Pi-hole be the only resolver as it defines the upstream servers. Setting a non-Pi-hole resolver here may have adverse effects on ad blocking but it can provide failover connectivity in the case of Pi-hole not working if that is something you are concerned about. Furthermore, you might want to enable logging for your OpenVPN server. In this case, add the following lines to your server's config file: log /var/log/openvpn.log verb 3 Restart OpenVPN to apply the changes \u00b6 Depending on your operating system, one of these commands should work to restart the service. systemctl restart openvpn-server@server service openvpn-server@server restart Create a client config file ( .ovpn ) \u00b6 Now that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are. Doing so requires the use of a certificate. You generate these and the resulting .ovpn file by running the installer and choosing 1) Add a new user for each client that will connect to the VPN. You can repeat this process for as many clients as you need. In this example, we'll \"Add a new user\" by naming the .ovpn file the same as the client's hostname but you may want to adopt your own naming strategy. Run the OpenVPN installer again ./openvpn-install.sh Choose 1) Add a new user and enter a client name Looks like OpenVPN is already installed What do you want to do? 1) Add a new user 2) Revoke an existing user 3) Remove OpenVPN 4) Exit Select an option [1-4]: 1 Tell me a name for the client certificate Please, use one word only, no special characters Client name: iphone7 This will generate a .ovpn file, which needs to be copied to your client machine (oftentimes using the OpenVPN app). This process also generates a few other files found in /etc/openvpn/server/easy-rsa/pki/ , which make public key authentication possible; you only need to worry about the .ovpn file, though.","title":"Setup OpenVPN Server"},{"location":"guides/vpn/setup-openvpn-server/#change-openvpns-resolvers","text":"First, find the IP of your tun0 interface: On Jessie ifconfig tun0 | grep 'inet addr' On Stretch ip a Edit the OpenVPN config file: vim /etc/openvpn/server/server.conf Set this line to use your Pi-hole's IP address, which you determined from the ifconfig command and comment out or remove the other line (if it exists): push \"dhcp-option DNS 10.8.0.1\" #push \"dhcp-option DNS 8.8.8.8\" This push directive is setting a DHCP option , which tells clients connecting to the VPN that they should use Pi-hole as their primary DNS server. It's suggested to have Pi-hole be the only resolver as it defines the upstream servers. Setting a non-Pi-hole resolver here may have adverse effects on ad blocking but it can provide failover connectivity in the case of Pi-hole not working if that is something you are concerned about. Furthermore, you might want to enable logging for your OpenVPN server. In this case, add the following lines to your server's config file: log /var/log/openvpn.log verb 3","title":"Change OpenVPN's resolvers"},{"location":"guides/vpn/setup-openvpn-server/#restart-openvpn-to-apply-the-changes","text":"Depending on your operating system, one of these commands should work to restart the service. systemctl restart openvpn-server@server service openvpn-server@server restart","title":"Restart OpenVPN to apply the changes"},{"location":"guides/vpn/setup-openvpn-server/#create-a-client-config-file-ovpn","text":"Now that the server is configured, you'll want to connect some clients so you can make use of your Pi-hole wherever you are. Doing so requires the use of a certificate. You generate these and the resulting .ovpn file by running the installer and choosing 1) Add a new user for each client that will connect to the VPN. You can repeat this process for as many clients as you need. In this example, we'll \"Add a new user\" by naming the .ovpn file the same as the client's hostname but you may want to adopt your own naming strategy. Run the OpenVPN installer again ./openvpn-install.sh Choose 1) Add a new user and enter a client name Looks like OpenVPN is already installed What do you want to do? 1) Add a new user 2) Revoke an existing user 3) Remove OpenVPN 4) Exit Select an option [1-4]: 1 Tell me a name for the client certificate Please, use one word only, no special characters Client name: iphone7 This will generate a .ovpn file, which needs to be copied to your client machine (oftentimes using the OpenVPN app). This process also generates a few other files found in /etc/openvpn/server/easy-rsa/pki/ , which make public key authentication possible; you only need to worry about the .ovpn file, though.","title":"Create a client config file (.ovpn)"},{"location":"guides/vpn/troubleshooting/","text":"CRL expired \u00b6 OpenVPN 2.4 and newer check the validity of the Certificate Revocation List (CRL). This can result in a sudden malfunction of openvpn after an update even though no configuration files have changed. This error manifests in the following, not very helpful, error on the client's side: Wed Apr 24 11:19:07 2019 VERIFY OK: depth=0, CN=server Wed Apr 24 11:19:07 2019 Connection reset, restarting [0] Wed Apr 24 11:19:07 2019 SIGUSR1[soft,connection-reset] received, process restarting Wed Apr 24 11:19:07 2019 Restart pause, 5 second(s) Android clients simply report: \"Transport error, trying to reconnect...\" On the OpenVPN server, the following messages are logged: Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS: Initial packet from [AF_INET]aaa.bbb.ccc.ddd:pppp, sid=57719cb8 77945ae9 Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp VERIFY ERROR: depth=0, error=CRL has expired: CN=client1 Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp OpenSSL: error:11089086:SSL routines:ssl3_get_client_certificate:certificate verify failed Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS_ERROR: BIO read tls_read_plaintext error Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS Error: TLS object -> incoming plaintext read error Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS Error: TLS handshake failed Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp Fatal TLS error (check_tls_errors_co), restarting Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp SIGUSR1[soft,tls-error] received, client-instance restarting The error is CRL has expired and can be solved using the following commands: sudo -s cd /etc/openvpn mv crl.pem crl.pem_old cd easy-rsa ./easyrsa gen-crl cp pki/crl.pem ../ service openvpn restart exit","title":"Troubleshooting"},{"location":"guides/vpn/troubleshooting/#crl-expired","text":"OpenVPN 2.4 and newer check the validity of the Certificate Revocation List (CRL). This can result in a sudden malfunction of openvpn after an update even though no configuration files have changed. This error manifests in the following, not very helpful, error on the client's side: Wed Apr 24 11:19:07 2019 VERIFY OK: depth=0, CN=server Wed Apr 24 11:19:07 2019 Connection reset, restarting [0] Wed Apr 24 11:19:07 2019 SIGUSR1[soft,connection-reset] received, process restarting Wed Apr 24 11:19:07 2019 Restart pause, 5 second(s) Android clients simply report: \"Transport error, trying to reconnect...\" On the OpenVPN server, the following messages are logged: Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS: Initial packet from [AF_INET]aaa.bbb.ccc.ddd:pppp, sid=57719cb8 77945ae9 Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp VERIFY ERROR: depth=0, error=CRL has expired: CN=client1 Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp OpenSSL: error:11089086:SSL routines:ssl3_get_client_certificate:certificate verify failed Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS_ERROR: BIO read tls_read_plaintext error Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS Error: TLS object -> incoming plaintext read error Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp TLS Error: TLS handshake failed Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp Fatal TLS error (check_tls_errors_co), restarting Wed Apr 24 11:19:07 2019 aaa.bbb.ccc.ddd:pppp SIGUSR1[soft,tls-error] received, client-instance restarting The error is CRL has expired and can be solved using the following commands: sudo -s cd /etc/openvpn mv crl.pem crl.pem_old cd easy-rsa ./easyrsa gen-crl cp pki/crl.pem ../ service openvpn restart exit","title":"CRL expired"},{"location":"main/basic-install/","text":"One-Step Automated Install \u00b6 Those who want to get started quickly and conveniently may install Pi-hole using the following command: curl -sSL https://install.pi-hole.net | bash Info Piping to bash is a controversial topic , as it prevents you from reading code that is about to run on your system. If you would prefer to review the code before installation, we provide these alternative installation methods. Alternative 1: Clone our repository and run \u00b6 git clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole cd \"Pi-hole/automated install/\" sudo bash basic-install.sh Alternative 2: Manually download the installer and run \u00b6 wget -O basic-install.sh https://install.pi-hole.net sudo bash basic-install.sh","title":"Installation"},{"location":"main/basic-install/#one-step-automated-install","text":"Those who want to get started quickly and conveniently may install Pi-hole using the following command: curl -sSL https://install.pi-hole.net | bash Info Piping to bash is a controversial topic , as it prevents you from reading code that is about to run on your system. If you would prefer to review the code before installation, we provide these alternative installation methods.","title":"One-Step Automated Install"},{"location":"main/basic-install/#alternative-1-clone-our-repository-and-run","text":"git clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole cd \"Pi-hole/automated install/\" sudo bash basic-install.sh","title":"Alternative 1: Clone our repository and run"},{"location":"main/basic-install/#alternative-2-manually-download-the-installer-and-run","text":"wget -O basic-install.sh https://install.pi-hole.net sudo bash basic-install.sh","title":"Alternative 2: Manually download the installer and run"},{"location":"main/contact/","text":"While we are primarily reachable on our Discourse User Forum , we can also be found on a variety of social media outlets. Please be sure to check the FAQ's before starting a new discussion, as we do not have the spare time to reply to every request for assistance. Frequently Asked Questions Feature Requests Reddit Twitter YouTube Facebook","title":"Contact Us"},{"location":"main/coverage/","text":"YouTube/Twit/Video \u00b6 Security Now Netcast: Pi-hole Oct 13, 2015 TekThing: Raspberry Pi-Hole Makes Ads Disappear! Dec 18, 2015 Foolish Tech Show Dec 23, 2015 Digital Trends: 5 Fun, Easy Projects You Can Try With a $35 Raspberry Pi Mar 22, 2016 Adafruit: Raspberry Pi Quick Look at Pi Hole ad blocking server with Tony D Jun 20, 2016 The Defrag Show: Endoscope USB Camera, The Final [HoloLens] Vote, Adblock Pi and more Jan 27, 2016 Know How 355: Killing ads with a Raspberry Pi-Hole! Nov 9, 2017 Linus Tech Tips: Block EVERY Online Ad with THIS Aug 28, 2019 Podcasts \u00b6 MacObserver Podcast 585 Dec 27, 2015 Blogs \u00b6 Lifehacker: Turn A Raspberry Pi Into An Ad Blocker With A Single Command Feb 17, 2015 MakeUseOf: Adblock Everywhere: The Raspberry Pi-Hole Way Mar 25, 2015 Catchpoint: Ad-Blocking on Apple iOS9: Valuing the End User Experience Sept 14, 2015 Adafruit: Pi-hole is a black hole for internet ads Mar 4, 2016 Devacron: OrangePi Zero as an Ad-Block server with Pi-Hole Dec 3, 2016 Linux Pro: The Hole Truth 2017 CryptoAUSTRALIA: How We Tried 5 Privacy Focused Raspberry Pi Projects Oct 5, 2017 CryptoAUSTRALIA: Pi-hole Workshop Nov 2, 2017 Bloomberg: Inside the Brotherhood of the Ad Blockers May 10, 2018 How a Single Raspberry PI made my Home Network Faster March 1, 2019 Coding Horror: An Exercise Program for the Fat Web May 30, 2019","title":"On the Web"},{"location":"main/coverage/#youtubetwitvideo","text":"Security Now Netcast: Pi-hole Oct 13, 2015 TekThing: Raspberry Pi-Hole Makes Ads Disappear! Dec 18, 2015 Foolish Tech Show Dec 23, 2015 Digital Trends: 5 Fun, Easy Projects You Can Try With a $35 Raspberry Pi Mar 22, 2016 Adafruit: Raspberry Pi Quick Look at Pi Hole ad blocking server with Tony D Jun 20, 2016 The Defrag Show: Endoscope USB Camera, The Final [HoloLens] Vote, Adblock Pi and more Jan 27, 2016 Know How 355: Killing ads with a Raspberry Pi-Hole! Nov 9, 2017 Linus Tech Tips: Block EVERY Online Ad with THIS Aug 28, 2019","title":"YouTube/Twit/Video"},{"location":"main/coverage/#podcasts","text":"MacObserver Podcast 585 Dec 27, 2015","title":"Podcasts"},{"location":"main/coverage/#blogs","text":"Lifehacker: Turn A Raspberry Pi Into An Ad Blocker With A Single Command Feb 17, 2015 MakeUseOf: Adblock Everywhere: The Raspberry Pi-Hole Way Mar 25, 2015 Catchpoint: Ad-Blocking on Apple iOS9: Valuing the End User Experience Sept 14, 2015 Adafruit: Pi-hole is a black hole for internet ads Mar 4, 2016 Devacron: OrangePi Zero as an Ad-Block server with Pi-Hole Dec 3, 2016 Linux Pro: The Hole Truth 2017 CryptoAUSTRALIA: How We Tried 5 Privacy Focused Raspberry Pi Projects Oct 5, 2017 CryptoAUSTRALIA: Pi-hole Workshop Nov 2, 2017 Bloomberg: Inside the Brotherhood of the Ad Blockers May 10, 2018 How a Single Raspberry PI made my Home Network Faster March 1, 2019 Coding Horror: An Exercise Program for the Fat Web May 30, 2019","title":"Blogs"},{"location":"main/origins/","text":"Pi-hole being a advertising-aware DNS /Web server , makes use of the following technologies: dnsmasq - a lightweight DNS and DHCP server curl - A command-line tool for transferring data with URL syntax lighttpd - web server designed and optimized for high performance php - a popular general-purpose web scripting language AdminLTE Dashboard - premium admin control panel based on Bootstrap 3.x sqlite3 - SQL Database engine While quite outdated at this point, this original blog post about Pi-hole goes into great detail about how Pi-hole was originally set up and how it works. Syntactically, it's no longer accurate, but the same basic principles and logic still apply to Pi-hole's current state.","title":"Pi-hole Origins"},{"location":"main/post-install/","text":"Making your network take advantage of Pi-hole \u00b6 Once the installer has been run, you will need to configure your router to have DHCP clients use Pi-hole as their DNS server which ensures that all devices connecting to your network will have content blocked without any further intervention. If your router does not support setting the DNS server, you can use Pi-hole's built-in DHCP server ; just be sure to disable DHCP on your router first (if it has that feature available). As a last resort, you can always manually set each device to use Pi-hole as their DNS server.","title":"Post-Install"},{"location":"main/post-install/#making-your-network-take-advantage-of-pi-hole","text":"Once the installer has been run, you will need to configure your router to have DHCP clients use Pi-hole as their DNS server which ensures that all devices connecting to your network will have content blocked without any further intervention. If your router does not support setting the DNS server, you can use Pi-hole's built-in DHCP server ; just be sure to disable DHCP on your router first (if it has that feature available). As a last resort, you can always manually set each device to use Pi-hole as their DNS server.","title":"Making your network take advantage of Pi-hole"},{"location":"main/prerequesites/","text":"Hardware \u00b6 Pi-hole is very lightweight and does not require much processing power ~52MB of free space 512MB RAM Despite the name, you are not limited to running Pi-hole on a Raspberry Pi. Any hardware that runs one of the supported operating systems will do! Supported Operating Systems \u00b6 The following operating systems are officially supported: Distribution Release Architecture Raspbian Stretch / Buster ARM Ubuntu 16.x / 18.x ARM / x86_64 Debian 9 / 10 ARM / x86_64 / i386 Fedora 31 / 32 ARM / x86_64 CentOS 7 / 8 x86_64 IP Addressing \u00b6 Pi-hole needs a static IP address to properly function (a DHCP reservation is just fine). Users may run into issues because we currently install dhcpcd5 , which may conflict with other running network managers such as dhclient , dhcpcd , networkmanager , and systemd-networkd . As part of our install process, we append some lines to /etc/dhcpcd.conf in order to statically assign an IP address , so take note of this before installing. Please be aware of this fact because it may cause confusion . This is not the ideal situation for us to be in but, since a significant portion of our users are running Pi-hole on Raspbian - and because Pi-hole's roots began with the Raspberry Pi - it's a problem that is difficult to get away from . Due to the complexity of different ways of setting an IP address across different systems, it's a slow process and we need help . If you're willing to contribute, please let us know. Ports \u00b6 Service Port Protocol Notes pihole- FTL 53 ( DNS ) TCP / UDP If you happen to have another DNS server running, such as BIND, you will need to turn it off in order for Pi-hole to respond to DNS queries. pihole- FTL 67 ( DHCP ) IPv4 UDP The DHCP server is an optional feature that requires additional ports. pihole- FTL 547 ( DHCPv6 ) IPv6 UDP The DHCP server is an optional feature that requires additional ports. lighttpd 80 ( HTTP ) TCP If you have another Web server already running, such as Apache, Pi-hole's Web server will not work. You can either disable the other Web server or change the port on which lighttpd listens, which allows you keep both Web servers running. pihole- FTL 4711-4720 TCP FTL is our API engine and uses port 4711 on the localhost interface. This port should not be accessible from any other interface. Info The use of lighttpd on port 80 is optional if you decide not to install the Web dashboard during installation. The use of pihole- FTL on ports 67 or 547 is optional, but required if you use the DHCP functions of Pi-hole. Firewalls \u00b6 Below are some examples of firewall rules that will need to be set on your Pi-hole server in order to use the functions available. These are only shown as guides, the actual commands used will be found with your distribution's documentation. Because Pi-hole was designed to work inside a local network, the following rules will block the traffic from the Internet for security reasons. 192.168.0.0/16 is the most common local network IP range for home users but it can be different in your case, for example other common local network IPs are 10.0.0.0/8 and 172.16.0.0/12 . Check your local network settings before applying these rules. IPTables \u00b6 IPTables uses two sets of tables. One set is for IPv4 chains, and the second is for IPv6 chains. If only IPv4 blocking is used for the Pi-hole installation, only apply the rules for IP4Tables. Full Stack ( IPv4 and IPv6 ) require both sets of rules to be applied. Note: These examples insert the rules at the front of the chain. Please see your distribution's documentation for the exact proper command to use. IPTables ( IPv4 ) iptables -I INPUT 1 -s 192 .168.0.0/16 -p tcp -m tcp --dport 80 -j ACCEPT iptables -I INPUT 1 -s 127 .0.0.0/8 -p tcp -m tcp --dport 53 -j ACCEPT iptables -I INPUT 1 -s 127 .0.0.0/8 -p udp -m udp --dport 53 -j ACCEPT iptables -I INPUT 1 -s 192 .168.0.0/16 -p tcp -m tcp --dport 53 -j ACCEPT iptables -I INPUT 1 -s 192 .168.0.0/16 -p udp -m udp --dport 53 -j ACCEPT iptables -I INPUT 1 -p udp --dport 67 :68 --sport 67 :68 -j ACCEPT iptables -I INPUT 1 -p tcp -m tcp --dport 4711 :4720 -i lo -j ACCEPT iptables -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT IP6Tables ( IPv6 ) ip6tables -I INPUT -p udp -m udp --sport 546 :547 --dport 546 :547 -j ACCEPT ip6tables -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT FirewallD \u00b6 Using the --permanent argument will ensure the firewall rules persist reboots. If only IPv4 blocking is used for the Pi-hole installation, the dhcpv6 service can be removed from the commands below. Create a new zone for the local interface ( lo ) for the pihole- FTL ports to ensure the API is only accessible locally. Finally --reload to have the new firewall configuration take effect immediately. firewall-cmd --permanent --add-service = http --add-service = dns --add-service = dhcp --add-service = dhcpv6 firewall-cmd --permanent --new-zone = ftl firewall-cmd --permanent --zone = ftl --add-interface = lo firewall-cmd --permanent --zone = ftl --add-port = 4711 /tcp firewall-cmd --reload ufw \u00b6 ufw stores all rules persistent, so you just need to execute the commands below. IPv4 : ufw allow 80 /tcp ufw allow 53 /tcp ufw allow 53 /udp ufw allow 67 /tcp ufw allow 67 /udp IPv6 (include above IPv4 rules): ufw allow 546 :547/udp","title":"Prerequisites"},{"location":"main/prerequesites/#hardware","text":"Pi-hole is very lightweight and does not require much processing power ~52MB of free space 512MB RAM Despite the name, you are not limited to running Pi-hole on a Raspberry Pi. Any hardware that runs one of the supported operating systems will do!","title":"Hardware"},{"location":"main/prerequesites/#supported-operating-systems","text":"The following operating systems are officially supported: Distribution Release Architecture Raspbian Stretch / Buster ARM Ubuntu 16.x / 18.x ARM / x86_64 Debian 9 / 10 ARM / x86_64 / i386 Fedora 31 / 32 ARM / x86_64 CentOS 7 / 8 x86_64","title":"Supported Operating Systems"},{"location":"main/prerequesites/#ip-addressing","text":"Pi-hole needs a static IP address to properly function (a DHCP reservation is just fine). Users may run into issues because we currently install dhcpcd5 , which may conflict with other running network managers such as dhclient , dhcpcd , networkmanager , and systemd-networkd . As part of our install process, we append some lines to /etc/dhcpcd.conf in order to statically assign an IP address , so take note of this before installing. Please be aware of this fact because it may cause confusion . This is not the ideal situation for us to be in but, since a significant portion of our users are running Pi-hole on Raspbian - and because Pi-hole's roots began with the Raspberry Pi - it's a problem that is difficult to get away from . Due to the complexity of different ways of setting an IP address across different systems, it's a slow process and we need help . If you're willing to contribute, please let us know.","title":"IP Addressing"},{"location":"main/prerequesites/#ports","text":"Service Port Protocol Notes pihole- FTL 53 ( DNS ) TCP / UDP If you happen to have another DNS server running, such as BIND, you will need to turn it off in order for Pi-hole to respond to DNS queries. pihole- FTL 67 ( DHCP ) IPv4 UDP The DHCP server is an optional feature that requires additional ports. pihole- FTL 547 ( DHCPv6 ) IPv6 UDP The DHCP server is an optional feature that requires additional ports. lighttpd 80 ( HTTP ) TCP If you have another Web server already running, such as Apache, Pi-hole's Web server will not work. You can either disable the other Web server or change the port on which lighttpd listens, which allows you keep both Web servers running. pihole- FTL 4711-4720 TCP FTL is our API engine and uses port 4711 on the localhost interface. This port should not be accessible from any other interface. Info The use of lighttpd on port 80 is optional if you decide not to install the Web dashboard during installation. The use of pihole- FTL on ports 67 or 547 is optional, but required if you use the DHCP functions of Pi-hole.","title":"Ports"},{"location":"main/prerequesites/#firewalls","text":"Below are some examples of firewall rules that will need to be set on your Pi-hole server in order to use the functions available. These are only shown as guides, the actual commands used will be found with your distribution's documentation. Because Pi-hole was designed to work inside a local network, the following rules will block the traffic from the Internet for security reasons. 192.168.0.0/16 is the most common local network IP range for home users but it can be different in your case, for example other common local network IPs are 10.0.0.0/8 and 172.16.0.0/12 . Check your local network settings before applying these rules.","title":"Firewalls"},{"location":"main/prerequesites/#iptables","text":"IPTables uses two sets of tables. One set is for IPv4 chains, and the second is for IPv6 chains. If only IPv4 blocking is used for the Pi-hole installation, only apply the rules for IP4Tables. Full Stack ( IPv4 and IPv6 ) require both sets of rules to be applied. Note: These examples insert the rules at the front of the chain. Please see your distribution's documentation for the exact proper command to use. IPTables ( IPv4 ) iptables -I INPUT 1 -s 192 .168.0.0/16 -p tcp -m tcp --dport 80 -j ACCEPT iptables -I INPUT 1 -s 127 .0.0.0/8 -p tcp -m tcp --dport 53 -j ACCEPT iptables -I INPUT 1 -s 127 .0.0.0/8 -p udp -m udp --dport 53 -j ACCEPT iptables -I INPUT 1 -s 192 .168.0.0/16 -p tcp -m tcp --dport 53 -j ACCEPT iptables -I INPUT 1 -s 192 .168.0.0/16 -p udp -m udp --dport 53 -j ACCEPT iptables -I INPUT 1 -p udp --dport 67 :68 --sport 67 :68 -j ACCEPT iptables -I INPUT 1 -p tcp -m tcp --dport 4711 :4720 -i lo -j ACCEPT iptables -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT IP6Tables ( IPv6 ) ip6tables -I INPUT -p udp -m udp --sport 546 :547 --dport 546 :547 -j ACCEPT ip6tables -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT","title":"IPTables"},{"location":"main/prerequesites/#firewalld","text":"Using the --permanent argument will ensure the firewall rules persist reboots. If only IPv4 blocking is used for the Pi-hole installation, the dhcpv6 service can be removed from the commands below. Create a new zone for the local interface ( lo ) for the pihole- FTL ports to ensure the API is only accessible locally. Finally --reload to have the new firewall configuration take effect immediately. firewall-cmd --permanent --add-service = http --add-service = dns --add-service = dhcp --add-service = dhcpv6 firewall-cmd --permanent --new-zone = ftl firewall-cmd --permanent --zone = ftl --add-interface = lo firewall-cmd --permanent --zone = ftl --add-port = 4711 /tcp firewall-cmd --reload","title":"FirewallD"},{"location":"main/prerequesites/#ufw","text":"ufw stores all rules persistent, so you just need to execute the commands below. IPv4 : ufw allow 80 /tcp ufw allow 53 /tcp ufw allow 53 /udp ufw allow 67 /tcp ufw allow 67 /udp IPv6 (include above IPv4 rules): ufw allow 546 :547/udp","title":"ufw"},{"location":"main/presentations/","text":"","title":"Presenting Pi-hole"},{"location":"main/projects/","text":"The Big Blocklist Collection Pi-Hole in the cloud Minibian Pi-hole CHiP-hole: Network-wide Ad-blocker Chrome Extension: Pi-Hole List Editor ( Source Code ) Splunk: Pi-hole Visualiser Adblocking with Pi-hole and Ubuntu 14.04 on VirtualBox Pi-hole stats in your Mac's menu bar Pi-hole unRAID Template Copernicus: Windows Tray Application Let your blink1 device blink when Pi-hole filters ads Pi-hole metrics exporter for Prometheus Magic Mirror with DNS Filtering Pi-hole Droid: Android client Windows DNS Swapper , see #1400 Pi-hole Visualizer Enable/Disable Pi-Hole from your iPhone Home Screen","title":"Community Projects"},{"location":"main/update/","text":"Updating is as simple as running the following command: pihole -up Common issues with updating: \u00b6 [Placeholder for solutions to issues]","title":"Updating"},{"location":"main/update/#common-issues-with-updating","text":"[Placeholder for solutions to issues]","title":"Common issues with updating:"}]}